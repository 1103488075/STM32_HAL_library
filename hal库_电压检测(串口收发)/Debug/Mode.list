
Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d90  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007f78  08007f78  00017f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008328  08008328  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008328  08008328  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001fc  0800852c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800852c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a0  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a58  00000000  00000000  000298c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002b320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002bb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001708a  00000000  00000000  0002c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b7b  00000000  00000000  00043342  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f25d  00000000  00000000  0004aebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca11a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  000ca198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001fc 	.word	0x200001fc
 8000204:	00000000 	.word	0x00000000
 8000208:	08007f60 	.word	0x08007f60

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000200 	.word	0x20000200
 8000224:	08007f60 	.word	0x08007f60

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038a:	f1a4 0401 	sub.w	r4, r4, #1
 800038e:	d1e9      	bne.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d10:	f1a2 0201 	sub.w	r2, r2, #1
 8000d14:	d1ed      	bne.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串�?

    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f002 f9f6 	bl	8003272 <HAL_UART_Transmit>
    return ch;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000358 	.word	0x20000358
 8000e94:	00000000 	.word	0x00000000

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fb97 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f86b 	bl	8000f7c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000ea6:	f000 f92f 	bl	8001108 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eaa:	f000 f8c5 	bl	8001038 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eae:	f000 f901 	bl	80010b4 <MX_USART1_UART_Init>

  HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);//开启接收中断
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	492a      	ldr	r1, [pc, #168]	; (8000f60 <main+0xc8>)
 8000eb6:	482b      	ldr	r0, [pc, #172]	; (8000f64 <main+0xcc>)
 8000eb8:	f002 fa74 	bl	80033a4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  HAL_ADC_Start(&hadc1);//轮询模式
 8000ebc:	482a      	ldr	r0, [pc, #168]	; (8000f68 <main+0xd0>)
 8000ebe:	f000 fcf5 	bl	80018ac <HAL_ADC_Start>

	  	  HAL_ADC_PollForConversion(&hadc1, 50);
 8000ec2:	2132      	movs	r1, #50	; 0x32
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <main+0xd0>)
 8000ec6:	f000 fd9f 	bl	8001a08 <HAL_ADC_PollForConversion>

	  	  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8000eca:	4827      	ldr	r0, [pc, #156]	; (8000f68 <main+0xd0>)
 8000ecc:	f000 ff9a 	bl	8001e04 <HAL_ADC_GetState>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d038      	beq.n	8000f4c <main+0xb4>
	  	  {
	  		  AdcConvertedValue = HAL_ADC_GetValue(&hadc1);
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <main+0xd0>)
 8000edc:	f000 fe8e 	bl	8001bfc <HAL_ADC_GetValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	80fb      	strh	r3, [r7, #6]
	  		  AdcConvertedVotage = (float) AdcConvertedValue*3.3/4096;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff6a 	bl	8000dc0 <__aeabi_ui2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb10 	bl	8000514 <__aeabi_f2d>
 8000ef4:	a318      	add	r3, pc, #96	; (adr r3, 8000f58 <main+0xc0>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fb63 	bl	80005c4 <__aeabi_dmul>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4618      	mov	r0, r3
 8000f04:	4621      	mov	r1, r4
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <main+0xd4>)
 8000f0c:	f7ff fc84 	bl	8000818 <__aeabi_ddiv>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	f7ff fe4c 	bl	8000bb4 <__aeabi_d2f>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	603b      	str	r3, [r7, #0]

	  		  if(Uart1_Voltage_Flag == 1)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <main+0xd8>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d111      	bne.n	8000f4c <main+0xb4>
	  		  {

	  			  Uart1_Voltage_Flag = 0;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <main+0xd8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	  		  		 printf("ADC Value : %d \r\n", AdcConvertedValue);
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4810      	ldr	r0, [pc, #64]	; (8000f74 <main+0xdc>)
 8000f34:	f003 fc64 	bl	8004800 <iprintf>
	  		  		 printf("ADC Conversion voltage value : %.2f V \r\n", AdcConvertedVotage);
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f7ff faeb 	bl	8000514 <__aeabi_f2d>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460c      	mov	r4, r1
 8000f42:	461a      	mov	r2, r3
 8000f44:	4623      	mov	r3, r4
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <main+0xe0>)
 8000f48:	f003 fc5a 	bl	8004800 <iprintf>
	  		  }

	  	  }
	  	  HAL_Delay(1000);
 8000f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f50:	f000 fba0 	bl	8001694 <HAL_Delay>
	  	  HAL_ADC_Start(&hadc1);//轮询模式
 8000f54:	e7b2      	b.n	8000ebc <main+0x24>
 8000f56:	bf00      	nop
 8000f58:	66666666 	.word	0x66666666
 8000f5c:	400a6666 	.word	0x400a6666
 8000f60:	20000398 	.word	0x20000398
 8000f64:	20000358 	.word	0x20000358
 8000f68:	20000328 	.word	0x20000328
 8000f6c:	40b00000 	.word	0x40b00000
 8000f70:	20000219 	.word	0x20000219
 8000f74:	08007f78 	.word	0x08007f78
 8000f78:	08007f8c 	.word	0x08007f8c

08000f7c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f86:	2228      	movs	r2, #40	; 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fe00 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fcc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fb44 	bl	8002664 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000fe2:	f000 f92f 	bl	8001244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fdae 	bl	8002b64 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800100e:	f000 f919 	bl	8001244 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f001 ff3c 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800102a:	f000 f90b 	bl	8001244 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3758      	adds	r7, #88	; 0x58
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_ADC1_Init+0x74>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_ADC1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_ADC1_Init+0x74>)
 8001056:	2201      	movs	r2, #1
 8001058:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_ADC1_Init+0x74>)
 8001062:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_ADC1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC1_Init+0x74>)
 8001070:	2201      	movs	r2, #1
 8001072:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_ADC1_Init+0x74>)
 8001076:	f000 fb2f 	bl	80016d8 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f8e0 	bl	8001244 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001088:	2301      	movs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_ADC1_Init+0x74>)
 8001096:	f000 fdbd 	bl	8001c14 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 f8d0 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000328 	.word	0x20000328
 80010b0:	40012400 	.word	0x40012400

080010b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_USART1_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ec:	f002 f874 	bl	80031d8 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f000 f8a5 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000358 	.word	0x20000358
 8001104:	40013800 	.word	0x40013800

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_GPIO_Init+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <MX_GPIO_Init+0x74>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_GPIO_Init+0x74>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_GPIO_Init+0x74>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <MX_GPIO_Init+0x74>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_GPIO_Init+0x74>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2123      	movs	r1, #35	; 0x23
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <MX_GPIO_Init+0x78>)
 8001152:	f001 fa6f 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001156:	2323      	movs	r3, #35	; 0x23
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0x78>)
 800116e:	f001 f8f7 	bl	8002360 <HAL_GPIO_Init>

}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00

08001184 <HAL_UART_RxCpltCallback>:
/*
 *	 串口中断回调函数
 *
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

		UNUSED(huart);

		if(Uart1_Rx_Cnt >= 255)  //溢出判断
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2bff      	cmp	r3, #255	; 0xff
 8001192:	d110      	bne.n	80011b6 <HAL_UART_RxCpltCallback+0x32>
		{
			Uart1_Rx_Cnt = 0;
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			memset(Uart1_RxBuff,0x00,sizeof(Uart1_RxBuff));
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	2100      	movs	r1, #0
 80011a0:	4822      	ldr	r0, [pc, #136]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011a2:	f002 fcf5 	bl	8003b90 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t *)&cAlmStr, sizeof(cAlmStr),0xFFFF);
 80011a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011aa:	2220      	movs	r2, #32
 80011ac:	4920      	ldr	r1, [pc, #128]	; (8001230 <HAL_UART_RxCpltCallback+0xac>)
 80011ae:	4821      	ldr	r0, [pc, #132]	; (8001234 <HAL_UART_RxCpltCallback+0xb0>)
 80011b0:	f002 f85f 	bl	8003272 <HAL_UART_Transmit>
 80011b4:	e02f      	b.n	8001216 <HAL_UART_RxCpltCallback+0x92>
		}
		else
		{
			Uart1_RxBuff[Uart1_Rx_Cnt++] = aRxBuffer;   //接收数据转存
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	b2d1      	uxtb	r1, r2
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011c0:	7011      	strb	r1, [r2, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_RxCpltCallback+0xb4>)
 80011c6:	7819      	ldrb	r1, [r3, #0]
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011ca:	5499      	strb	r1, [r3, r2]

			if((Uart1_RxBuff[Uart1_Rx_Cnt-1] == 0x0A)&&(Uart1_RxBuff[Uart1_Rx_Cnt-2] == 0x0D)) //判断结束位
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d11d      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x92>
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3b02      	subs	r3, #2
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	2b0d      	cmp	r3, #13
 80011e6:	d116      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x92>
			{
				//HAL_UART_Transmit(&huart1, (uint8_t *)&Uart1_RxBuff, Uart1_Rx_Cnt,0xFFFF); //将收到的信息发送出去
				if(strcmp(Uart1_RxBuff,"Voltage\r\n") == 0)
 80011e8:	4914      	ldr	r1, [pc, #80]	; (800123c <HAL_UART_RxCpltCallback+0xb8>)
 80011ea:	4810      	ldr	r0, [pc, #64]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011ec:	f7ff f81c 	bl	8000228 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <HAL_UART_RxCpltCallback+0x7a>
				{
					Uart1_Voltage_Flag = 1;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_UART_RxCpltCallback+0xbc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e002      	b.n	8001204 <HAL_UART_RxCpltCallback+0x80>
				}
				else
				{
					Uart1_Voltage_Flag = 0;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_UART_RxCpltCallback+0xbc>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
				}

				Uart1_Rx_Cnt = 0;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
				memset(Uart1_RxBuff,0x00,sizeof(Uart1_RxBuff)); //清空数组
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	2100      	movs	r1, #0
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 8001212:	f002 fcbd 	bl	8003b90 <memset>
			}
		}

		HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);   //再开启接收中断
 8001216:	2201      	movs	r2, #1
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <HAL_UART_RxCpltCallback+0xb4>)
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <HAL_UART_RxCpltCallback+0xb0>)
 800121c:	f002 f8c2 	bl	80033a4 <HAL_UART_Receive_IT>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000218 	.word	0x20000218
 800122c:	20000228 	.word	0x20000228
 8001230:	20000000 	.word	0x20000000
 8001234:	20000358 	.word	0x20000358
 8001238:	20000398 	.word	0x20000398
 800123c:	08007fb8 	.word	0x08007fb8
 8001240:	20000219 	.word	0x20000219

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <HAL_MspInit+0x5c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_MspInit+0x5c>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_MspInit+0x5c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_MspInit+0x60>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_MspInit+0x60>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_ADC_MspInit+0x6c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d121      	bne.n	8001318 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001304:	2304      	movs	r3, #4
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_ADC_MspInit+0x74>)
 8001314:	f001 f824 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40012400 	.word	0x40012400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_UART_MspInit+0x9c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d139      	bne.n	80013c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_UART_MspInit+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_UART_MspInit+0xa0>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_UART_MspInit+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_UART_MspInit+0xa0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_UART_MspInit+0xa0>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_UART_MspInit+0xa0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800137c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <HAL_UART_MspInit+0xa4>)
 8001392:	f000 ffe5 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_UART_MspInit+0xa4>)
 80013ac:	f000 ffd8 	bl	8002360 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2025      	movs	r0, #37	; 0x25
 80013b6:	f000 fe94 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ba:	2025      	movs	r0, #37	; 0x25
 80013bc:	f000 fead 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <HardFault_Handler+0x4>

080013e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <BusFault_Handler+0x4>

080013f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <UsageFault_Handler+0x4>

080013f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f91c 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USART1_IRQHandler+0x10>)
 800142e:	f002 f80d 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000358 	.word	0x20000358

0800143c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fced 	bl	8000e70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x50>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x16>
		heap_end = &end;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <_sbrk+0x50>)
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <_sbrk+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <_sbrk+0x50>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <_sbrk+0x50>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	466a      	mov	r2, sp
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d907      	bls.n	80014ea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80014da:	f002 fb2f 	bl	8003b3c <__errno>
 80014de:	4602      	mov	r2, r0
 80014e0:	230c      	movs	r3, #12
 80014e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	e006      	b.n	80014f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <_sbrk+0x50>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a03      	ldr	r2, [pc, #12]	; (8001500 <_sbrk+0x50>)
 80014f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000021c 	.word	0x2000021c
 8001504:	200003a8 	.word	0x200003a8

08001508 <_close>:

int _close(int file)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	605a      	str	r2, [r3, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <_isatty>:

int _isatty(int file)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <SystemInit+0x5c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <SystemInit+0x5c>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <SystemInit+0x5c>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4911      	ldr	r1, [pc, #68]	; (80015c4 <SystemInit+0x5c>)
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <SystemInit+0x60>)
 8001580:	4013      	ands	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <SystemInit+0x5c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <SystemInit+0x5c>)
 800158a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800158e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <SystemInit+0x5c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SystemInit+0x5c>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SystemInit+0x5c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <SystemInit+0x5c>)
 80015a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SystemInit+0x5c>)
 80015ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SystemInit+0x64>)
 80015b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	40021000 	.word	0x40021000
 80015c8:	f8ff0000 	.word	0xf8ff0000
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x28>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fd73 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe30 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd8b 	bl	8002136 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 fd53 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000020 	.word	0x20000020
 8001654:	20000028 	.word	0x20000028
 8001658:	20000024 	.word	0x20000024

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x20>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x20>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000028 	.word	0x20000028
 800167c:	2000039c 	.word	0x2000039c

08001680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_GetTick+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	2000039c 	.word	0x2000039c

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff fff0 	bl	8001680 <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_Delay+0x40>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffe0 	bl	8001680 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000028 	.word	0x20000028

080016d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0ce      	b.n	8001898 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fdcc 	bl	80012b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fbcf 	bl	8001ec0 <ADC_ConversionStop_Disable>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80a9 	bne.w	8001886 <HAL_ADC_Init+0x1ae>
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80a5 	bne.w	8001886 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001744:	f023 0302 	bic.w	r3, r3, #2
 8001748:	f043 0202 	orr.w	r2, r3, #2
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4951      	ldr	r1, [pc, #324]	; (80018a0 <HAL_ADC_Init+0x1c8>)
 800175a:	428b      	cmp	r3, r1
 800175c:	d10a      	bne.n	8001774 <HAL_ADC_Init+0x9c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001766:	d002      	beq.n	800176e <HAL_ADC_Init+0x96>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	e004      	b.n	8001778 <HAL_ADC_Init+0xa0>
 800176e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001772:	e001      	b.n	8001778 <HAL_ADC_Init+0xa0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001778:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b1b      	ldrb	r3, [r3, #12]
 800177e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001780:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4313      	orrs	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001790:	d003      	beq.n	800179a <HAL_ADC_Init+0xc2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_Init+0xc8>
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	e000      	b.n	80017a2 <HAL_ADC_Init+0xca>
 80017a0:	2300      	movs	r3, #0
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7d1b      	ldrb	r3, [r3, #20]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d119      	bne.n	80017e4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	3b01      	subs	r3, #1
 80017be:	035a      	lsls	r2, r3, #13
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	e00b      	b.n	80017e4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f043 0220 	orr.w	r2, r3, #32
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_ADC_Init+0x1cc>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	430b      	orrs	r3, r1
 800180a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d003      	beq.n	800181e <HAL_ADC_Init+0x146>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d104      	bne.n	8001828 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	3b01      	subs	r3, #1
 8001824:	051b      	lsls	r3, r3, #20
 8001826:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	430a      	orrs	r2, r1
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_ADC_Init+0x1d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d10b      	bne.n	8001864 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001862:	e018      	b.n	8001896 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f023 0312 	bic.w	r3, r3, #18
 800186c:	f043 0210 	orr.w	r2, r3, #16
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001884:	e007      	b.n	8001896 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40013c00 	.word	0x40013c00
 80018a4:	ffe1f7fd 	.word	0xffe1f7fd
 80018a8:	ff1f0efe 	.word	0xff1f0efe

080018ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Start+0x1a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e098      	b.n	80019f8 <HAL_ADC_Start+0x14c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 faa4 	bl	8001e1c <ADC_Enable>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 8087 	bne.w	80019ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a41      	ldr	r2, [pc, #260]	; (8001a00 <HAL_ADC_Start+0x154>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d105      	bne.n	800190a <HAL_ADC_Start+0x5e>
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_ADC_Start+0x158>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d026      	beq.n	8001972 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001934:	e01d      	b.n	8001972 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <HAL_ADC_Start+0x158>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_ADC_Start+0xaa>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <HAL_ADC_Start+0x154>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10d      	bne.n	8001972 <HAL_ADC_Start+0xc6>
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_ADC_Start+0x158>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f023 0206 	bic.w	r2, r3, #6
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
 800198a:	e002      	b.n	8001992 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f06f 0202 	mvn.w	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019b2:	d113      	bne.n	80019dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_Start+0x154>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d105      	bne.n	80019ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_ADC_Start+0x158>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d108      	bne.n	80019dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e00c      	b.n	80019f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e003      	b.n	80019f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40012800 	.word	0x40012800
 8001a04:	40012400 	.word	0x40012400

08001a08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a1e:	f7ff fe2f 	bl	8001680 <HAL_GetTick>
 8001a22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	f043 0220 	orr.w	r2, r3, #32
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0c8      	b.n	8001bdc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d12a      	bne.n	8001aae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d123      	bne.n	8001aae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a66:	e01a      	b.n	8001a9e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6e:	d016      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x7e>
 8001a76:	f7ff fe03 	bl	8001680 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20b      	bcs.n	8001a9e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e09e      	b.n	8001bdc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0dd      	beq.n	8001a68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aac:	e06c      	b.n	8001b88 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_ADC_PollForConversion+0x1dc>)
 8001ab0:	681c      	ldr	r4, [r3, #0]
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f001 faa8 	bl	8003008 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <HAL_ADC_PollForConversion+0x1e0>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_ADC_PollForConversion+0xf6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_ADC_PollForConversion+0x1e4>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d111      	bne.n	8001afe <HAL_ADC_PollForConversion+0xf6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_ADC_PollForConversion+0x1e8>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d108      	bne.n	8001afa <HAL_ADC_PollForConversion+0xf2>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68d9      	ldr	r1, [r3, #12]
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_ADC_PollForConversion+0x1ec>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_PollForConversion+0xf2>
 8001af6:	2314      	movs	r3, #20
 8001af8:	e020      	b.n	8001b3c <HAL_ADC_PollForConversion+0x134>
 8001afa:	2329      	movs	r3, #41	; 0x29
 8001afc:	e01e      	b.n	8001b3c <HAL_ADC_PollForConversion+0x134>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6919      	ldr	r1, [r3, #16]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_ADC_PollForConversion+0x1e8>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d106      	bne.n	8001b1a <HAL_ADC_PollForConversion+0x112>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_ADC_PollForConversion+0x1ec>)
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00d      	beq.n	8001b36 <HAL_ADC_PollForConversion+0x12e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6919      	ldr	r1, [r3, #16]
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_ADC_PollForConversion+0x1f0>)
 8001b22:	400b      	ands	r3, r1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x132>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_ADC_PollForConversion+0x1f0>)
 8001b30:	400b      	ands	r3, r1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x132>
 8001b36:	2354      	movs	r3, #84	; 0x54
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_PollForConversion+0x134>
 8001b3a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b42:	e01d      	b.n	8001b80 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d016      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_PollForConversion+0x15a>
 8001b52:	f7ff fd95 	bl	8001680 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d20b      	bcs.n	8001b7a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f043 0204 	orr.w	r2, r3, #4
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e030      	b.n	8001bdc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8dd      	bhi.n	8001b44 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0212 	mvn.w	r2, #18
 8001b90:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bac:	d115      	bne.n	8001bda <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d111      	bne.n	8001bda <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	20000020 	.word	0x20000020
 8001be8:	24924924 	.word	0x24924924
 8001bec:	00924924 	.word	0x00924924
 8001bf0:	12492492 	.word	0x12492492
 8001bf4:	00492492 	.word	0x00492492
 8001bf8:	00249249 	.word	0x00249249

08001bfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x20>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0dc      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1da>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d81c      	bhi.n	8001c7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b05      	subs	r3, #5
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7c:	e03c      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d81c      	bhi.n	8001cc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b23      	subs	r3, #35	; 0x23
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4019      	ands	r1, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b23      	subs	r3, #35	; 0x23
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cbe:	e01b      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b41      	subs	r3, #65	; 0x41
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d91c      	bls.n	8001d3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b1e      	subs	r3, #30
 8001d12:	2207      	movs	r2, #7
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6898      	ldr	r0, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b1e      	subs	r3, #30
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	e019      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6919      	ldr	r1, [r3, #16]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4019      	ands	r1, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6898      	ldr	r0, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d132      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d125      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001da4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d11a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_ADC_ConfigChannel+0x1e8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_ADC_ConfigChannel+0x1ec>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9a      	lsrs	r2, r3, #18
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x1b2>
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012400 	.word	0x40012400
 8001dfc:	20000020 	.word	0x20000020
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d039      	beq.n	8001eae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <ADC_Enable+0x9c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <ADC_Enable+0xa0>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e58:	e002      	b.n	8001e60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e66:	f7ff fc0b 	bl	8001680 <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6c:	e018      	b.n	8001ea0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e6e:	f7ff fc07 	bl	8001680 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d911      	bls.n	8001ea0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	f043 0210 	orr.w	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d1df      	bne.n	8001e6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000020 	.word	0x20000020
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d127      	bne.n	8001f2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eea:	f7ff fbc9 	bl	8001680 <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ef0:	e014      	b.n	8001f1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef2:	f7ff fbc5 	bl	8001680 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d90d      	bls.n	8001f1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f043 0210 	orr.w	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e007      	b.n	8001f2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d0e3      	beq.n	8001ef2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4906      	ldr	r1, [pc, #24]	; (8001fcc <__NVIC_EnableIRQ+0x34>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff90 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff2d 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff42 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff35 	bl	8001f98 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e0d6      	b.n	8002320 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_DMA_Abort_IT+0x1dc>)
 800219a:	429a      	cmp	r2, r3
 800219c:	d958      	bls.n	8002250 <HAL_DMA_Abort_IT+0x100>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a63      	ldr	r2, [pc, #396]	; (8002330 <HAL_DMA_Abort_IT+0x1e0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04f      	beq.n	8002248 <HAL_DMA_Abort_IT+0xf8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a61      	ldr	r2, [pc, #388]	; (8002334 <HAL_DMA_Abort_IT+0x1e4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d048      	beq.n	8002244 <HAL_DMA_Abort_IT+0xf4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_DMA_Abort_IT+0x1e8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d040      	beq.n	800223e <HAL_DMA_Abort_IT+0xee>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5e      	ldr	r2, [pc, #376]	; (800233c <HAL_DMA_Abort_IT+0x1ec>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d038      	beq.n	8002238 <HAL_DMA_Abort_IT+0xe8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5d      	ldr	r2, [pc, #372]	; (8002340 <HAL_DMA_Abort_IT+0x1f0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d030      	beq.n	8002232 <HAL_DMA_Abort_IT+0xe2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <HAL_DMA_Abort_IT+0x1f4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d028      	beq.n	800222c <HAL_DMA_Abort_IT+0xdc>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_DMA_Abort_IT+0x1dc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d020      	beq.n	8002226 <HAL_DMA_Abort_IT+0xd6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_DMA_Abort_IT+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_DMA_Abort_IT+0xd2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_DMA_Abort_IT+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d012      	beq.n	800221e <HAL_DMA_Abort_IT+0xce>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a54      	ldr	r2, [pc, #336]	; (8002350 <HAL_DMA_Abort_IT+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00a      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a53      	ldr	r2, [pc, #332]	; (8002354 <HAL_DMA_Abort_IT+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_DMA_Abort_IT+0xc2>
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	e01b      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002216:	e018      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	e015      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 800221e:	2310      	movs	r3, #16
 8002220:	e013      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002222:	2301      	movs	r3, #1
 8002224:	e011      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222a:	e00e      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 800222c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002230:	e00b      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002236:	e008      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	e005      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 800223e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002242:	e002      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002244:	2310      	movs	r3, #16
 8002246:	e000      	b.n	800224a <HAL_DMA_Abort_IT+0xfa>
 8002248:	2301      	movs	r3, #1
 800224a:	4a43      	ldr	r2, [pc, #268]	; (8002358 <HAL_DMA_Abort_IT+0x208>)
 800224c:	6053      	str	r3, [r2, #4]
 800224e:	e057      	b.n	8002300 <HAL_DMA_Abort_IT+0x1b0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_DMA_Abort_IT+0x1e0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d04f      	beq.n	80022fa <HAL_DMA_Abort_IT+0x1aa>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a35      	ldr	r2, [pc, #212]	; (8002334 <HAL_DMA_Abort_IT+0x1e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d048      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x1a6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_DMA_Abort_IT+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d040      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x1a0>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_DMA_Abort_IT+0x1ec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d038      	beq.n	80022ea <HAL_DMA_Abort_IT+0x19a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_DMA_Abort_IT+0x1f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d030      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x194>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_DMA_Abort_IT+0x1f4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d028      	beq.n	80022de <HAL_DMA_Abort_IT+0x18e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_DMA_Abort_IT+0x1dc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d020      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x188>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_DMA_Abort_IT+0x1f8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d019      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x184>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_DMA_Abort_IT+0x1fc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d012      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x180>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_DMA_Abort_IT+0x200>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00a      	beq.n	80022ca <HAL_DMA_Abort_IT+0x17a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <HAL_DMA_Abort_IT+0x204>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d102      	bne.n	80022c4 <HAL_DMA_Abort_IT+0x174>
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	e01b      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c8:	e018      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ce:	e015      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022d0:	2310      	movs	r3, #16
 80022d2:	e013      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e011      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022dc:	e00e      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022e2:	e00b      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e8:	e008      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ee:	e005      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	e002      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022f6:	2310      	movs	r3, #16
 80022f8:	e000      	b.n	80022fc <HAL_DMA_Abort_IT+0x1ac>
 80022fa:	2301      	movs	r3, #1
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_DMA_Abort_IT+0x20c>)
 80022fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
    } 
  }
  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40020080 	.word	0x40020080
 8002330:	40020008 	.word	0x40020008
 8002334:	4002001c 	.word	0x4002001c
 8002338:	40020030 	.word	0x40020030
 800233c:	40020044 	.word	0x40020044
 8002340:	40020058 	.word	0x40020058
 8002344:	4002006c 	.word	0x4002006c
 8002348:	40020408 	.word	0x40020408
 800234c:	4002041c 	.word	0x4002041c
 8002350:	40020430 	.word	0x40020430
 8002354:	40020444 	.word	0x40020444
 8002358:	40020400 	.word	0x40020400
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e133      	b.n	80025dc <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002374:	2201      	movs	r2, #1
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8122 	bne.w	80025d6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b12      	cmp	r3, #18
 8002398:	d034      	beq.n	8002404 <HAL_GPIO_Init+0xa4>
 800239a:	2b12      	cmp	r3, #18
 800239c:	d80d      	bhi.n	80023ba <HAL_GPIO_Init+0x5a>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x9a>
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d804      	bhi.n	80023b0 <HAL_GPIO_Init+0x50>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d01c      	beq.n	80023e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ae:	e048      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d043      	beq.n	800243c <HAL_GPIO_Init+0xdc>
 80023b4:	2b11      	cmp	r3, #17
 80023b6:	d01b      	beq.n	80023f0 <HAL_GPIO_Init+0x90>
          break;
 80023b8:	e043      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023ba:	4a8f      	ldr	r2, [pc, #572]	; (80025f8 <HAL_GPIO_Init+0x298>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d026      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023c0:	4a8d      	ldr	r2, [pc, #564]	; (80025f8 <HAL_GPIO_Init+0x298>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d806      	bhi.n	80023d4 <HAL_GPIO_Init+0x74>
 80023c6:	4a8d      	ldr	r2, [pc, #564]	; (80025fc <HAL_GPIO_Init+0x29c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d020      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023cc:	4a8c      	ldr	r2, [pc, #560]	; (8002600 <HAL_GPIO_Init+0x2a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_GPIO_Init+0xae>
          break;
 80023d2:	e036      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023d4:	4a8b      	ldr	r2, [pc, #556]	; (8002604 <HAL_GPIO_Init+0x2a4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023da:	4a8b      	ldr	r2, [pc, #556]	; (8002608 <HAL_GPIO_Init+0x2a8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d016      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023e0:	4a8a      	ldr	r2, [pc, #552]	; (800260c <HAL_GPIO_Init+0x2ac>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0xae>
          break;
 80023e6:	e02c      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e028      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e023      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3308      	adds	r3, #8
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e01e      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	330c      	adds	r3, #12
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e019      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002416:	2304      	movs	r3, #4
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e012      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	611a      	str	r2, [r3, #16]
          break;
 800242e:	e008      	b.n	8002442 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	615a      	str	r2, [r3, #20]
          break;
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2bff      	cmp	r3, #255	; 0xff
 8002446:	d801      	bhi.n	800244c <HAL_GPIO_Init+0xec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	e001      	b.n	8002450 <HAL_GPIO_Init+0xf0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2bff      	cmp	r3, #255	; 0xff
 8002456:	d802      	bhi.n	800245e <HAL_GPIO_Init+0xfe>
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x104>
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3b08      	subs	r3, #8
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	210f      	movs	r1, #15
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	6a39      	ldr	r1, [r7, #32]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a2 	beq.w	80025d6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024aa:	4a5a      	ldr	r2, [pc, #360]	; (8002614 <HAL_GPIO_Init+0x2b4>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x1b6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_GPIO_Init+0x2bc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x1b2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_GPIO_Init+0x2c0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x1ae>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_GPIO_Init+0x2c4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x1aa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_GPIO_Init+0x2c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x1a6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_GPIO_Init+0x2cc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x1a2>
 80024fe:	2305      	movs	r3, #5
 8002500:	e00a      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 8002502:	2306      	movs	r3, #6
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 8002506:	2304      	movs	r3, #4
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x1b8>
 8002516:	2300      	movs	r3, #0
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002528:	493a      	ldr	r1, [pc, #232]	; (8002614 <HAL_GPIO_Init+0x2b4>)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	493a      	ldr	r1, [pc, #232]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002550:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	43db      	mvns	r3, r3
 8002558:	4935      	ldr	r1, [pc, #212]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 800255a:	4013      	ands	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4930      	ldr	r1, [pc, #192]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	492b      	ldr	r1, [pc, #172]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002582:	4013      	ands	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002592:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	4926      	ldr	r1, [pc, #152]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
 800259e:	e006      	b.n	80025ae <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4921      	ldr	r1, [pc, #132]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	491c      	ldr	r1, [pc, #112]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
 80025c6:	e006      	b.n	80025d6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	3301      	adds	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f aec4 	bne.w	8002374 <HAL_GPIO_Init+0x14>
  }
}
 80025ec:	bf00      	nop
 80025ee:	372c      	adds	r7, #44	; 0x2c
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	10210000 	.word	0x10210000
 80025fc:	10110000 	.word	0x10110000
 8002600:	10120000 	.word	0x10120000
 8002604:	10310000 	.word	0x10310000
 8002608:	10320000 	.word	0x10320000
 800260c:	10220000 	.word	0x10220000
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	40010800 	.word	0x40010800
 800261c:	40010c00 	.word	0x40010c00
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	40011800 	.word	0x40011800
 800262c:	40011c00 	.word	0x40011c00
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e26c      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8087 	beq.w	8002792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002684:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b04      	cmp	r3, #4
 800268e:	d00c      	beq.n	80026aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002690:	4b8f      	ldr	r3, [pc, #572]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d112      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
 800269c:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026aa:	4b89      	ldr	r3, [pc, #548]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d06c      	beq.n	8002790 <HAL_RCC_OscConfig+0x12c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d168      	bne.n	8002790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e246      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x76>
 80026cc:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a7f      	ldr	r2, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02e      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x98>
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b78      	ldr	r3, [pc, #480]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a77      	ldr	r2, [pc, #476]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0xbc>
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a71      	ldr	r2, [pc, #452]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 8002720:	4b6b      	ldr	r3, [pc, #428]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe ff9e 	bl	8001680 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe ff9a 	bl	8001680 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1fa      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xe4>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe ff8a 	bl	8001680 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe ff86 	bl	8001680 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1e6      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x10c>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279e:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x18c>
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x176>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1ba      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4939      	ldr	r1, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x270>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe ff3f 	bl	8001680 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe ff3b 	bl	8001680 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e19b      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_RCC_OscConfig+0x270>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe ff1e 	bl	8001680 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe ff1a 	bl	8001680 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e17a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03a      	beq.n	80028e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_RCC_OscConfig+0x274>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7fe fefe 	bl	8001680 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fefa 	bl	8001680 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e15a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fada 	bl	8002e60 <RCC_Delay>
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_RCC_OscConfig+0x274>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe fee4 	bl	8001680 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028bc:	f7fe fee0 	bl	8001680 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d908      	bls.n	80028dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e140      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	42420000 	.word	0x42420000
 80028d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e9      	bne.n	80028bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a6 	beq.w	8002a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fa:	4b97      	ldr	r3, [pc, #604]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b94      	ldr	r3, [pc, #592]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4a93      	ldr	r2, [pc, #588]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	61d3      	str	r3, [r2, #28]
 8002912:	4b91      	ldr	r3, [pc, #580]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b8e      	ldr	r3, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a8a      	ldr	r2, [pc, #552]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fea1 	bl	8001680 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fe9d 	bl	8001680 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0fd      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x312>
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e02d      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x334>
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	e01c      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x356>
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a6c      	ldr	r2, [pc, #432]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a66      	ldr	r2, [pc, #408]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d015      	beq.n	8002a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fe51 	bl	8001680 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fe4d 	bl	8001680 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0ab      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ee      	beq.n	80029e2 <HAL_RCC_OscConfig+0x37e>
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fe3b 	bl	8001680 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fe37 	bl	8001680 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e095      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ee      	bne.n	8002a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8081 	beq.w	8002b4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d061      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d146      	bne.n	8002aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fe0b 	bl	8001680 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fe07 	bl	8001680 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e067      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d108      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	492d      	ldr	r1, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a19      	ldr	r1, [r3, #32]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	4927      	ldr	r1, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fddb 	bl	8001680 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe fdd7 	bl	8001680 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e037      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x46a>
 8002aec:	e02f      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fdc4 	bl	8001680 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fdc0 	bl	8001680 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e020      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x498>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	42420060 	.word	0x42420060

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fd14 	bl	8001680 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fd10 	bl	8001680 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	fa21 f303 	lsr.w	r3, r1, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fc72 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08007fec 	.word	0x08007fec
 8002d30:	20000020 	.word	0x20000020
 8002d34:	20000024 	.word	0x20000024

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b490      	push	{r4, r7}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d40:	1d3c      	adds	r4, r7, #4
 8002d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x46>
 8002d76:	e02d      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d7a:	623b      	str	r3, [r7, #32]
      break;
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0c9b      	lsrs	r3, r3, #18
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0c5b      	lsrs	r3, r3, #17
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002daa:	4413      	add	r3, r2
 8002dac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002db6:	fb02 f203 	mul.w	r2, r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e004      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	623b      	str	r3, [r7, #32]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd6:	623b      	str	r3, [r7, #32]
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc90      	pop	{r4, r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	08007fc4 	.word	0x08007fc4
 8002dec:	08007fd4 	.word	0x08007fd4
 8002df0:	40021000 	.word	0x40021000
 8002df4:	007a1200 	.word	0x007a1200
 8002df8:	003d0900 	.word	0x003d0900

08002dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000020 	.word	0x20000020

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff2 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08007ffc 	.word	0x08007ffc

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffde 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e40:	4601      	mov	r1, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0adb      	lsrs	r3, r3, #11
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08007ffc 	.word	0x08007ffc

08002e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <RCC_Delay+0x34>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <RCC_Delay+0x38>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e7c:	bf00      	nop
  }
  while (Delay --);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f9      	bne.n	8002e7c <RCC_Delay+0x1c>
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000020 	.word	0x20000020
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d118      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fbc0 	bl	8001680 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe fbbc 	bl	8001680 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e06d      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02e      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d027      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d014      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fb8b 	bl	8001680 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fb87 	bl	8001680 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ee      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4917      	ldr	r1, [pc, #92]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	490b      	ldr	r1, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420440 	.word	0x42420440

08003008 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b08d      	sub	sp, #52	; 0x34
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003012:	f107 040c 	add.w	r4, r7, #12
 8003016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	2300      	movs	r3, #0
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3b01      	subs	r3, #1
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f200 80b6 	bhi.w	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800312b 	.word	0x0800312b
 800304c:	08003191 	.word	0x08003191
 8003050:	080031ad 	.word	0x080031ad
 8003054:	0800311b 	.word	0x0800311b
 8003058:	080031ad 	.word	0x080031ad
 800305c:	080031ad 	.word	0x080031ad
 8003060:	080031ad 	.word	0x080031ad
 8003064:	08003123 	.word	0x08003123
 8003068:	080031ad 	.word	0x080031ad
 800306c:	080031ad 	.word	0x080031ad
 8003070:	080031ad 	.word	0x080031ad
 8003074:	080031ad 	.word	0x080031ad
 8003078:	080031ad 	.word	0x080031ad
 800307c:	080031ad 	.word	0x080031ad
 8003080:	080031ad 	.word	0x080031ad
 8003084:	08003089 	.word	0x08003089
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003088:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800308e:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808a 	beq.w	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80030a8:	4413      	add	r3, r2
 80030aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c5b      	lsrs	r3, r3, #17
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80030c8:	4413      	add	r3, r2
 80030ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80030da:	4a3c      	ldr	r2, [pc, #240]	; (80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ea:	e004      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003102:	d102      	bne.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003108:	e052      	b.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003118:	e04a      	b.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800311a:	f7ff fe0d 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 800311e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003120:	e049      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003122:	f7ff fe09 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8003126:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003128:	e045      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d108      	bne.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
 800314c:	e01f      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d109      	bne.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003166:	f649 4340 	movw	r3, #40000	; 0x9c40
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
 800316c:	e00f      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003178:	d11c      	bne.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8003186:	f24f 4324 	movw	r3, #62500	; 0xf424
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800318c:	e012      	b.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800318e:	e011      	b.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003190:	f7ff fe52 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0b9b      	lsrs	r3, r3, #14
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	3301      	adds	r3, #1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031aa:	e004      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80031ac:	bf00      	nop
 80031ae:	e002      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80031b0:	bf00      	nop
 80031b2:	e000      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80031b4:	bf00      	nop
    }
  }
  return (frequency);
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3734      	adds	r7, #52	; 0x34
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	08007fd8 	.word	0x08007fd8
 80031c4:	08007fe8 	.word	0x08007fe8
 80031c8:	40021000 	.word	0x40021000
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	003d0900 	.word	0x003d0900
 80031d4:	aaaaaaab 	.word	0xaaaaaaab

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe f894 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb8d 	bl	800393c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	f040 8083 	bne.w	800339a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_UART_Transmit+0x2e>
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e07b      	b.n	800339c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Transmit+0x40>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e074      	b.n	800339c <HAL_UART_Transmit+0x12a>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	; 0x21
 80032c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032c8:	f7fe f9da 	bl	8001680 <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032da:	e042      	b.n	8003362 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d122      	bne.n	800333a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9b2 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e046      	b.n	800339c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003320:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3302      	adds	r3, #2
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	e017      	b.n	8003362 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	e013      	b.n	8003362 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f98f 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e023      	b.n	800339c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	60ba      	str	r2, [r7, #8]
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1b7      	bne.n	80032dc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f976 	bl	8003668 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e00a      	b.n	800339c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d140      	bne.n	8003440 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_UART_Receive_IT+0x26>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e039      	b.n	8003442 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_UART_Receive_IT+0x38>
 80033d8:	2302      	movs	r3, #2
 80033da:	e032      	b.n	8003442 <HAL_UART_Receive_IT+0x9e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	; 0x22
 8003400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_UART_IRQHandler+0x52>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9ce 	bl	8003838 <UART_Receive_IT>
      return;
 800349c:	e0cc      	b.n	8003638 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80ab 	beq.w	80035fc <HAL_UART_IRQHandler+0x1b0>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_UART_IRQHandler+0x70>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a0 	beq.w	80035fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0x90>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0xb0>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0xd0>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_UART_IRQHandler+0xf0>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f043 0208 	orr.w	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d078      	beq.n	8003636 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_UART_IRQHandler+0x112>
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f96d 	bl	8003838 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <HAL_UART_IRQHandler+0x13a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d031      	beq.n	80035ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8b8 	bl	80036fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d023      	beq.n	80035e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d013      	beq.n	80035da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	4a22      	ldr	r2, [pc, #136]	; (8003640 <HAL_UART_IRQHandler+0x1f4>)
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fdc6 	bl	8002150 <HAL_DMA_Abort_IT>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d4:	4610      	mov	r0, r2
 80035d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	e00e      	b.n	80035f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f83b 	bl	8003656 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	e00a      	b.n	80035f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f837 	bl	8003656 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	e006      	b.n	80035f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f833 	bl	8003656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035f6:	e01e      	b.n	8003636 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	bf00      	nop
    return;
 80035fa:	e01c      	b.n	8003636 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_UART_IRQHandler+0x1cc>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8a4 	bl	800375e <UART_Transmit_IT>
    return;
 8003616:	e00f      	b.n	8003638 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_UART_IRQHandler+0x1ec>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8eb 	bl	8003808 <UART_EndTransmit_IT>
    return;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003636:	bf00      	nop
  }
}
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	08003737 	.word	0x08003737

08003644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003678:	e02c      	b.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d028      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <UART_WaitOnFlagUntilTimeout+0x30>
 8003688:	f7fd fffa 	bl	8001680 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d21d      	bcs.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e00f      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d0c3      	beq.n	800367a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003712:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff ff80 	bl	8003656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b21      	cmp	r3, #33	; 0x21
 8003770:	d144      	bne.n	80037fc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d11a      	bne.n	80037b2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	621a      	str	r2, [r3, #32]
 80037a4:	e00e      	b.n	80037c4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	621a      	str	r2, [r3, #32]
 80037b0:	e008      	b.n	80037c4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6211      	str	r1, [r2, #32]
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4619      	mov	r1, r3
 80037d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff0b 	bl	8003644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b22      	cmp	r3, #34	; 0x22
 800384a:	d171      	bne.n	8003930 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d123      	bne.n	800389e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10e      	bne.n	8003882 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
 8003880:	e029      	b.n	80038d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	b29b      	uxth	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
 800389c:	e01b      	b.n	80038d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6858      	ldr	r0, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	1c59      	adds	r1, r3, #1
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6291      	str	r1, [r2, #40]	; 0x28
 80038b6:	b2c2      	uxtb	r2, r0
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e00c      	b.n	80038d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	1c58      	adds	r0, r3, #1
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	6288      	str	r0, [r1, #40]	; 0x28
 80038ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d120      	bne.n	800392c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0220 	bic.w	r2, r2, #32
 80038f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fc2e 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e002      	b.n	8003932 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003976:	f023 030c 	bic.w	r3, r3, #12
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	430b      	orrs	r3, r1
 8003982:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <UART_SetConfig+0x1ac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d14e      	bne.n	8003a42 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7ff fa48 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 80039a8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <UART_SetConfig+0x1b0>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	0119      	lsls	r1, r3, #4
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <UART_SetConfig+0x1b0>)
 80039e2:	fba3 0302 	umull	r0, r3, r3, r2
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2064      	movs	r0, #100	; 0x64
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	3332      	adds	r3, #50	; 0x32
 80039f4:	4a3d      	ldr	r2, [pc, #244]	; (8003aec <UART_SetConfig+0x1b0>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a00:	4419      	add	r1, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009a      	lsls	r2, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <UART_SetConfig+0x1b0>)
 8003a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2064      	movs	r0, #100	; 0x64
 8003a22:	fb00 f303 	mul.w	r3, r0, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	3332      	adds	r3, #50	; 0x32
 8003a2c:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <UART_SetConfig+0x1b0>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a40:	e04d      	b.n	8003ade <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7ff f9e5 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003a46:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009a      	lsls	r2, r3, #2
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4a23      	ldr	r2, [pc, #140]	; (8003aec <UART_SetConfig+0x1b0>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	0119      	lsls	r1, r3, #4
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009a      	lsls	r2, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <UART_SetConfig+0x1b0>)
 8003a80:	fba3 0302 	umull	r0, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2064      	movs	r0, #100	; 0x64
 8003a88:	fb00 f303 	mul.w	r3, r0, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <UART_SetConfig+0x1b0>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9e:	4419      	add	r1, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <UART_SetConfig+0x1b0>)
 8003ab8:	fba3 0302 	umull	r0, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2064      	movs	r0, #100	; 0x64
 8003ac0:	fb00 f303 	mul.w	r3, r0, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <UART_SetConfig+0x1b0>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	440a      	add	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	51eb851f 	.word	0x51eb851f

08003af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003af0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003af2:	e003      	b.n	8003afc <LoopCopyDataInit>

08003af4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003af6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003af8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003afa:	3104      	adds	r1, #4

08003afc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003afc:	480a      	ldr	r0, [pc, #40]	; (8003b28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b04:	d3f6      	bcc.n	8003af4 <CopyDataInit>
  ldr r2, =_sbss
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b08:	e002      	b.n	8003b10 <LoopFillZerobss>

08003b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b0c:	f842 3b04 	str.w	r3, [r2], #4

08003b10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b14:	d3f9      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b16:	f7fd fd27 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1a:	f000 f815 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b1e:	f7fd f9bb 	bl	8000e98 <main>
  bx lr
 8003b22:	4770      	bx	lr
  ldr r3, =_sidata
 8003b24:	08008330 	.word	0x08008330
  ldr r0, =_sdata
 8003b28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b2c:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8003b30:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 8003b34:	200003a4 	.word	0x200003a4

08003b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC1_2_IRQHandler>
	...

08003b3c <__errno>:
 8003b3c:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <__errno+0x8>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000002c 	.word	0x2000002c

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	4e0c      	ldr	r6, [pc, #48]	; (8003b80 <__libc_init_array+0x38>)
 8003b4e:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b50:	1ba4      	subs	r4, r4, r6
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	42a5      	cmp	r5, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	f004 fa02 	bl	8007f60 <_init>
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	4e0a      	ldr	r6, [pc, #40]	; (8003b88 <__libc_init_array+0x40>)
 8003b60:	4c0a      	ldr	r4, [pc, #40]	; (8003b8c <__libc_init_array+0x44>)
 8003b62:	1ba4      	subs	r4, r4, r6
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	42a5      	cmp	r5, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b70:	4798      	blx	r3
 8003b72:	3501      	adds	r5, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b7a:	4798      	blx	r3
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	08008328 	.word	0x08008328
 8003b84:	08008328 	.word	0x08008328
 8003b88:	08008328 	.word	0x08008328
 8003b8c:	0800832c 	.word	0x0800832c

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <__cvt>:
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba6:	461e      	mov	r6, r3
 8003ba8:	bfbb      	ittet	lt
 8003baa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	461e      	movlt	r6, r3
 8003bb0:	2300      	movge	r3, #0
 8003bb2:	232d      	movlt	r3, #45	; 0x2d
 8003bb4:	b088      	sub	sp, #32
 8003bb6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003bb8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003bbc:	f027 0720 	bic.w	r7, r7, #32
 8003bc0:	2f46      	cmp	r7, #70	; 0x46
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003bc6:	700b      	strb	r3, [r1, #0]
 8003bc8:	d004      	beq.n	8003bd4 <__cvt+0x34>
 8003bca:	2f45      	cmp	r7, #69	; 0x45
 8003bcc:	d100      	bne.n	8003bd0 <__cvt+0x30>
 8003bce:	3501      	adds	r5, #1
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e000      	b.n	8003bd6 <__cvt+0x36>
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	aa07      	add	r2, sp, #28
 8003bd8:	9204      	str	r2, [sp, #16]
 8003bda:	aa06      	add	r2, sp, #24
 8003bdc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003be0:	e9cd 3500 	strd	r3, r5, [sp]
 8003be4:	4622      	mov	r2, r4
 8003be6:	4633      	mov	r3, r6
 8003be8:	f001 fd96 	bl	8005718 <_dtoa_r>
 8003bec:	2f47      	cmp	r7, #71	; 0x47
 8003bee:	4680      	mov	r8, r0
 8003bf0:	d102      	bne.n	8003bf8 <__cvt+0x58>
 8003bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bf4:	07db      	lsls	r3, r3, #31
 8003bf6:	d526      	bpl.n	8003c46 <__cvt+0xa6>
 8003bf8:	2f46      	cmp	r7, #70	; 0x46
 8003bfa:	eb08 0905 	add.w	r9, r8, r5
 8003bfe:	d111      	bne.n	8003c24 <__cvt+0x84>
 8003c00:	f898 3000 	ldrb.w	r3, [r8]
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d10a      	bne.n	8003c1e <__cvt+0x7e>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4631      	mov	r1, r6
 8003c10:	f7fc ff40 	bl	8000a94 <__aeabi_dcmpeq>
 8003c14:	b918      	cbnz	r0, 8003c1e <__cvt+0x7e>
 8003c16:	f1c5 0501 	rsb	r5, r5, #1
 8003c1a:	f8ca 5000 	str.w	r5, [sl]
 8003c1e:	f8da 3000 	ldr.w	r3, [sl]
 8003c22:	4499      	add	r9, r3
 8003c24:	2200      	movs	r2, #0
 8003c26:	2300      	movs	r3, #0
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	f7fc ff32 	bl	8000a94 <__aeabi_dcmpeq>
 8003c30:	b938      	cbnz	r0, 8003c42 <__cvt+0xa2>
 8003c32:	2230      	movs	r2, #48	; 0x30
 8003c34:	9b07      	ldr	r3, [sp, #28]
 8003c36:	454b      	cmp	r3, r9
 8003c38:	d205      	bcs.n	8003c46 <__cvt+0xa6>
 8003c3a:	1c59      	adds	r1, r3, #1
 8003c3c:	9107      	str	r1, [sp, #28]
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e7f8      	b.n	8003c34 <__cvt+0x94>
 8003c42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c46:	4640      	mov	r0, r8
 8003c48:	9b07      	ldr	r3, [sp, #28]
 8003c4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c4c:	eba3 0308 	sub.w	r3, r3, r8
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	b008      	add	sp, #32
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c58 <__exponent>:
 8003c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c5a:	2900      	cmp	r1, #0
 8003c5c:	bfb4      	ite	lt
 8003c5e:	232d      	movlt	r3, #45	; 0x2d
 8003c60:	232b      	movge	r3, #43	; 0x2b
 8003c62:	4604      	mov	r4, r0
 8003c64:	bfb8      	it	lt
 8003c66:	4249      	neglt	r1, r1
 8003c68:	2909      	cmp	r1, #9
 8003c6a:	f804 2b02 	strb.w	r2, [r4], #2
 8003c6e:	7043      	strb	r3, [r0, #1]
 8003c70:	dd21      	ble.n	8003cb6 <__exponent+0x5e>
 8003c72:	f10d 0307 	add.w	r3, sp, #7
 8003c76:	461f      	mov	r7, r3
 8003c78:	260a      	movs	r6, #10
 8003c7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c7e:	fb06 1115 	mls	r1, r6, r5, r1
 8003c82:	2d09      	cmp	r5, #9
 8003c84:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003c88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c8c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003c90:	4629      	mov	r1, r5
 8003c92:	dc09      	bgt.n	8003ca8 <__exponent+0x50>
 8003c94:	3130      	adds	r1, #48	; 0x30
 8003c96:	3b02      	subs	r3, #2
 8003c98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c9c:	42bb      	cmp	r3, r7
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	d304      	bcc.n	8003cac <__exponent+0x54>
 8003ca2:	1a10      	subs	r0, r2, r0
 8003ca4:	b003      	add	sp, #12
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca8:	4613      	mov	r3, r2
 8003caa:	e7e6      	b.n	8003c7a <__exponent+0x22>
 8003cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cb0:	f804 2b01 	strb.w	r2, [r4], #1
 8003cb4:	e7f2      	b.n	8003c9c <__exponent+0x44>
 8003cb6:	2330      	movs	r3, #48	; 0x30
 8003cb8:	4419      	add	r1, r3
 8003cba:	7083      	strb	r3, [r0, #2]
 8003cbc:	1d02      	adds	r2, r0, #4
 8003cbe:	70c1      	strb	r1, [r0, #3]
 8003cc0:	e7ef      	b.n	8003ca2 <__exponent+0x4a>
	...

08003cc4 <_printf_float>:
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc8:	b091      	sub	sp, #68	; 0x44
 8003cca:	460c      	mov	r4, r1
 8003ccc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003cce:	4693      	mov	fp, r2
 8003cd0:	461e      	mov	r6, r3
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	f002 fecc 	bl	8006a70 <_localeconv_r>
 8003cd8:	6803      	ldr	r3, [r0, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cde:	f7fc faad 	bl	800023c <strlen>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	900a      	str	r0, [sp, #40]	; 0x28
 8003cea:	3307      	adds	r3, #7
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	f103 0208 	add.w	r2, r3, #8
 8003cf4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003cf8:	f8d4 a000 	ldr.w	sl, [r4]
 8003cfc:	603a      	str	r2, [r7, #0]
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d06:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003d0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	4ba6      	ldr	r3, [pc, #664]	; (8003fb0 <_printf_float+0x2ec>)
 8003d16:	4638      	mov	r0, r7
 8003d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d1a:	f7fc feed 	bl	8000af8 <__aeabi_dcmpun>
 8003d1e:	bb68      	cbnz	r0, 8003d7c <_printf_float+0xb8>
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	4ba2      	ldr	r3, [pc, #648]	; (8003fb0 <_printf_float+0x2ec>)
 8003d26:	4638      	mov	r0, r7
 8003d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d2a:	f7fc fec7 	bl	8000abc <__aeabi_dcmple>
 8003d2e:	bb28      	cbnz	r0, 8003d7c <_printf_float+0xb8>
 8003d30:	2200      	movs	r2, #0
 8003d32:	2300      	movs	r3, #0
 8003d34:	4638      	mov	r0, r7
 8003d36:	4649      	mov	r1, r9
 8003d38:	f7fc feb6 	bl	8000aa8 <__aeabi_dcmplt>
 8003d3c:	b110      	cbz	r0, 8003d44 <_printf_float+0x80>
 8003d3e:	232d      	movs	r3, #45	; 0x2d
 8003d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d44:	4f9b      	ldr	r7, [pc, #620]	; (8003fb4 <_printf_float+0x2f0>)
 8003d46:	4b9c      	ldr	r3, [pc, #624]	; (8003fb8 <_printf_float+0x2f4>)
 8003d48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d4c:	bf98      	it	ls
 8003d4e:	461f      	movls	r7, r3
 8003d50:	2303      	movs	r3, #3
 8003d52:	f04f 0900 	mov.w	r9, #0
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	f02a 0304 	bic.w	r3, sl, #4
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	9600      	str	r6, [sp, #0]
 8003d60:	465b      	mov	r3, fp
 8003d62:	aa0f      	add	r2, sp, #60	; 0x3c
 8003d64:	4621      	mov	r1, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 f9e2 	bl	8004130 <_printf_common>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	f040 8090 	bne.w	8003e92 <_printf_float+0x1ce>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	b011      	add	sp, #68	; 0x44
 8003d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7c:	463a      	mov	r2, r7
 8003d7e:	464b      	mov	r3, r9
 8003d80:	4638      	mov	r0, r7
 8003d82:	4649      	mov	r1, r9
 8003d84:	f7fc feb8 	bl	8000af8 <__aeabi_dcmpun>
 8003d88:	b110      	cbz	r0, 8003d90 <_printf_float+0xcc>
 8003d8a:	4f8c      	ldr	r7, [pc, #560]	; (8003fbc <_printf_float+0x2f8>)
 8003d8c:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <_printf_float+0x2fc>)
 8003d8e:	e7db      	b.n	8003d48 <_printf_float+0x84>
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	a80d      	add	r0, sp, #52	; 0x34
 8003d9a:	a90e      	add	r1, sp, #56	; 0x38
 8003d9c:	d140      	bne.n	8003e20 <_printf_float+0x15c>
 8003d9e:	2306      	movs	r3, #6
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	f04f 0c00 	mov.w	ip, #0
 8003da6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003daa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	463a      	mov	r2, r7
 8003dba:	464b      	mov	r3, r9
 8003dbc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f7ff feed 	bl	8003ba0 <__cvt>
 8003dc6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003dca:	2b47      	cmp	r3, #71	; 0x47
 8003dcc:	4607      	mov	r7, r0
 8003dce:	d109      	bne.n	8003de4 <_printf_float+0x120>
 8003dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dd2:	1cd8      	adds	r0, r3, #3
 8003dd4:	db02      	blt.n	8003ddc <_printf_float+0x118>
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	dd47      	ble.n	8003e6c <_printf_float+0x1a8>
 8003ddc:	f1a8 0802 	sub.w	r8, r8, #2
 8003de0:	fa5f f888 	uxtb.w	r8, r8
 8003de4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003de8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dea:	d824      	bhi.n	8003e36 <_printf_float+0x172>
 8003dec:	3901      	subs	r1, #1
 8003dee:	4642      	mov	r2, r8
 8003df0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003df4:	910d      	str	r1, [sp, #52]	; 0x34
 8003df6:	f7ff ff2f 	bl	8003c58 <__exponent>
 8003dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dfc:	4681      	mov	r9, r0
 8003dfe:	1813      	adds	r3, r2, r0
 8003e00:	2a01      	cmp	r2, #1
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	dc02      	bgt.n	8003e0c <_printf_float+0x148>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	07d1      	lsls	r1, r2, #31
 8003e0a:	d501      	bpl.n	8003e10 <_printf_float+0x14c>
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	6123      	str	r3, [r4, #16]
 8003e10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0a2      	beq.n	8003d5e <_printf_float+0x9a>
 8003e18:	232d      	movs	r3, #45	; 0x2d
 8003e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1e:	e79e      	b.n	8003d5e <_printf_float+0x9a>
 8003e20:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003e24:	f000 816e 	beq.w	8004104 <_printf_float+0x440>
 8003e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e2c:	d1b9      	bne.n	8003da2 <_printf_float+0xde>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1b7      	bne.n	8003da2 <_printf_float+0xde>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e7b4      	b.n	8003da0 <_printf_float+0xdc>
 8003e36:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003e3a:	d119      	bne.n	8003e70 <_printf_float+0x1ac>
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	dd0c      	ble.n	8003e5c <_printf_float+0x198>
 8003e42:	6121      	str	r1, [r4, #16]
 8003e44:	b913      	cbnz	r3, 8003e4c <_printf_float+0x188>
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	07d2      	lsls	r2, r2, #31
 8003e4a:	d502      	bpl.n	8003e52 <_printf_float+0x18e>
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	440b      	add	r3, r1
 8003e50:	6123      	str	r3, [r4, #16]
 8003e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e54:	f04f 0900 	mov.w	r9, #0
 8003e58:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e5a:	e7d9      	b.n	8003e10 <_printf_float+0x14c>
 8003e5c:	b913      	cbnz	r3, 8003e64 <_printf_float+0x1a0>
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	07d0      	lsls	r0, r2, #31
 8003e62:	d501      	bpl.n	8003e68 <_printf_float+0x1a4>
 8003e64:	3302      	adds	r3, #2
 8003e66:	e7f3      	b.n	8003e50 <_printf_float+0x18c>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e7f1      	b.n	8003e50 <_printf_float+0x18c>
 8003e6c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003e70:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003e74:	4293      	cmp	r3, r2
 8003e76:	db05      	blt.n	8003e84 <_printf_float+0x1c0>
 8003e78:	6822      	ldr	r2, [r4, #0]
 8003e7a:	6123      	str	r3, [r4, #16]
 8003e7c:	07d1      	lsls	r1, r2, #31
 8003e7e:	d5e8      	bpl.n	8003e52 <_printf_float+0x18e>
 8003e80:	3301      	adds	r3, #1
 8003e82:	e7e5      	b.n	8003e50 <_printf_float+0x18c>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bfcc      	ite	gt
 8003e88:	2301      	movgt	r3, #1
 8003e8a:	f1c3 0302 	rsble	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	e7de      	b.n	8003e50 <_printf_float+0x18c>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	055a      	lsls	r2, r3, #21
 8003e96:	d407      	bmi.n	8003ea8 <_printf_float+0x1e4>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	463a      	mov	r2, r7
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b0      	blx	r6
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d129      	bne.n	8003efa <_printf_float+0x236>
 8003ea6:	e764      	b.n	8003d72 <_printf_float+0xae>
 8003ea8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003eac:	f240 80d7 	bls.w	800405e <_printf_float+0x39a>
 8003eb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f7fc fdec 	bl	8000a94 <__aeabi_dcmpeq>
 8003ebc:	b388      	cbz	r0, 8003f22 <_printf_float+0x25e>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4a40      	ldr	r2, [pc, #256]	; (8003fc4 <_printf_float+0x300>)
 8003ec2:	4659      	mov	r1, fp
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	47b0      	blx	r6
 8003ec8:	3001      	adds	r0, #1
 8003eca:	f43f af52 	beq.w	8003d72 <_printf_float+0xae>
 8003ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	db02      	blt.n	8003edc <_printf_float+0x218>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	07d8      	lsls	r0, r3, #31
 8003eda:	d50e      	bpl.n	8003efa <_printf_float+0x236>
 8003edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	47b0      	blx	r6
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	f43f af43 	beq.w	8003d72 <_printf_float+0xae>
 8003eec:	2700      	movs	r7, #0
 8003eee:	f104 081a 	add.w	r8, r4, #26
 8003ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	42bb      	cmp	r3, r7
 8003ef8:	dc09      	bgt.n	8003f0e <_printf_float+0x24a>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	079f      	lsls	r7, r3, #30
 8003efe:	f100 80fd 	bmi.w	80040fc <_printf_float+0x438>
 8003f02:	68e0      	ldr	r0, [r4, #12]
 8003f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f06:	4298      	cmp	r0, r3
 8003f08:	bfb8      	it	lt
 8003f0a:	4618      	movlt	r0, r3
 8003f0c:	e733      	b.n	8003d76 <_printf_float+0xb2>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4642      	mov	r2, r8
 8003f12:	4659      	mov	r1, fp
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b0      	blx	r6
 8003f18:	3001      	adds	r0, #1
 8003f1a:	f43f af2a 	beq.w	8003d72 <_printf_float+0xae>
 8003f1e:	3701      	adds	r7, #1
 8003f20:	e7e7      	b.n	8003ef2 <_printf_float+0x22e>
 8003f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dc2b      	bgt.n	8003f80 <_printf_float+0x2bc>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <_printf_float+0x300>)
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	4628      	mov	r0, r5
 8003f30:	47b0      	blx	r6
 8003f32:	3001      	adds	r0, #1
 8003f34:	f43f af1d 	beq.w	8003d72 <_printf_float+0xae>
 8003f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f3a:	b923      	cbnz	r3, 8003f46 <_printf_float+0x282>
 8003f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f3e:	b913      	cbnz	r3, 8003f46 <_printf_float+0x282>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	07d9      	lsls	r1, r3, #31
 8003f44:	d5d9      	bpl.n	8003efa <_printf_float+0x236>
 8003f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b0      	blx	r6
 8003f50:	3001      	adds	r0, #1
 8003f52:	f43f af0e 	beq.w	8003d72 <_printf_float+0xae>
 8003f56:	f04f 0800 	mov.w	r8, #0
 8003f5a:	f104 091a 	add.w	r9, r4, #26
 8003f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f60:	425b      	negs	r3, r3
 8003f62:	4543      	cmp	r3, r8
 8003f64:	dc01      	bgt.n	8003f6a <_printf_float+0x2a6>
 8003f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f68:	e797      	b.n	8003e9a <_printf_float+0x1d6>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	464a      	mov	r2, r9
 8003f6e:	4659      	mov	r1, fp
 8003f70:	4628      	mov	r0, r5
 8003f72:	47b0      	blx	r6
 8003f74:	3001      	adds	r0, #1
 8003f76:	f43f aefc 	beq.w	8003d72 <_printf_float+0xae>
 8003f7a:	f108 0801 	add.w	r8, r8, #1
 8003f7e:	e7ee      	b.n	8003f5e <_printf_float+0x29a>
 8003f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f84:	429a      	cmp	r2, r3
 8003f86:	bfa8      	it	ge
 8003f88:	461a      	movge	r2, r3
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	4690      	mov	r8, r2
 8003f8e:	dd07      	ble.n	8003fa0 <_printf_float+0x2dc>
 8003f90:	4613      	mov	r3, r2
 8003f92:	4659      	mov	r1, fp
 8003f94:	463a      	mov	r2, r7
 8003f96:	4628      	mov	r0, r5
 8003f98:	47b0      	blx	r6
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	f43f aee9 	beq.w	8003d72 <_printf_float+0xae>
 8003fa0:	f104 031a 	add.w	r3, r4, #26
 8003fa4:	f04f 0a00 	mov.w	sl, #0
 8003fa8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fae:	e015      	b.n	8003fdc <_printf_float+0x318>
 8003fb0:	7fefffff 	.word	0x7fefffff
 8003fb4:	0800800c 	.word	0x0800800c
 8003fb8:	08008008 	.word	0x08008008
 8003fbc:	08008014 	.word	0x08008014
 8003fc0:	08008010 	.word	0x08008010
 8003fc4:	08008018 	.word	0x08008018
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fcc:	4659      	mov	r1, fp
 8003fce:	4628      	mov	r0, r5
 8003fd0:	47b0      	blx	r6
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	f43f aecd 	beq.w	8003d72 <_printf_float+0xae>
 8003fd8:	f10a 0a01 	add.w	sl, sl, #1
 8003fdc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003fe0:	eba9 0308 	sub.w	r3, r9, r8
 8003fe4:	4553      	cmp	r3, sl
 8003fe6:	dcef      	bgt.n	8003fc8 <_printf_float+0x304>
 8003fe8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fec:	429a      	cmp	r2, r3
 8003fee:	444f      	add	r7, r9
 8003ff0:	db14      	blt.n	800401c <_printf_float+0x358>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	07da      	lsls	r2, r3, #31
 8003ff6:	d411      	bmi.n	800401c <_printf_float+0x358>
 8003ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ffa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ffc:	eba3 0209 	sub.w	r2, r3, r9
 8004000:	eba3 0901 	sub.w	r9, r3, r1
 8004004:	4591      	cmp	r9, r2
 8004006:	bfa8      	it	ge
 8004008:	4691      	movge	r9, r2
 800400a:	f1b9 0f00 	cmp.w	r9, #0
 800400e:	dc0d      	bgt.n	800402c <_printf_float+0x368>
 8004010:	2700      	movs	r7, #0
 8004012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004016:	f104 081a 	add.w	r8, r4, #26
 800401a:	e018      	b.n	800404e <_printf_float+0x38a>
 800401c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004020:	4659      	mov	r1, fp
 8004022:	4628      	mov	r0, r5
 8004024:	47b0      	blx	r6
 8004026:	3001      	adds	r0, #1
 8004028:	d1e6      	bne.n	8003ff8 <_printf_float+0x334>
 800402a:	e6a2      	b.n	8003d72 <_printf_float+0xae>
 800402c:	464b      	mov	r3, r9
 800402e:	463a      	mov	r2, r7
 8004030:	4659      	mov	r1, fp
 8004032:	4628      	mov	r0, r5
 8004034:	47b0      	blx	r6
 8004036:	3001      	adds	r0, #1
 8004038:	d1ea      	bne.n	8004010 <_printf_float+0x34c>
 800403a:	e69a      	b.n	8003d72 <_printf_float+0xae>
 800403c:	2301      	movs	r3, #1
 800403e:	4642      	mov	r2, r8
 8004040:	4659      	mov	r1, fp
 8004042:	4628      	mov	r0, r5
 8004044:	47b0      	blx	r6
 8004046:	3001      	adds	r0, #1
 8004048:	f43f ae93 	beq.w	8003d72 <_printf_float+0xae>
 800404c:	3701      	adds	r7, #1
 800404e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	eba3 0309 	sub.w	r3, r3, r9
 8004058:	42bb      	cmp	r3, r7
 800405a:	dcef      	bgt.n	800403c <_printf_float+0x378>
 800405c:	e74d      	b.n	8003efa <_printf_float+0x236>
 800405e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004060:	2a01      	cmp	r2, #1
 8004062:	dc01      	bgt.n	8004068 <_printf_float+0x3a4>
 8004064:	07db      	lsls	r3, r3, #31
 8004066:	d538      	bpl.n	80040da <_printf_float+0x416>
 8004068:	2301      	movs	r3, #1
 800406a:	463a      	mov	r2, r7
 800406c:	4659      	mov	r1, fp
 800406e:	4628      	mov	r0, r5
 8004070:	47b0      	blx	r6
 8004072:	3001      	adds	r0, #1
 8004074:	f43f ae7d 	beq.w	8003d72 <_printf_float+0xae>
 8004078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800407c:	4659      	mov	r1, fp
 800407e:	4628      	mov	r0, r5
 8004080:	47b0      	blx	r6
 8004082:	3001      	adds	r0, #1
 8004084:	f107 0701 	add.w	r7, r7, #1
 8004088:	f43f ae73 	beq.w	8003d72 <_printf_float+0xae>
 800408c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004092:	2200      	movs	r2, #0
 8004094:	f103 38ff 	add.w	r8, r3, #4294967295
 8004098:	2300      	movs	r3, #0
 800409a:	f7fc fcfb 	bl	8000a94 <__aeabi_dcmpeq>
 800409e:	b9c0      	cbnz	r0, 80040d2 <_printf_float+0x40e>
 80040a0:	4643      	mov	r3, r8
 80040a2:	463a      	mov	r2, r7
 80040a4:	4659      	mov	r1, fp
 80040a6:	4628      	mov	r0, r5
 80040a8:	47b0      	blx	r6
 80040aa:	3001      	adds	r0, #1
 80040ac:	d10d      	bne.n	80040ca <_printf_float+0x406>
 80040ae:	e660      	b.n	8003d72 <_printf_float+0xae>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4642      	mov	r2, r8
 80040b4:	4659      	mov	r1, fp
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b0      	blx	r6
 80040ba:	3001      	adds	r0, #1
 80040bc:	f43f ae59 	beq.w	8003d72 <_printf_float+0xae>
 80040c0:	3701      	adds	r7, #1
 80040c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c4:	3b01      	subs	r3, #1
 80040c6:	42bb      	cmp	r3, r7
 80040c8:	dcf2      	bgt.n	80040b0 <_printf_float+0x3ec>
 80040ca:	464b      	mov	r3, r9
 80040cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040d0:	e6e4      	b.n	8003e9c <_printf_float+0x1d8>
 80040d2:	2700      	movs	r7, #0
 80040d4:	f104 081a 	add.w	r8, r4, #26
 80040d8:	e7f3      	b.n	80040c2 <_printf_float+0x3fe>
 80040da:	2301      	movs	r3, #1
 80040dc:	e7e1      	b.n	80040a2 <_printf_float+0x3de>
 80040de:	2301      	movs	r3, #1
 80040e0:	4642      	mov	r2, r8
 80040e2:	4659      	mov	r1, fp
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b0      	blx	r6
 80040e8:	3001      	adds	r0, #1
 80040ea:	f43f ae42 	beq.w	8003d72 <_printf_float+0xae>
 80040ee:	3701      	adds	r7, #1
 80040f0:	68e3      	ldr	r3, [r4, #12]
 80040f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	dcf1      	bgt.n	80040de <_printf_float+0x41a>
 80040fa:	e702      	b.n	8003f02 <_printf_float+0x23e>
 80040fc:	2700      	movs	r7, #0
 80040fe:	f104 0819 	add.w	r8, r4, #25
 8004102:	e7f5      	b.n	80040f0 <_printf_float+0x42c>
 8004104:	2b00      	cmp	r3, #0
 8004106:	f43f ae94 	beq.w	8003e32 <_printf_float+0x16e>
 800410a:	f04f 0c00 	mov.w	ip, #0
 800410e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004112:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004116:	6022      	str	r2, [r4, #0]
 8004118:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800411c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	463a      	mov	r2, r7
 8004124:	464b      	mov	r3, r9
 8004126:	4628      	mov	r0, r5
 8004128:	f7ff fd3a 	bl	8003ba0 <__cvt>
 800412c:	4607      	mov	r7, r0
 800412e:	e64f      	b.n	8003dd0 <_printf_float+0x10c>

08004130 <_printf_common>:
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	4691      	mov	r9, r2
 8004136:	461f      	mov	r7, r3
 8004138:	688a      	ldr	r2, [r1, #8]
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	4606      	mov	r6, r0
 800413e:	4293      	cmp	r3, r2
 8004140:	bfb8      	it	lt
 8004142:	4613      	movlt	r3, r2
 8004144:	f8c9 3000 	str.w	r3, [r9]
 8004148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800414c:	460c      	mov	r4, r1
 800414e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004152:	b112      	cbz	r2, 800415a <_printf_common+0x2a>
 8004154:	3301      	adds	r3, #1
 8004156:	f8c9 3000 	str.w	r3, [r9]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004164:	3302      	addmi	r3, #2
 8004166:	f8c9 3000 	strmi.w	r3, [r9]
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	f015 0506 	ands.w	r5, r5, #6
 8004170:	d107      	bne.n	8004182 <_printf_common+0x52>
 8004172:	f104 0a19 	add.w	sl, r4, #25
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	f8d9 2000 	ldr.w	r2, [r9]
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	42ab      	cmp	r3, r5
 8004180:	dc29      	bgt.n	80041d6 <_printf_common+0xa6>
 8004182:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	3300      	adds	r3, #0
 800418a:	bf18      	it	ne
 800418c:	2301      	movne	r3, #1
 800418e:	0692      	lsls	r2, r2, #26
 8004190:	d42e      	bmi.n	80041f0 <_printf_common+0xc0>
 8004192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004196:	4639      	mov	r1, r7
 8004198:	4630      	mov	r0, r6
 800419a:	47c0      	blx	r8
 800419c:	3001      	adds	r0, #1
 800419e:	d021      	beq.n	80041e4 <_printf_common+0xb4>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	68e5      	ldr	r5, [r4, #12]
 80041a4:	f003 0306 	and.w	r3, r3, #6
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	bf18      	it	ne
 80041ac:	2500      	movne	r5, #0
 80041ae:	f8d9 2000 	ldr.w	r2, [r9]
 80041b2:	f04f 0900 	mov.w	r9, #0
 80041b6:	bf08      	it	eq
 80041b8:	1aad      	subeq	r5, r5, r2
 80041ba:	68a3      	ldr	r3, [r4, #8]
 80041bc:	6922      	ldr	r2, [r4, #16]
 80041be:	bf08      	it	eq
 80041c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfc4      	itt	gt
 80041c8:	1a9b      	subgt	r3, r3, r2
 80041ca:	18ed      	addgt	r5, r5, r3
 80041cc:	341a      	adds	r4, #26
 80041ce:	454d      	cmp	r5, r9
 80041d0:	d11a      	bne.n	8004208 <_printf_common+0xd8>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e008      	b.n	80041e8 <_printf_common+0xb8>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4652      	mov	r2, sl
 80041da:	4639      	mov	r1, r7
 80041dc:	4630      	mov	r0, r6
 80041de:	47c0      	blx	r8
 80041e0:	3001      	adds	r0, #1
 80041e2:	d103      	bne.n	80041ec <_printf_common+0xbc>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	3501      	adds	r5, #1
 80041ee:	e7c2      	b.n	8004176 <_printf_common+0x46>
 80041f0:	2030      	movs	r0, #48	; 0x30
 80041f2:	18e1      	adds	r1, r4, r3
 80041f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041fe:	4422      	add	r2, r4
 8004200:	3302      	adds	r3, #2
 8004202:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004206:	e7c4      	b.n	8004192 <_printf_common+0x62>
 8004208:	2301      	movs	r3, #1
 800420a:	4622      	mov	r2, r4
 800420c:	4639      	mov	r1, r7
 800420e:	4630      	mov	r0, r6
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d0e6      	beq.n	80041e4 <_printf_common+0xb4>
 8004216:	f109 0901 	add.w	r9, r9, #1
 800421a:	e7d8      	b.n	80041ce <_printf_common+0x9e>

0800421c <_printf_i>:
 800421c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004220:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004224:	460c      	mov	r4, r1
 8004226:	7e09      	ldrb	r1, [r1, #24]
 8004228:	b085      	sub	sp, #20
 800422a:	296e      	cmp	r1, #110	; 0x6e
 800422c:	4617      	mov	r7, r2
 800422e:	4606      	mov	r6, r0
 8004230:	4698      	mov	r8, r3
 8004232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004234:	f000 80b3 	beq.w	800439e <_printf_i+0x182>
 8004238:	d822      	bhi.n	8004280 <_printf_i+0x64>
 800423a:	2963      	cmp	r1, #99	; 0x63
 800423c:	d036      	beq.n	80042ac <_printf_i+0x90>
 800423e:	d80a      	bhi.n	8004256 <_printf_i+0x3a>
 8004240:	2900      	cmp	r1, #0
 8004242:	f000 80b9 	beq.w	80043b8 <_printf_i+0x19c>
 8004246:	2958      	cmp	r1, #88	; 0x58
 8004248:	f000 8083 	beq.w	8004352 <_printf_i+0x136>
 800424c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004250:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004254:	e032      	b.n	80042bc <_printf_i+0xa0>
 8004256:	2964      	cmp	r1, #100	; 0x64
 8004258:	d001      	beq.n	800425e <_printf_i+0x42>
 800425a:	2969      	cmp	r1, #105	; 0x69
 800425c:	d1f6      	bne.n	800424c <_printf_i+0x30>
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	0605      	lsls	r5, r0, #24
 8004264:	f103 0104 	add.w	r1, r3, #4
 8004268:	d52a      	bpl.n	80042c0 <_printf_i+0xa4>
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da03      	bge.n	800427a <_printf_i+0x5e>
 8004272:	222d      	movs	r2, #45	; 0x2d
 8004274:	425b      	negs	r3, r3
 8004276:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800427a:	486f      	ldr	r0, [pc, #444]	; (8004438 <_printf_i+0x21c>)
 800427c:	220a      	movs	r2, #10
 800427e:	e039      	b.n	80042f4 <_printf_i+0xd8>
 8004280:	2973      	cmp	r1, #115	; 0x73
 8004282:	f000 809d 	beq.w	80043c0 <_printf_i+0x1a4>
 8004286:	d808      	bhi.n	800429a <_printf_i+0x7e>
 8004288:	296f      	cmp	r1, #111	; 0x6f
 800428a:	d020      	beq.n	80042ce <_printf_i+0xb2>
 800428c:	2970      	cmp	r1, #112	; 0x70
 800428e:	d1dd      	bne.n	800424c <_printf_i+0x30>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	f043 0320 	orr.w	r3, r3, #32
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	e003      	b.n	80042a2 <_printf_i+0x86>
 800429a:	2975      	cmp	r1, #117	; 0x75
 800429c:	d017      	beq.n	80042ce <_printf_i+0xb2>
 800429e:	2978      	cmp	r1, #120	; 0x78
 80042a0:	d1d4      	bne.n	800424c <_printf_i+0x30>
 80042a2:	2378      	movs	r3, #120	; 0x78
 80042a4:	4865      	ldr	r0, [pc, #404]	; (800443c <_printf_i+0x220>)
 80042a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042aa:	e055      	b.n	8004358 <_printf_i+0x13c>
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b2:	1d19      	adds	r1, r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6011      	str	r1, [r2, #0]
 80042b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042bc:	2301      	movs	r3, #1
 80042be:	e08c      	b.n	80043da <_printf_i+0x1be>
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042c6:	6011      	str	r1, [r2, #0]
 80042c8:	bf18      	it	ne
 80042ca:	b21b      	sxthne	r3, r3
 80042cc:	e7cf      	b.n	800426e <_printf_i+0x52>
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	1d18      	adds	r0, r3, #4
 80042d4:	6010      	str	r0, [r2, #0]
 80042d6:	0628      	lsls	r0, r5, #24
 80042d8:	d501      	bpl.n	80042de <_printf_i+0xc2>
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <_printf_i+0xc8>
 80042de:	0668      	lsls	r0, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0xbe>
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	296f      	cmp	r1, #111	; 0x6f
 80042e6:	bf14      	ite	ne
 80042e8:	220a      	movne	r2, #10
 80042ea:	2208      	moveq	r2, #8
 80042ec:	4852      	ldr	r0, [pc, #328]	; (8004438 <_printf_i+0x21c>)
 80042ee:	2100      	movs	r1, #0
 80042f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042f4:	6865      	ldr	r5, [r4, #4]
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	60a5      	str	r5, [r4, #8]
 80042fa:	f2c0 8095 	blt.w	8004428 <_printf_i+0x20c>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	f021 0104 	bic.w	r1, r1, #4
 8004304:	6021      	str	r1, [r4, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d13d      	bne.n	8004386 <_printf_i+0x16a>
 800430a:	2d00      	cmp	r5, #0
 800430c:	f040 808e 	bne.w	800442c <_printf_i+0x210>
 8004310:	4665      	mov	r5, ip
 8004312:	2a08      	cmp	r2, #8
 8004314:	d10b      	bne.n	800432e <_printf_i+0x112>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d508      	bpl.n	800432e <_printf_i+0x112>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	bfde      	ittt	le
 8004324:	2330      	movle	r3, #48	; 0x30
 8004326:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432e:	ebac 0305 	sub.w	r3, ip, r5
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	f8cd 8000 	str.w	r8, [sp]
 8004338:	463b      	mov	r3, r7
 800433a:	aa03      	add	r2, sp, #12
 800433c:	4621      	mov	r1, r4
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff fef6 	bl	8004130 <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	d14d      	bne.n	80043e4 <_printf_i+0x1c8>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b005      	add	sp, #20
 800434e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004352:	4839      	ldr	r0, [pc, #228]	; (8004438 <_printf_i+0x21c>)
 8004354:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	1d1d      	adds	r5, r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6015      	str	r5, [r2, #0]
 8004362:	060a      	lsls	r2, r1, #24
 8004364:	d50b      	bpl.n	800437e <_printf_i+0x162>
 8004366:	07ca      	lsls	r2, r1, #31
 8004368:	bf44      	itt	mi
 800436a:	f041 0120 	orrmi.w	r1, r1, #32
 800436e:	6021      	strmi	r1, [r4, #0]
 8004370:	b91b      	cbnz	r3, 800437a <_printf_i+0x15e>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	f022 0220 	bic.w	r2, r2, #32
 8004378:	6022      	str	r2, [r4, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	e7b7      	b.n	80042ee <_printf_i+0xd2>
 800437e:	064d      	lsls	r5, r1, #25
 8004380:	bf48      	it	mi
 8004382:	b29b      	uxthmi	r3, r3
 8004384:	e7ef      	b.n	8004366 <_printf_i+0x14a>
 8004386:	4665      	mov	r5, ip
 8004388:	fbb3 f1f2 	udiv	r1, r3, r2
 800438c:	fb02 3311 	mls	r3, r2, r1, r3
 8004390:	5cc3      	ldrb	r3, [r0, r3]
 8004392:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004396:	460b      	mov	r3, r1
 8004398:	2900      	cmp	r1, #0
 800439a:	d1f5      	bne.n	8004388 <_printf_i+0x16c>
 800439c:	e7b9      	b.n	8004312 <_printf_i+0xf6>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6961      	ldr	r1, [r4, #20]
 80043a6:	6010      	str	r0, [r2, #0]
 80043a8:	0628      	lsls	r0, r5, #24
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	d501      	bpl.n	80043b2 <_printf_i+0x196>
 80043ae:	6019      	str	r1, [r3, #0]
 80043b0:	e002      	b.n	80043b8 <_printf_i+0x19c>
 80043b2:	066a      	lsls	r2, r5, #25
 80043b4:	d5fb      	bpl.n	80043ae <_printf_i+0x192>
 80043b6:	8019      	strh	r1, [r3, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	4665      	mov	r5, ip
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	e7b9      	b.n	8004334 <_printf_i+0x118>
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	1d19      	adds	r1, r3, #4
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	681d      	ldr	r5, [r3, #0]
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4628      	mov	r0, r5
 80043ce:	f002 fb77 	bl	8006ac0 <memchr>
 80043d2:	b108      	cbz	r0, 80043d8 <_printf_i+0x1bc>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	6060      	str	r0, [r4, #4]
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	2300      	movs	r3, #0
 80043de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e2:	e7a7      	b.n	8004334 <_printf_i+0x118>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	462a      	mov	r2, r5
 80043e8:	4639      	mov	r1, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d0aa      	beq.n	8004348 <_printf_i+0x12c>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	079b      	lsls	r3, r3, #30
 80043f6:	d413      	bmi.n	8004420 <_printf_i+0x204>
 80043f8:	68e0      	ldr	r0, [r4, #12]
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	4298      	cmp	r0, r3
 80043fe:	bfb8      	it	lt
 8004400:	4618      	movlt	r0, r3
 8004402:	e7a3      	b.n	800434c <_printf_i+0x130>
 8004404:	2301      	movs	r3, #1
 8004406:	464a      	mov	r2, r9
 8004408:	4639      	mov	r1, r7
 800440a:	4630      	mov	r0, r6
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d09a      	beq.n	8004348 <_printf_i+0x12c>
 8004412:	3501      	adds	r5, #1
 8004414:	68e3      	ldr	r3, [r4, #12]
 8004416:	9a03      	ldr	r2, [sp, #12]
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	42ab      	cmp	r3, r5
 800441c:	dcf2      	bgt.n	8004404 <_printf_i+0x1e8>
 800441e:	e7eb      	b.n	80043f8 <_printf_i+0x1dc>
 8004420:	2500      	movs	r5, #0
 8004422:	f104 0919 	add.w	r9, r4, #25
 8004426:	e7f5      	b.n	8004414 <_printf_i+0x1f8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ac      	bne.n	8004386 <_printf_i+0x16a>
 800442c:	7803      	ldrb	r3, [r0, #0]
 800442e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004432:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004436:	e76c      	b.n	8004312 <_printf_i+0xf6>
 8004438:	0800801a 	.word	0x0800801a
 800443c:	0800802b 	.word	0x0800802b

08004440 <_scanf_float>:
 8004440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004444:	469a      	mov	sl, r3
 8004446:	688b      	ldr	r3, [r1, #8]
 8004448:	4616      	mov	r6, r2
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004450:	bf88      	it	hi
 8004452:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004456:	b087      	sub	sp, #28
 8004458:	bf85      	ittet	hi
 800445a:	189b      	addhi	r3, r3, r2
 800445c:	9301      	strhi	r3, [sp, #4]
 800445e:	2300      	movls	r3, #0
 8004460:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004464:	4688      	mov	r8, r1
 8004466:	f04f 0b00 	mov.w	fp, #0
 800446a:	bf8c      	ite	hi
 800446c:	608b      	strhi	r3, [r1, #8]
 800446e:	9301      	strls	r3, [sp, #4]
 8004470:	680b      	ldr	r3, [r1, #0]
 8004472:	4607      	mov	r7, r0
 8004474:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004478:	f848 3b1c 	str.w	r3, [r8], #28
 800447c:	460c      	mov	r4, r1
 800447e:	4645      	mov	r5, r8
 8004480:	465a      	mov	r2, fp
 8004482:	46d9      	mov	r9, fp
 8004484:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004488:	f8cd b008 	str.w	fp, [sp, #8]
 800448c:	68a1      	ldr	r1, [r4, #8]
 800448e:	b181      	cbz	r1, 80044b2 <_scanf_float+0x72>
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b49      	cmp	r3, #73	; 0x49
 8004496:	d071      	beq.n	800457c <_scanf_float+0x13c>
 8004498:	d84d      	bhi.n	8004536 <_scanf_float+0xf6>
 800449a:	2b39      	cmp	r3, #57	; 0x39
 800449c:	d840      	bhi.n	8004520 <_scanf_float+0xe0>
 800449e:	2b31      	cmp	r3, #49	; 0x31
 80044a0:	f080 8088 	bcs.w	80045b4 <_scanf_float+0x174>
 80044a4:	2b2d      	cmp	r3, #45	; 0x2d
 80044a6:	f000 8090 	beq.w	80045ca <_scanf_float+0x18a>
 80044aa:	d815      	bhi.n	80044d8 <_scanf_float+0x98>
 80044ac:	2b2b      	cmp	r3, #43	; 0x2b
 80044ae:	f000 808c 	beq.w	80045ca <_scanf_float+0x18a>
 80044b2:	f1b9 0f00 	cmp.w	r9, #0
 80044b6:	d003      	beq.n	80044c0 <_scanf_float+0x80>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	3a01      	subs	r2, #1
 80044c2:	2a01      	cmp	r2, #1
 80044c4:	f200 80ea 	bhi.w	800469c <_scanf_float+0x25c>
 80044c8:	4545      	cmp	r5, r8
 80044ca:	f200 80dc 	bhi.w	8004686 <_scanf_float+0x246>
 80044ce:	2601      	movs	r6, #1
 80044d0:	4630      	mov	r0, r6
 80044d2:	b007      	add	sp, #28
 80044d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d8:	2b2e      	cmp	r3, #46	; 0x2e
 80044da:	f000 809f 	beq.w	800461c <_scanf_float+0x1dc>
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	d1e7      	bne.n	80044b2 <_scanf_float+0x72>
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80044e8:	d064      	beq.n	80045b4 <_scanf_float+0x174>
 80044ea:	9b01      	ldr	r3, [sp, #4]
 80044ec:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80044f0:	6020      	str	r0, [r4, #0]
 80044f2:	f109 0901 	add.w	r9, r9, #1
 80044f6:	b11b      	cbz	r3, 8004500 <_scanf_float+0xc0>
 80044f8:	3b01      	subs	r3, #1
 80044fa:	3101      	adds	r1, #1
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	60a1      	str	r1, [r4, #8]
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	6873      	ldr	r3, [r6, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	6073      	str	r3, [r6, #4]
 8004514:	f340 80ac 	ble.w	8004670 <_scanf_float+0x230>
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	e7b5      	b.n	800448c <_scanf_float+0x4c>
 8004520:	2b45      	cmp	r3, #69	; 0x45
 8004522:	f000 8085 	beq.w	8004630 <_scanf_float+0x1f0>
 8004526:	2b46      	cmp	r3, #70	; 0x46
 8004528:	d06a      	beq.n	8004600 <_scanf_float+0x1c0>
 800452a:	2b41      	cmp	r3, #65	; 0x41
 800452c:	d1c1      	bne.n	80044b2 <_scanf_float+0x72>
 800452e:	2a01      	cmp	r2, #1
 8004530:	d1bf      	bne.n	80044b2 <_scanf_float+0x72>
 8004532:	2202      	movs	r2, #2
 8004534:	e046      	b.n	80045c4 <_scanf_float+0x184>
 8004536:	2b65      	cmp	r3, #101	; 0x65
 8004538:	d07a      	beq.n	8004630 <_scanf_float+0x1f0>
 800453a:	d818      	bhi.n	800456e <_scanf_float+0x12e>
 800453c:	2b54      	cmp	r3, #84	; 0x54
 800453e:	d066      	beq.n	800460e <_scanf_float+0x1ce>
 8004540:	d811      	bhi.n	8004566 <_scanf_float+0x126>
 8004542:	2b4e      	cmp	r3, #78	; 0x4e
 8004544:	d1b5      	bne.n	80044b2 <_scanf_float+0x72>
 8004546:	2a00      	cmp	r2, #0
 8004548:	d146      	bne.n	80045d8 <_scanf_float+0x198>
 800454a:	f1b9 0f00 	cmp.w	r9, #0
 800454e:	d145      	bne.n	80045dc <_scanf_float+0x19c>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004556:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800455a:	d13f      	bne.n	80045dc <_scanf_float+0x19c>
 800455c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004560:	6021      	str	r1, [r4, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	e02e      	b.n	80045c4 <_scanf_float+0x184>
 8004566:	2b59      	cmp	r3, #89	; 0x59
 8004568:	d01e      	beq.n	80045a8 <_scanf_float+0x168>
 800456a:	2b61      	cmp	r3, #97	; 0x61
 800456c:	e7de      	b.n	800452c <_scanf_float+0xec>
 800456e:	2b6e      	cmp	r3, #110	; 0x6e
 8004570:	d0e9      	beq.n	8004546 <_scanf_float+0x106>
 8004572:	d815      	bhi.n	80045a0 <_scanf_float+0x160>
 8004574:	2b66      	cmp	r3, #102	; 0x66
 8004576:	d043      	beq.n	8004600 <_scanf_float+0x1c0>
 8004578:	2b69      	cmp	r3, #105	; 0x69
 800457a:	d19a      	bne.n	80044b2 <_scanf_float+0x72>
 800457c:	f1bb 0f00 	cmp.w	fp, #0
 8004580:	d138      	bne.n	80045f4 <_scanf_float+0x1b4>
 8004582:	f1b9 0f00 	cmp.w	r9, #0
 8004586:	d197      	bne.n	80044b8 <_scanf_float+0x78>
 8004588:	6821      	ldr	r1, [r4, #0]
 800458a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800458e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004592:	d195      	bne.n	80044c0 <_scanf_float+0x80>
 8004594:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004598:	6021      	str	r1, [r4, #0]
 800459a:	f04f 0b01 	mov.w	fp, #1
 800459e:	e011      	b.n	80045c4 <_scanf_float+0x184>
 80045a0:	2b74      	cmp	r3, #116	; 0x74
 80045a2:	d034      	beq.n	800460e <_scanf_float+0x1ce>
 80045a4:	2b79      	cmp	r3, #121	; 0x79
 80045a6:	d184      	bne.n	80044b2 <_scanf_float+0x72>
 80045a8:	f1bb 0f07 	cmp.w	fp, #7
 80045ac:	d181      	bne.n	80044b2 <_scanf_float+0x72>
 80045ae:	f04f 0b08 	mov.w	fp, #8
 80045b2:	e007      	b.n	80045c4 <_scanf_float+0x184>
 80045b4:	eb12 0f0b 	cmn.w	r2, fp
 80045b8:	f47f af7b 	bne.w	80044b2 <_scanf_float+0x72>
 80045bc:	6821      	ldr	r1, [r4, #0]
 80045be:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80045c2:	6021      	str	r1, [r4, #0]
 80045c4:	702b      	strb	r3, [r5, #0]
 80045c6:	3501      	adds	r5, #1
 80045c8:	e79a      	b.n	8004500 <_scanf_float+0xc0>
 80045ca:	6821      	ldr	r1, [r4, #0]
 80045cc:	0608      	lsls	r0, r1, #24
 80045ce:	f57f af70 	bpl.w	80044b2 <_scanf_float+0x72>
 80045d2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80045d6:	e7f4      	b.n	80045c2 <_scanf_float+0x182>
 80045d8:	2a02      	cmp	r2, #2
 80045da:	d047      	beq.n	800466c <_scanf_float+0x22c>
 80045dc:	f1bb 0f01 	cmp.w	fp, #1
 80045e0:	d003      	beq.n	80045ea <_scanf_float+0x1aa>
 80045e2:	f1bb 0f04 	cmp.w	fp, #4
 80045e6:	f47f af64 	bne.w	80044b2 <_scanf_float+0x72>
 80045ea:	f10b 0b01 	add.w	fp, fp, #1
 80045ee:	fa5f fb8b 	uxtb.w	fp, fp
 80045f2:	e7e7      	b.n	80045c4 <_scanf_float+0x184>
 80045f4:	f1bb 0f03 	cmp.w	fp, #3
 80045f8:	d0f7      	beq.n	80045ea <_scanf_float+0x1aa>
 80045fa:	f1bb 0f05 	cmp.w	fp, #5
 80045fe:	e7f2      	b.n	80045e6 <_scanf_float+0x1a6>
 8004600:	f1bb 0f02 	cmp.w	fp, #2
 8004604:	f47f af55 	bne.w	80044b2 <_scanf_float+0x72>
 8004608:	f04f 0b03 	mov.w	fp, #3
 800460c:	e7da      	b.n	80045c4 <_scanf_float+0x184>
 800460e:	f1bb 0f06 	cmp.w	fp, #6
 8004612:	f47f af4e 	bne.w	80044b2 <_scanf_float+0x72>
 8004616:	f04f 0b07 	mov.w	fp, #7
 800461a:	e7d3      	b.n	80045c4 <_scanf_float+0x184>
 800461c:	6821      	ldr	r1, [r4, #0]
 800461e:	0588      	lsls	r0, r1, #22
 8004620:	f57f af47 	bpl.w	80044b2 <_scanf_float+0x72>
 8004624:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004628:	6021      	str	r1, [r4, #0]
 800462a:	f8cd 9008 	str.w	r9, [sp, #8]
 800462e:	e7c9      	b.n	80045c4 <_scanf_float+0x184>
 8004630:	6821      	ldr	r1, [r4, #0]
 8004632:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004636:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800463a:	d006      	beq.n	800464a <_scanf_float+0x20a>
 800463c:	0548      	lsls	r0, r1, #21
 800463e:	f57f af38 	bpl.w	80044b2 <_scanf_float+0x72>
 8004642:	f1b9 0f00 	cmp.w	r9, #0
 8004646:	f43f af3b 	beq.w	80044c0 <_scanf_float+0x80>
 800464a:	0588      	lsls	r0, r1, #22
 800464c:	bf58      	it	pl
 800464e:	9802      	ldrpl	r0, [sp, #8]
 8004650:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004654:	bf58      	it	pl
 8004656:	eba9 0000 	subpl.w	r0, r9, r0
 800465a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800465e:	bf58      	it	pl
 8004660:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004664:	6021      	str	r1, [r4, #0]
 8004666:	f04f 0900 	mov.w	r9, #0
 800466a:	e7ab      	b.n	80045c4 <_scanf_float+0x184>
 800466c:	2203      	movs	r2, #3
 800466e:	e7a9      	b.n	80045c4 <_scanf_float+0x184>
 8004670:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004674:	4631      	mov	r1, r6
 8004676:	4638      	mov	r0, r7
 8004678:	9205      	str	r2, [sp, #20]
 800467a:	4798      	blx	r3
 800467c:	9a05      	ldr	r2, [sp, #20]
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f af04 	beq.w	800448c <_scanf_float+0x4c>
 8004684:	e715      	b.n	80044b2 <_scanf_float+0x72>
 8004686:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800468a:	4632      	mov	r2, r6
 800468c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004690:	4638      	mov	r0, r7
 8004692:	4798      	blx	r3
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	3b01      	subs	r3, #1
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	e715      	b.n	80044c8 <_scanf_float+0x88>
 800469c:	f10b 33ff 	add.w	r3, fp, #4294967295
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d80a      	bhi.n	80046ba <_scanf_float+0x27a>
 80046a4:	f1bb 0f02 	cmp.w	fp, #2
 80046a8:	d967      	bls.n	800477a <_scanf_float+0x33a>
 80046aa:	f1ab 0b03 	sub.w	fp, fp, #3
 80046ae:	fa5f fb8b 	uxtb.w	fp, fp
 80046b2:	eba5 0b0b 	sub.w	fp, r5, fp
 80046b6:	455d      	cmp	r5, fp
 80046b8:	d14a      	bne.n	8004750 <_scanf_float+0x310>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	05da      	lsls	r2, r3, #23
 80046be:	d51f      	bpl.n	8004700 <_scanf_float+0x2c0>
 80046c0:	055b      	lsls	r3, r3, #21
 80046c2:	d467      	bmi.n	8004794 <_scanf_float+0x354>
 80046c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	2965      	cmp	r1, #101	; 0x65
 80046cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80046d0:	f105 3bff 	add.w	fp, r5, #4294967295
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	d00d      	beq.n	80046f4 <_scanf_float+0x2b4>
 80046d8:	2945      	cmp	r1, #69	; 0x45
 80046da:	d00b      	beq.n	80046f4 <_scanf_float+0x2b4>
 80046dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046e0:	4632      	mov	r2, r6
 80046e2:	4638      	mov	r0, r7
 80046e4:	4798      	blx	r3
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	f1a5 0b02 	sub.w	fp, r5, #2
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046f8:	4632      	mov	r2, r6
 80046fa:	4638      	mov	r0, r7
 80046fc:	4798      	blx	r3
 80046fe:	465d      	mov	r5, fp
 8004700:	6826      	ldr	r6, [r4, #0]
 8004702:	f016 0610 	ands.w	r6, r6, #16
 8004706:	d176      	bne.n	80047f6 <_scanf_float+0x3b6>
 8004708:	702e      	strb	r6, [r5, #0]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d141      	bne.n	800479a <_scanf_float+0x35a>
 8004716:	9b02      	ldr	r3, [sp, #8]
 8004718:	eba9 0303 	sub.w	r3, r9, r3
 800471c:	425a      	negs	r2, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d148      	bne.n	80047b4 <_scanf_float+0x374>
 8004722:	4641      	mov	r1, r8
 8004724:	2200      	movs	r2, #0
 8004726:	4638      	mov	r0, r7
 8004728:	f000 feca 	bl	80054c0 <_strtod_r>
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	4680      	mov	r8, r0
 8004730:	f015 0f02 	tst.w	r5, #2
 8004734:	4689      	mov	r9, r1
 8004736:	f8da 3000 	ldr.w	r3, [sl]
 800473a:	d046      	beq.n	80047ca <_scanf_float+0x38a>
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	f8ca 2000 	str.w	r2, [sl]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	e9c3 8900 	strd	r8, r9, [r3]
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60e3      	str	r3, [r4, #12]
 800474e:	e6bf      	b.n	80044d0 <_scanf_float+0x90>
 8004750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004754:	4632      	mov	r2, r6
 8004756:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800475a:	4638      	mov	r0, r7
 800475c:	4798      	blx	r3
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	3b01      	subs	r3, #1
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	e7a7      	b.n	80046b6 <_scanf_float+0x276>
 8004766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800476a:	4632      	mov	r2, r6
 800476c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004770:	4638      	mov	r0, r7
 8004772:	4798      	blx	r3
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	3b01      	subs	r3, #1
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	4545      	cmp	r5, r8
 800477c:	d8f3      	bhi.n	8004766 <_scanf_float+0x326>
 800477e:	e6a6      	b.n	80044ce <_scanf_float+0x8e>
 8004780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004784:	4632      	mov	r2, r6
 8004786:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800478a:	4638      	mov	r0, r7
 800478c:	4798      	blx	r3
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	3b01      	subs	r3, #1
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	4545      	cmp	r5, r8
 8004796:	d8f3      	bhi.n	8004780 <_scanf_float+0x340>
 8004798:	e699      	b.n	80044ce <_scanf_float+0x8e>
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0c0      	beq.n	8004722 <_scanf_float+0x2e2>
 80047a0:	9904      	ldr	r1, [sp, #16]
 80047a2:	230a      	movs	r3, #10
 80047a4:	4632      	mov	r2, r6
 80047a6:	3101      	adds	r1, #1
 80047a8:	4638      	mov	r0, r7
 80047aa:	f000 ff15 	bl	80055d8 <_strtol_r>
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	9d04      	ldr	r5, [sp, #16]
 80047b2:	1ac2      	subs	r2, r0, r3
 80047b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80047b8:	429d      	cmp	r5, r3
 80047ba:	bf28      	it	cs
 80047bc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <_scanf_float+0x3bc>)
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 f838 	bl	8004838 <siprintf>
 80047c8:	e7ab      	b.n	8004722 <_scanf_float+0x2e2>
 80047ca:	1d1f      	adds	r7, r3, #4
 80047cc:	f015 0504 	ands.w	r5, r5, #4
 80047d0:	f8ca 7000 	str.w	r7, [sl]
 80047d4:	d1b5      	bne.n	8004742 <_scanf_float+0x302>
 80047d6:	681f      	ldr	r7, [r3, #0]
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	f7fc f98c 	bl	8000af8 <__aeabi_dcmpun>
 80047e0:	b120      	cbz	r0, 80047ec <_scanf_float+0x3ac>
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f824 	bl	8004830 <nanf>
 80047e8:	6038      	str	r0, [r7, #0]
 80047ea:	e7ad      	b.n	8004748 <_scanf_float+0x308>
 80047ec:	4640      	mov	r0, r8
 80047ee:	4649      	mov	r1, r9
 80047f0:	f7fc f9e0 	bl	8000bb4 <__aeabi_d2f>
 80047f4:	e7f8      	b.n	80047e8 <_scanf_float+0x3a8>
 80047f6:	2600      	movs	r6, #0
 80047f8:	e66a      	b.n	80044d0 <_scanf_float+0x90>
 80047fa:	bf00      	nop
 80047fc:	0800803c 	.word	0x0800803c

08004800 <iprintf>:
 8004800:	b40f      	push	{r0, r1, r2, r3}
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <iprintf+0x2c>)
 8004804:	b513      	push	{r0, r1, r4, lr}
 8004806:	681c      	ldr	r4, [r3, #0]
 8004808:	b124      	cbz	r4, 8004814 <iprintf+0x14>
 800480a:	69a3      	ldr	r3, [r4, #24]
 800480c:	b913      	cbnz	r3, 8004814 <iprintf+0x14>
 800480e:	4620      	mov	r0, r4
 8004810:	f001 fd76 	bl	8006300 <__sinit>
 8004814:	ab05      	add	r3, sp, #20
 8004816:	9a04      	ldr	r2, [sp, #16]
 8004818:	68a1      	ldr	r1, [r4, #8]
 800481a:	4620      	mov	r0, r4
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	f002 ff8f 	bl	8007740 <_vfiprintf_r>
 8004822:	b002      	add	sp, #8
 8004824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004828:	b004      	add	sp, #16
 800482a:	4770      	bx	lr
 800482c:	2000002c 	.word	0x2000002c

08004830 <nanf>:
 8004830:	4800      	ldr	r0, [pc, #0]	; (8004834 <nanf+0x4>)
 8004832:	4770      	bx	lr
 8004834:	7fc00000 	.word	0x7fc00000

08004838 <siprintf>:
 8004838:	b40e      	push	{r1, r2, r3}
 800483a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800483e:	b500      	push	{lr}
 8004840:	b09c      	sub	sp, #112	; 0x70
 8004842:	ab1d      	add	r3, sp, #116	; 0x74
 8004844:	9002      	str	r0, [sp, #8]
 8004846:	9006      	str	r0, [sp, #24]
 8004848:	9107      	str	r1, [sp, #28]
 800484a:	9104      	str	r1, [sp, #16]
 800484c:	4808      	ldr	r0, [pc, #32]	; (8004870 <siprintf+0x38>)
 800484e:	4909      	ldr	r1, [pc, #36]	; (8004874 <siprintf+0x3c>)
 8004850:	f853 2b04 	ldr.w	r2, [r3], #4
 8004854:	9105      	str	r1, [sp, #20]
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	a902      	add	r1, sp, #8
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	f002 fe50 	bl	8007500 <_svfiprintf_r>
 8004860:	2200      	movs	r2, #0
 8004862:	9b02      	ldr	r3, [sp, #8]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	b01c      	add	sp, #112	; 0x70
 8004868:	f85d eb04 	ldr.w	lr, [sp], #4
 800486c:	b003      	add	sp, #12
 800486e:	4770      	bx	lr
 8004870:	2000002c 	.word	0x2000002c
 8004874:	ffff0208 	.word	0xffff0208

08004878 <sulp>:
 8004878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487c:	460f      	mov	r7, r1
 800487e:	4690      	mov	r8, r2
 8004880:	f002 fc02 	bl	8007088 <__ulp>
 8004884:	4604      	mov	r4, r0
 8004886:	460d      	mov	r5, r1
 8004888:	f1b8 0f00 	cmp.w	r8, #0
 800488c:	d011      	beq.n	80048b2 <sulp+0x3a>
 800488e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004896:	2b00      	cmp	r3, #0
 8004898:	dd0b      	ble.n	80048b2 <sulp+0x3a>
 800489a:	2400      	movs	r4, #0
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80048a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	f7fb fe8b 	bl	80005c4 <__aeabi_dmul>
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ba:	0000      	movs	r0, r0
 80048bc:	0000      	movs	r0, r0
	...

080048c0 <_strtod_l>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	461f      	mov	r7, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	b0a1      	sub	sp, #132	; 0x84
 80048ca:	4683      	mov	fp, r0
 80048cc:	4638      	mov	r0, r7
 80048ce:	460e      	mov	r6, r1
 80048d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80048d2:	931c      	str	r3, [sp, #112]	; 0x70
 80048d4:	f002 f8c9 	bl	8006a6a <__localeconv_l>
 80048d8:	4680      	mov	r8, r0
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	f7fb fcae 	bl	800023c <strlen>
 80048e0:	f04f 0900 	mov.w	r9, #0
 80048e4:	4604      	mov	r4, r0
 80048e6:	f04f 0a00 	mov.w	sl, #0
 80048ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80048ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	2a0d      	cmp	r2, #13
 80048f2:	d832      	bhi.n	800495a <_strtod_l+0x9a>
 80048f4:	2a09      	cmp	r2, #9
 80048f6:	d236      	bcs.n	8004966 <_strtod_l+0xa6>
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d03e      	beq.n	800497a <_strtod_l+0xba>
 80048fc:	2300      	movs	r3, #0
 80048fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004900:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004902:	782b      	ldrb	r3, [r5, #0]
 8004904:	2b30      	cmp	r3, #48	; 0x30
 8004906:	f040 80ac 	bne.w	8004a62 <_strtod_l+0x1a2>
 800490a:	786b      	ldrb	r3, [r5, #1]
 800490c:	2b58      	cmp	r3, #88	; 0x58
 800490e:	d001      	beq.n	8004914 <_strtod_l+0x54>
 8004910:	2b78      	cmp	r3, #120	; 0x78
 8004912:	d167      	bne.n	80049e4 <_strtod_l+0x124>
 8004914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004916:	9702      	str	r7, [sp, #8]
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	ab1c      	add	r3, sp, #112	; 0x70
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4a89      	ldr	r2, [pc, #548]	; (8004b44 <_strtod_l+0x284>)
 8004920:	ab1d      	add	r3, sp, #116	; 0x74
 8004922:	a91b      	add	r1, sp, #108	; 0x6c
 8004924:	4658      	mov	r0, fp
 8004926:	f001 fdc5 	bl	80064b4 <__gethex>
 800492a:	f010 0407 	ands.w	r4, r0, #7
 800492e:	4606      	mov	r6, r0
 8004930:	d005      	beq.n	800493e <_strtod_l+0x7e>
 8004932:	2c06      	cmp	r4, #6
 8004934:	d12b      	bne.n	800498e <_strtod_l+0xce>
 8004936:	2300      	movs	r3, #0
 8004938:	3501      	adds	r5, #1
 800493a:	951b      	str	r5, [sp, #108]	; 0x6c
 800493c:	930d      	str	r3, [sp, #52]	; 0x34
 800493e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 85a6 	bne.w	8005492 <_strtod_l+0xbd2>
 8004946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004948:	b1e3      	cbz	r3, 8004984 <_strtod_l+0xc4>
 800494a:	464a      	mov	r2, r9
 800494c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	b021      	add	sp, #132	; 0x84
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	2a2b      	cmp	r2, #43	; 0x2b
 800495c:	d015      	beq.n	800498a <_strtod_l+0xca>
 800495e:	2a2d      	cmp	r2, #45	; 0x2d
 8004960:	d004      	beq.n	800496c <_strtod_l+0xac>
 8004962:	2a20      	cmp	r2, #32
 8004964:	d1ca      	bne.n	80048fc <_strtod_l+0x3c>
 8004966:	3301      	adds	r3, #1
 8004968:	931b      	str	r3, [sp, #108]	; 0x6c
 800496a:	e7bf      	b.n	80048ec <_strtod_l+0x2c>
 800496c:	2201      	movs	r2, #1
 800496e:	920d      	str	r2, [sp, #52]	; 0x34
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	921b      	str	r2, [sp, #108]	; 0x6c
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1c2      	bne.n	8004900 <_strtod_l+0x40>
 800497a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800497c:	961b      	str	r6, [sp, #108]	; 0x6c
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 8585 	bne.w	800548e <_strtod_l+0xbce>
 8004984:	464a      	mov	r2, r9
 8004986:	4653      	mov	r3, sl
 8004988:	e7e2      	b.n	8004950 <_strtod_l+0x90>
 800498a:	2200      	movs	r2, #0
 800498c:	e7ef      	b.n	800496e <_strtod_l+0xae>
 800498e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004990:	b13a      	cbz	r2, 80049a2 <_strtod_l+0xe2>
 8004992:	2135      	movs	r1, #53	; 0x35
 8004994:	a81e      	add	r0, sp, #120	; 0x78
 8004996:	f002 fc6a 	bl	800726e <__copybits>
 800499a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800499c:	4658      	mov	r0, fp
 800499e:	f002 f8dc 	bl	8006b5a <_Bfree>
 80049a2:	3c01      	subs	r4, #1
 80049a4:	2c04      	cmp	r4, #4
 80049a6:	d806      	bhi.n	80049b6 <_strtod_l+0xf6>
 80049a8:	e8df f004 	tbb	[pc, r4]
 80049ac:	1714030a 	.word	0x1714030a
 80049b0:	0a          	.byte	0x0a
 80049b1:	00          	.byte	0x00
 80049b2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80049b6:	0731      	lsls	r1, r6, #28
 80049b8:	d5c1      	bpl.n	800493e <_strtod_l+0x7e>
 80049ba:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80049be:	e7be      	b.n	800493e <_strtod_l+0x7e>
 80049c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80049c2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80049c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80049ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049ce:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80049d2:	e7f0      	b.n	80049b6 <_strtod_l+0xf6>
 80049d4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004b48 <_strtod_l+0x288>
 80049d8:	e7ed      	b.n	80049b6 <_strtod_l+0xf6>
 80049da:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80049de:	f04f 39ff 	mov.w	r9, #4294967295
 80049e2:	e7e8      	b.n	80049b6 <_strtod_l+0xf6>
 80049e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d0f9      	beq.n	80049e4 <_strtod_l+0x124>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0a4      	beq.n	800493e <_strtod_l+0x7e>
 80049f4:	2301      	movs	r3, #1
 80049f6:	2500      	movs	r5, #0
 80049f8:	220a      	movs	r2, #10
 80049fa:	9307      	str	r3, [sp, #28]
 80049fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049fe:	9506      	str	r5, [sp, #24]
 8004a00:	9308      	str	r3, [sp, #32]
 8004a02:	9504      	str	r5, [sp, #16]
 8004a04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004a06:	7807      	ldrb	r7, [r0, #0]
 8004a08:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004a0c:	b2d9      	uxtb	r1, r3
 8004a0e:	2909      	cmp	r1, #9
 8004a10:	d929      	bls.n	8004a66 <_strtod_l+0x1a6>
 8004a12:	4622      	mov	r2, r4
 8004a14:	f8d8 1000 	ldr.w	r1, [r8]
 8004a18:	f002 fffb 	bl	8007a12 <strncmp>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d031      	beq.n	8004a84 <_strtod_l+0x1c4>
 8004a20:	2000      	movs	r0, #0
 8004a22:	463b      	mov	r3, r7
 8004a24:	4602      	mov	r2, r0
 8004a26:	9c04      	ldr	r4, [sp, #16]
 8004a28:	9005      	str	r0, [sp, #20]
 8004a2a:	2b65      	cmp	r3, #101	; 0x65
 8004a2c:	d001      	beq.n	8004a32 <_strtod_l+0x172>
 8004a2e:	2b45      	cmp	r3, #69	; 0x45
 8004a30:	d114      	bne.n	8004a5c <_strtod_l+0x19c>
 8004a32:	b924      	cbnz	r4, 8004a3e <_strtod_l+0x17e>
 8004a34:	b910      	cbnz	r0, 8004a3c <_strtod_l+0x17c>
 8004a36:	9b07      	ldr	r3, [sp, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d09e      	beq.n	800497a <_strtod_l+0xba>
 8004a3c:	2400      	movs	r4, #0
 8004a3e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004a40:	1c73      	adds	r3, r6, #1
 8004a42:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a44:	7873      	ldrb	r3, [r6, #1]
 8004a46:	2b2b      	cmp	r3, #43	; 0x2b
 8004a48:	d078      	beq.n	8004b3c <_strtod_l+0x27c>
 8004a4a:	2b2d      	cmp	r3, #45	; 0x2d
 8004a4c:	d070      	beq.n	8004b30 <_strtod_l+0x270>
 8004a4e:	f04f 0c00 	mov.w	ip, #0
 8004a52:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004a56:	2f09      	cmp	r7, #9
 8004a58:	d97c      	bls.n	8004b54 <_strtod_l+0x294>
 8004a5a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a5c:	f04f 0e00 	mov.w	lr, #0
 8004a60:	e09a      	b.n	8004b98 <_strtod_l+0x2d8>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e7c7      	b.n	80049f6 <_strtod_l+0x136>
 8004a66:	9904      	ldr	r1, [sp, #16]
 8004a68:	3001      	adds	r0, #1
 8004a6a:	2908      	cmp	r1, #8
 8004a6c:	bfd7      	itett	le
 8004a6e:	9906      	ldrle	r1, [sp, #24]
 8004a70:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a78:	9306      	strle	r3, [sp, #24]
 8004a7a:	9b04      	ldr	r3, [sp, #16]
 8004a7c:	901b      	str	r0, [sp, #108]	; 0x6c
 8004a7e:	3301      	adds	r3, #1
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	e7bf      	b.n	8004a04 <_strtod_l+0x144>
 8004a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a86:	191a      	adds	r2, r3, r4
 8004a88:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a8a:	9a04      	ldr	r2, [sp, #16]
 8004a8c:	5d1b      	ldrb	r3, [r3, r4]
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d037      	beq.n	8004b02 <_strtod_l+0x242>
 8004a92:	4602      	mov	r2, r0
 8004a94:	9c04      	ldr	r4, [sp, #16]
 8004a96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004a9a:	2909      	cmp	r1, #9
 8004a9c:	d913      	bls.n	8004ac6 <_strtod_l+0x206>
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	9105      	str	r1, [sp, #20]
 8004aa2:	e7c2      	b.n	8004a2a <_strtod_l+0x16a>
 8004aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	921b      	str	r2, [sp, #108]	; 0x6c
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	2b30      	cmp	r3, #48	; 0x30
 8004ab0:	d0f8      	beq.n	8004aa4 <_strtod_l+0x1e4>
 8004ab2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004ab6:	2a08      	cmp	r2, #8
 8004ab8:	f200 84f0 	bhi.w	800549c <_strtod_l+0xbdc>
 8004abc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004abe:	9208      	str	r2, [sp, #32]
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004aca:	f100 0101 	add.w	r1, r0, #1
 8004ace:	d012      	beq.n	8004af6 <_strtod_l+0x236>
 8004ad0:	440a      	add	r2, r1
 8004ad2:	270a      	movs	r7, #10
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	eb00 0c04 	add.w	ip, r0, r4
 8004ada:	458c      	cmp	ip, r1
 8004adc:	d113      	bne.n	8004b06 <_strtod_l+0x246>
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	2908      	cmp	r1, #8
 8004ae2:	f104 0401 	add.w	r4, r4, #1
 8004ae6:	4404      	add	r4, r0
 8004ae8:	dc19      	bgt.n	8004b1e <_strtod_l+0x25e>
 8004aea:	210a      	movs	r1, #10
 8004aec:	9b06      	ldr	r3, [sp, #24]
 8004aee:	fb01 e303 	mla	r3, r1, r3, lr
 8004af2:	9306      	str	r3, [sp, #24]
 8004af4:	2100      	movs	r1, #0
 8004af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004af8:	1c58      	adds	r0, r3, #1
 8004afa:	901b      	str	r0, [sp, #108]	; 0x6c
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	4608      	mov	r0, r1
 8004b00:	e7c9      	b.n	8004a96 <_strtod_l+0x1d6>
 8004b02:	9804      	ldr	r0, [sp, #16]
 8004b04:	e7d3      	b.n	8004aae <_strtod_l+0x1ee>
 8004b06:	2908      	cmp	r1, #8
 8004b08:	f101 0101 	add.w	r1, r1, #1
 8004b0c:	dc03      	bgt.n	8004b16 <_strtod_l+0x256>
 8004b0e:	9b06      	ldr	r3, [sp, #24]
 8004b10:	437b      	muls	r3, r7
 8004b12:	9306      	str	r3, [sp, #24]
 8004b14:	e7e1      	b.n	8004ada <_strtod_l+0x21a>
 8004b16:	2910      	cmp	r1, #16
 8004b18:	bfd8      	it	le
 8004b1a:	437d      	mulle	r5, r7
 8004b1c:	e7dd      	b.n	8004ada <_strtod_l+0x21a>
 8004b1e:	2c10      	cmp	r4, #16
 8004b20:	bfdc      	itt	le
 8004b22:	210a      	movle	r1, #10
 8004b24:	fb01 e505 	mlale	r5, r1, r5, lr
 8004b28:	e7e4      	b.n	8004af4 <_strtod_l+0x234>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	e781      	b.n	8004a34 <_strtod_l+0x174>
 8004b30:	f04f 0c01 	mov.w	ip, #1
 8004b34:	1cb3      	adds	r3, r6, #2
 8004b36:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b38:	78b3      	ldrb	r3, [r6, #2]
 8004b3a:	e78a      	b.n	8004a52 <_strtod_l+0x192>
 8004b3c:	f04f 0c00 	mov.w	ip, #0
 8004b40:	e7f8      	b.n	8004b34 <_strtod_l+0x274>
 8004b42:	bf00      	nop
 8004b44:	08008044 	.word	0x08008044
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b4e:	1c5f      	adds	r7, r3, #1
 8004b50:	971b      	str	r7, [sp, #108]	; 0x6c
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d0f9      	beq.n	8004b4c <_strtod_l+0x28c>
 8004b58:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004b5c:	2f08      	cmp	r7, #8
 8004b5e:	f63f af7d 	bhi.w	8004a5c <_strtod_l+0x19c>
 8004b62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004b66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b68:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b6c:	1c5f      	adds	r7, r3, #1
 8004b6e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004b76:	f1b8 0f09 	cmp.w	r8, #9
 8004b7a:	d937      	bls.n	8004bec <_strtod_l+0x32c>
 8004b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b7e:	1a7f      	subs	r7, r7, r1
 8004b80:	2f08      	cmp	r7, #8
 8004b82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004b86:	dc37      	bgt.n	8004bf8 <_strtod_l+0x338>
 8004b88:	45be      	cmp	lr, r7
 8004b8a:	bfa8      	it	ge
 8004b8c:	46be      	movge	lr, r7
 8004b8e:	f1bc 0f00 	cmp.w	ip, #0
 8004b92:	d001      	beq.n	8004b98 <_strtod_l+0x2d8>
 8004b94:	f1ce 0e00 	rsb	lr, lr, #0
 8004b98:	2c00      	cmp	r4, #0
 8004b9a:	d151      	bne.n	8004c40 <_strtod_l+0x380>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f47f aece 	bne.w	800493e <_strtod_l+0x7e>
 8004ba2:	9a07      	ldr	r2, [sp, #28]
 8004ba4:	2a00      	cmp	r2, #0
 8004ba6:	f47f aeca 	bne.w	800493e <_strtod_l+0x7e>
 8004baa:	9a05      	ldr	r2, [sp, #20]
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	f47f aee4 	bne.w	800497a <_strtod_l+0xba>
 8004bb2:	2b4e      	cmp	r3, #78	; 0x4e
 8004bb4:	d027      	beq.n	8004c06 <_strtod_l+0x346>
 8004bb6:	dc21      	bgt.n	8004bfc <_strtod_l+0x33c>
 8004bb8:	2b49      	cmp	r3, #73	; 0x49
 8004bba:	f47f aede 	bne.w	800497a <_strtod_l+0xba>
 8004bbe:	49a4      	ldr	r1, [pc, #656]	; (8004e50 <_strtod_l+0x590>)
 8004bc0:	a81b      	add	r0, sp, #108	; 0x6c
 8004bc2:	f001 feab 	bl	800691c <__match>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f43f aed7 	beq.w	800497a <_strtod_l+0xba>
 8004bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bce:	49a1      	ldr	r1, [pc, #644]	; (8004e54 <_strtod_l+0x594>)
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	a81b      	add	r0, sp, #108	; 0x6c
 8004bd4:	931b      	str	r3, [sp, #108]	; 0x6c
 8004bd6:	f001 fea1 	bl	800691c <__match>
 8004bda:	b910      	cbnz	r0, 8004be2 <_strtod_l+0x322>
 8004bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bde:	3301      	adds	r3, #1
 8004be0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004be2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004e68 <_strtod_l+0x5a8>
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	e6a8      	b.n	800493e <_strtod_l+0x7e>
 8004bec:	210a      	movs	r1, #10
 8004bee:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004bf2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004bf6:	e7b8      	b.n	8004b6a <_strtod_l+0x2aa>
 8004bf8:	46be      	mov	lr, r7
 8004bfa:	e7c8      	b.n	8004b8e <_strtod_l+0x2ce>
 8004bfc:	2b69      	cmp	r3, #105	; 0x69
 8004bfe:	d0de      	beq.n	8004bbe <_strtod_l+0x2fe>
 8004c00:	2b6e      	cmp	r3, #110	; 0x6e
 8004c02:	f47f aeba 	bne.w	800497a <_strtod_l+0xba>
 8004c06:	4994      	ldr	r1, [pc, #592]	; (8004e58 <_strtod_l+0x598>)
 8004c08:	a81b      	add	r0, sp, #108	; 0x6c
 8004c0a:	f001 fe87 	bl	800691c <__match>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f43f aeb3 	beq.w	800497a <_strtod_l+0xba>
 8004c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b28      	cmp	r3, #40	; 0x28
 8004c1a:	d10e      	bne.n	8004c3a <_strtod_l+0x37a>
 8004c1c:	aa1e      	add	r2, sp, #120	; 0x78
 8004c1e:	498f      	ldr	r1, [pc, #572]	; (8004e5c <_strtod_l+0x59c>)
 8004c20:	a81b      	add	r0, sp, #108	; 0x6c
 8004c22:	f001 fe8f 	bl	8006944 <__hexnan>
 8004c26:	2805      	cmp	r0, #5
 8004c28:	d107      	bne.n	8004c3a <_strtod_l+0x37a>
 8004c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c2c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004c30:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004c34:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004c38:	e681      	b.n	800493e <_strtod_l+0x7e>
 8004c3a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004e70 <_strtod_l+0x5b0>
 8004c3e:	e7d2      	b.n	8004be6 <_strtod_l+0x326>
 8004c40:	ebae 0302 	sub.w	r3, lr, r2
 8004c44:	9307      	str	r3, [sp, #28]
 8004c46:	9b04      	ldr	r3, [sp, #16]
 8004c48:	9806      	ldr	r0, [sp, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf08      	it	eq
 8004c4e:	4623      	moveq	r3, r4
 8004c50:	2c10      	cmp	r4, #16
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	46a0      	mov	r8, r4
 8004c56:	bfa8      	it	ge
 8004c58:	f04f 0810 	movge.w	r8, #16
 8004c5c:	f7fb fc38 	bl	80004d0 <__aeabi_ui2d>
 8004c60:	2c09      	cmp	r4, #9
 8004c62:	4681      	mov	r9, r0
 8004c64:	468a      	mov	sl, r1
 8004c66:	dc13      	bgt.n	8004c90 <_strtod_l+0x3d0>
 8004c68:	9b07      	ldr	r3, [sp, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f43f ae67 	beq.w	800493e <_strtod_l+0x7e>
 8004c70:	9b07      	ldr	r3, [sp, #28]
 8004c72:	dd7e      	ble.n	8004d72 <_strtod_l+0x4b2>
 8004c74:	2b16      	cmp	r3, #22
 8004c76:	dc65      	bgt.n	8004d44 <_strtod_l+0x484>
 8004c78:	4a79      	ldr	r2, [pc, #484]	; (8004e60 <_strtod_l+0x5a0>)
 8004c7a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004c7e:	464a      	mov	r2, r9
 8004c80:	e9de 0100 	ldrd	r0, r1, [lr]
 8004c84:	4653      	mov	r3, sl
 8004c86:	f7fb fc9d 	bl	80005c4 <__aeabi_dmul>
 8004c8a:	4681      	mov	r9, r0
 8004c8c:	468a      	mov	sl, r1
 8004c8e:	e656      	b.n	800493e <_strtod_l+0x7e>
 8004c90:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <_strtod_l+0x5a0>)
 8004c92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004c9a:	f7fb fc93 	bl	80005c4 <__aeabi_dmul>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	460f      	mov	r7, r1
 8004ca4:	f7fb fc14 	bl	80004d0 <__aeabi_ui2d>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4630      	mov	r0, r6
 8004cae:	4639      	mov	r1, r7
 8004cb0:	f7fb fad2 	bl	8000258 <__adddf3>
 8004cb4:	2c0f      	cmp	r4, #15
 8004cb6:	4681      	mov	r9, r0
 8004cb8:	468a      	mov	sl, r1
 8004cba:	ddd5      	ble.n	8004c68 <_strtod_l+0x3a8>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	eba4 0808 	sub.w	r8, r4, r8
 8004cc2:	4498      	add	r8, r3
 8004cc4:	f1b8 0f00 	cmp.w	r8, #0
 8004cc8:	f340 809a 	ble.w	8004e00 <_strtod_l+0x540>
 8004ccc:	f018 030f 	ands.w	r3, r8, #15
 8004cd0:	d00a      	beq.n	8004ce8 <_strtod_l+0x428>
 8004cd2:	4963      	ldr	r1, [pc, #396]	; (8004e60 <_strtod_l+0x5a0>)
 8004cd4:	464a      	mov	r2, r9
 8004cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cde:	4653      	mov	r3, sl
 8004ce0:	f7fb fc70 	bl	80005c4 <__aeabi_dmul>
 8004ce4:	4681      	mov	r9, r0
 8004ce6:	468a      	mov	sl, r1
 8004ce8:	f038 080f 	bics.w	r8, r8, #15
 8004cec:	d077      	beq.n	8004dde <_strtod_l+0x51e>
 8004cee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004cf2:	dd4b      	ble.n	8004d8c <_strtod_l+0x4cc>
 8004cf4:	f04f 0800 	mov.w	r8, #0
 8004cf8:	f8cd 8010 	str.w	r8, [sp, #16]
 8004cfc:	f8cd 8020 	str.w	r8, [sp, #32]
 8004d00:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d04:	2322      	movs	r3, #34	; 0x22
 8004d06:	f04f 0900 	mov.w	r9, #0
 8004d0a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004e68 <_strtod_l+0x5a8>
 8004d0e:	f8cb 3000 	str.w	r3, [fp]
 8004d12:	9b08      	ldr	r3, [sp, #32]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f43f ae12 	beq.w	800493e <_strtod_l+0x7e>
 8004d1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d1c:	4658      	mov	r0, fp
 8004d1e:	f001 ff1c 	bl	8006b5a <_Bfree>
 8004d22:	9906      	ldr	r1, [sp, #24]
 8004d24:	4658      	mov	r0, fp
 8004d26:	f001 ff18 	bl	8006b5a <_Bfree>
 8004d2a:	9904      	ldr	r1, [sp, #16]
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	f001 ff14 	bl	8006b5a <_Bfree>
 8004d32:	9908      	ldr	r1, [sp, #32]
 8004d34:	4658      	mov	r0, fp
 8004d36:	f001 ff10 	bl	8006b5a <_Bfree>
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	f001 ff0c 	bl	8006b5a <_Bfree>
 8004d42:	e5fc      	b.n	800493e <_strtod_l+0x7e>
 8004d44:	9a07      	ldr	r2, [sp, #28]
 8004d46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	dbb6      	blt.n	8004cbc <_strtod_l+0x3fc>
 8004d4e:	4d44      	ldr	r5, [pc, #272]	; (8004e60 <_strtod_l+0x5a0>)
 8004d50:	f1c4 040f 	rsb	r4, r4, #15
 8004d54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004d58:	464a      	mov	r2, r9
 8004d5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d5e:	4653      	mov	r3, sl
 8004d60:	f7fb fc30 	bl	80005c4 <__aeabi_dmul>
 8004d64:	9b07      	ldr	r3, [sp, #28]
 8004d66:	1b1c      	subs	r4, r3, r4
 8004d68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004d6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d70:	e789      	b.n	8004c86 <_strtod_l+0x3c6>
 8004d72:	f113 0f16 	cmn.w	r3, #22
 8004d76:	dba1      	blt.n	8004cbc <_strtod_l+0x3fc>
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <_strtod_l+0x5a0>)
 8004d7a:	4648      	mov	r0, r9
 8004d7c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004d80:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004d84:	4651      	mov	r1, sl
 8004d86:	f7fb fd47 	bl	8000818 <__aeabi_ddiv>
 8004d8a:	e77e      	b.n	8004c8a <_strtod_l+0x3ca>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4648      	mov	r0, r9
 8004d90:	4651      	mov	r1, sl
 8004d92:	461d      	mov	r5, r3
 8004d94:	4e33      	ldr	r6, [pc, #204]	; (8004e64 <_strtod_l+0x5a4>)
 8004d96:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004d9a:	f1b8 0f01 	cmp.w	r8, #1
 8004d9e:	dc21      	bgt.n	8004de4 <_strtod_l+0x524>
 8004da0:	b10b      	cbz	r3, 8004da6 <_strtod_l+0x4e6>
 8004da2:	4681      	mov	r9, r0
 8004da4:	468a      	mov	sl, r1
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <_strtod_l+0x5a4>)
 8004da8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004dac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004db0:	464a      	mov	r2, r9
 8004db2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004db6:	4653      	mov	r3, sl
 8004db8:	f7fb fc04 	bl	80005c4 <__aeabi_dmul>
 8004dbc:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <_strtod_l+0x5a8>)
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	492a      	ldr	r1, [pc, #168]	; (8004e6c <_strtod_l+0x5ac>)
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	428b      	cmp	r3, r1
 8004dc8:	d894      	bhi.n	8004cf4 <_strtod_l+0x434>
 8004dca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004dce:	428b      	cmp	r3, r1
 8004dd0:	bf86      	itte	hi
 8004dd2:	f04f 39ff 	movhi.w	r9, #4294967295
 8004dd6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004e74 <_strtod_l+0x5b4>
 8004dda:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004dde:	2300      	movs	r3, #0
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	e07b      	b.n	8004edc <_strtod_l+0x61c>
 8004de4:	f018 0f01 	tst.w	r8, #1
 8004de8:	d006      	beq.n	8004df8 <_strtod_l+0x538>
 8004dea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fbe7 	bl	80005c4 <__aeabi_dmul>
 8004df6:	2301      	movs	r3, #1
 8004df8:	3501      	adds	r5, #1
 8004dfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004dfe:	e7cc      	b.n	8004d9a <_strtod_l+0x4da>
 8004e00:	d0ed      	beq.n	8004dde <_strtod_l+0x51e>
 8004e02:	f1c8 0800 	rsb	r8, r8, #0
 8004e06:	f018 020f 	ands.w	r2, r8, #15
 8004e0a:	d00a      	beq.n	8004e22 <_strtod_l+0x562>
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <_strtod_l+0x5a0>)
 8004e0e:	4648      	mov	r0, r9
 8004e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e14:	4651      	mov	r1, sl
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fcfd 	bl	8000818 <__aeabi_ddiv>
 8004e1e:	4681      	mov	r9, r0
 8004e20:	468a      	mov	sl, r1
 8004e22:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004e26:	d0da      	beq.n	8004dde <_strtod_l+0x51e>
 8004e28:	f1b8 0f1f 	cmp.w	r8, #31
 8004e2c:	dd24      	ble.n	8004e78 <_strtod_l+0x5b8>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e36:	f8cd 8020 	str.w	r8, [sp, #32]
 8004e3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e3e:	2322      	movs	r3, #34	; 0x22
 8004e40:	f04f 0900 	mov.w	r9, #0
 8004e44:	f04f 0a00 	mov.w	sl, #0
 8004e48:	f8cb 3000 	str.w	r3, [fp]
 8004e4c:	e761      	b.n	8004d12 <_strtod_l+0x452>
 8004e4e:	bf00      	nop
 8004e50:	0800800d 	.word	0x0800800d
 8004e54:	0800809b 	.word	0x0800809b
 8004e58:	08008015 	.word	0x08008015
 8004e5c:	08008058 	.word	0x08008058
 8004e60:	08008140 	.word	0x08008140
 8004e64:	08008118 	.word	0x08008118
 8004e68:	7ff00000 	.word	0x7ff00000
 8004e6c:	7ca00000 	.word	0x7ca00000
 8004e70:	fff80000 	.word	0xfff80000
 8004e74:	7fefffff 	.word	0x7fefffff
 8004e78:	f018 0310 	ands.w	r3, r8, #16
 8004e7c:	bf18      	it	ne
 8004e7e:	236a      	movne	r3, #106	; 0x6a
 8004e80:	4648      	mov	r0, r9
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	4651      	mov	r1, sl
 8004e86:	2300      	movs	r3, #0
 8004e88:	4da1      	ldr	r5, [pc, #644]	; (8005110 <_strtod_l+0x850>)
 8004e8a:	f1b8 0f00 	cmp.w	r8, #0
 8004e8e:	f300 8113 	bgt.w	80050b8 <_strtod_l+0x7f8>
 8004e92:	b10b      	cbz	r3, 8004e98 <_strtod_l+0x5d8>
 8004e94:	4681      	mov	r9, r0
 8004e96:	468a      	mov	sl, r1
 8004e98:	9b05      	ldr	r3, [sp, #20]
 8004e9a:	b1bb      	cbz	r3, 8004ecc <_strtod_l+0x60c>
 8004e9c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004ea0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	dd10      	ble.n	8004ecc <_strtod_l+0x60c>
 8004eaa:	2b1f      	cmp	r3, #31
 8004eac:	f340 8110 	ble.w	80050d0 <_strtod_l+0x810>
 8004eb0:	2b34      	cmp	r3, #52	; 0x34
 8004eb2:	bfd8      	it	le
 8004eb4:	f04f 32ff 	movle.w	r2, #4294967295
 8004eb8:	f04f 0900 	mov.w	r9, #0
 8004ebc:	bfcf      	iteee	gt
 8004ebe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004ec2:	3b20      	suble	r3, #32
 8004ec4:	fa02 f303 	lslle.w	r3, r2, r3
 8004ec8:	ea03 0a01 	andle.w	sl, r3, r1
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4648      	mov	r0, r9
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	f7fb fdde 	bl	8000a94 <__aeabi_dcmpeq>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d1a8      	bne.n	8004e2e <_strtod_l+0x56e>
 8004edc:	9b06      	ldr	r3, [sp, #24]
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	9908      	ldr	r1, [sp, #32]
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	4658      	mov	r0, fp
 8004ee8:	f001 fe89 	bl	8006bfe <__s2b>
 8004eec:	9008      	str	r0, [sp, #32]
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f43f af00 	beq.w	8004cf4 <_strtod_l+0x434>
 8004ef4:	9a07      	ldr	r2, [sp, #28]
 8004ef6:	9b07      	ldr	r3, [sp, #28]
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	f1c3 0300 	rsb	r3, r3, #0
 8004efe:	bfa8      	it	ge
 8004f00:	2300      	movge	r3, #0
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	930e      	str	r3, [sp, #56]	; 0x38
 8004f08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004f0c:	9316      	str	r3, [sp, #88]	; 0x58
 8004f0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f12:	9b08      	ldr	r3, [sp, #32]
 8004f14:	4658      	mov	r0, fp
 8004f16:	6859      	ldr	r1, [r3, #4]
 8004f18:	f001 fdeb 	bl	8006af2 <_Balloc>
 8004f1c:	9006      	str	r0, [sp, #24]
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f43f aef0 	beq.w	8004d04 <_strtod_l+0x444>
 8004f24:	9b08      	ldr	r3, [sp, #32]
 8004f26:	300c      	adds	r0, #12
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	f103 010c 	add.w	r1, r3, #12
 8004f2e:	3202      	adds	r2, #2
 8004f30:	0092      	lsls	r2, r2, #2
 8004f32:	f001 fdd3 	bl	8006adc <memcpy>
 8004f36:	ab1e      	add	r3, sp, #120	; 0x78
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	464a      	mov	r2, r9
 8004f40:	4653      	mov	r3, sl
 8004f42:	4658      	mov	r0, fp
 8004f44:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004f48:	f002 f914 	bl	8007174 <__d2b>
 8004f4c:	901c      	str	r0, [sp, #112]	; 0x70
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f aed8 	beq.w	8004d04 <_strtod_l+0x444>
 8004f54:	2101      	movs	r1, #1
 8004f56:	4658      	mov	r0, fp
 8004f58:	f001 fedd 	bl	8006d16 <__i2b>
 8004f5c:	9004      	str	r0, [sp, #16]
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f43f aecf 	beq.w	8004d04 <_strtod_l+0x444>
 8004f66:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004f68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	bfab      	itete	ge
 8004f6e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004f70:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004f72:	18ee      	addge	r6, r5, r3
 8004f74:	1b5c      	sublt	r4, r3, r5
 8004f76:	9b05      	ldr	r3, [sp, #20]
 8004f78:	bfa8      	it	ge
 8004f7a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004f7c:	eba5 0503 	sub.w	r5, r5, r3
 8004f80:	4415      	add	r5, r2
 8004f82:	4b64      	ldr	r3, [pc, #400]	; (8005114 <_strtod_l+0x854>)
 8004f84:	f105 35ff 	add.w	r5, r5, #4294967295
 8004f88:	bfb8      	it	lt
 8004f8a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004f92:	f280 80af 	bge.w	80050f4 <_strtod_l+0x834>
 8004f96:	1b5b      	subs	r3, r3, r5
 8004f98:	2b1f      	cmp	r3, #31
 8004f9a:	eba2 0203 	sub.w	r2, r2, r3
 8004f9e:	f04f 0701 	mov.w	r7, #1
 8004fa2:	f300 809c 	bgt.w	80050de <_strtod_l+0x81e>
 8004fa6:	2500      	movs	r5, #0
 8004fa8:	fa07 f303 	lsl.w	r3, r7, r3
 8004fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fae:	18b7      	adds	r7, r6, r2
 8004fb0:	9b05      	ldr	r3, [sp, #20]
 8004fb2:	42be      	cmp	r6, r7
 8004fb4:	4414      	add	r4, r2
 8004fb6:	441c      	add	r4, r3
 8004fb8:	4633      	mov	r3, r6
 8004fba:	bfa8      	it	ge
 8004fbc:	463b      	movge	r3, r7
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	bfa8      	it	ge
 8004fc2:	4623      	movge	r3, r4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bfc2      	ittt	gt
 8004fc8:	1aff      	subgt	r7, r7, r3
 8004fca:	1ae4      	subgt	r4, r4, r3
 8004fcc:	1af6      	subgt	r6, r6, r3
 8004fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd0:	b1bb      	cbz	r3, 8005002 <_strtod_l+0x742>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	9904      	ldr	r1, [sp, #16]
 8004fd6:	4658      	mov	r0, fp
 8004fd8:	f001 ff3c 	bl	8006e54 <__pow5mult>
 8004fdc:	9004      	str	r0, [sp, #16]
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f43f ae90 	beq.w	8004d04 <_strtod_l+0x444>
 8004fe4:	4601      	mov	r1, r0
 8004fe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004fe8:	4658      	mov	r0, fp
 8004fea:	f001 fe9d 	bl	8006d28 <__multiply>
 8004fee:	9009      	str	r0, [sp, #36]	; 0x24
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	f43f ae87 	beq.w	8004d04 <_strtod_l+0x444>
 8004ff6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ff8:	4658      	mov	r0, fp
 8004ffa:	f001 fdae 	bl	8006b5a <_Bfree>
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	931c      	str	r3, [sp, #112]	; 0x70
 8005002:	2f00      	cmp	r7, #0
 8005004:	dc7a      	bgt.n	80050fc <_strtod_l+0x83c>
 8005006:	9b07      	ldr	r3, [sp, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	dd08      	ble.n	800501e <_strtod_l+0x75e>
 800500c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800500e:	9906      	ldr	r1, [sp, #24]
 8005010:	4658      	mov	r0, fp
 8005012:	f001 ff1f 	bl	8006e54 <__pow5mult>
 8005016:	9006      	str	r0, [sp, #24]
 8005018:	2800      	cmp	r0, #0
 800501a:	f43f ae73 	beq.w	8004d04 <_strtod_l+0x444>
 800501e:	2c00      	cmp	r4, #0
 8005020:	dd08      	ble.n	8005034 <_strtod_l+0x774>
 8005022:	4622      	mov	r2, r4
 8005024:	9906      	ldr	r1, [sp, #24]
 8005026:	4658      	mov	r0, fp
 8005028:	f001 ff62 	bl	8006ef0 <__lshift>
 800502c:	9006      	str	r0, [sp, #24]
 800502e:	2800      	cmp	r0, #0
 8005030:	f43f ae68 	beq.w	8004d04 <_strtod_l+0x444>
 8005034:	2e00      	cmp	r6, #0
 8005036:	dd08      	ble.n	800504a <_strtod_l+0x78a>
 8005038:	4632      	mov	r2, r6
 800503a:	9904      	ldr	r1, [sp, #16]
 800503c:	4658      	mov	r0, fp
 800503e:	f001 ff57 	bl	8006ef0 <__lshift>
 8005042:	9004      	str	r0, [sp, #16]
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f ae5d 	beq.w	8004d04 <_strtod_l+0x444>
 800504a:	9a06      	ldr	r2, [sp, #24]
 800504c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800504e:	4658      	mov	r0, fp
 8005050:	f001 ffbc 	bl	8006fcc <__mdiff>
 8005054:	4680      	mov	r8, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f ae54 	beq.w	8004d04 <_strtod_l+0x444>
 800505c:	2400      	movs	r4, #0
 800505e:	68c3      	ldr	r3, [r0, #12]
 8005060:	9904      	ldr	r1, [sp, #16]
 8005062:	60c4      	str	r4, [r0, #12]
 8005064:	930c      	str	r3, [sp, #48]	; 0x30
 8005066:	f001 ff97 	bl	8006f98 <__mcmp>
 800506a:	42a0      	cmp	r0, r4
 800506c:	da54      	bge.n	8005118 <_strtod_l+0x858>
 800506e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005070:	b9f3      	cbnz	r3, 80050b0 <_strtod_l+0x7f0>
 8005072:	f1b9 0f00 	cmp.w	r9, #0
 8005076:	d11b      	bne.n	80050b0 <_strtod_l+0x7f0>
 8005078:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800507c:	b9c3      	cbnz	r3, 80050b0 <_strtod_l+0x7f0>
 800507e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005082:	0d1b      	lsrs	r3, r3, #20
 8005084:	051b      	lsls	r3, r3, #20
 8005086:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800508a:	d911      	bls.n	80050b0 <_strtod_l+0x7f0>
 800508c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005090:	b91b      	cbnz	r3, 800509a <_strtod_l+0x7da>
 8005092:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005096:	2b01      	cmp	r3, #1
 8005098:	dd0a      	ble.n	80050b0 <_strtod_l+0x7f0>
 800509a:	4641      	mov	r1, r8
 800509c:	2201      	movs	r2, #1
 800509e:	4658      	mov	r0, fp
 80050a0:	f001 ff26 	bl	8006ef0 <__lshift>
 80050a4:	9904      	ldr	r1, [sp, #16]
 80050a6:	4680      	mov	r8, r0
 80050a8:	f001 ff76 	bl	8006f98 <__mcmp>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	dc68      	bgt.n	8005182 <_strtod_l+0x8c2>
 80050b0:	9b05      	ldr	r3, [sp, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d172      	bne.n	800519c <_strtod_l+0x8dc>
 80050b6:	e630      	b.n	8004d1a <_strtod_l+0x45a>
 80050b8:	f018 0f01 	tst.w	r8, #1
 80050bc:	d004      	beq.n	80050c8 <_strtod_l+0x808>
 80050be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050c2:	f7fb fa7f 	bl	80005c4 <__aeabi_dmul>
 80050c6:	2301      	movs	r3, #1
 80050c8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80050cc:	3508      	adds	r5, #8
 80050ce:	e6dc      	b.n	8004e8a <_strtod_l+0x5ca>
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	ea03 0909 	and.w	r9, r3, r9
 80050dc:	e6f6      	b.n	8004ecc <_strtod_l+0x60c>
 80050de:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80050e2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80050e6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80050ea:	35e2      	adds	r5, #226	; 0xe2
 80050ec:	fa07 f505 	lsl.w	r5, r7, r5
 80050f0:	970f      	str	r7, [sp, #60]	; 0x3c
 80050f2:	e75c      	b.n	8004fae <_strtod_l+0x6ee>
 80050f4:	2301      	movs	r3, #1
 80050f6:	2500      	movs	r5, #0
 80050f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80050fa:	e758      	b.n	8004fae <_strtod_l+0x6ee>
 80050fc:	463a      	mov	r2, r7
 80050fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005100:	4658      	mov	r0, fp
 8005102:	f001 fef5 	bl	8006ef0 <__lshift>
 8005106:	901c      	str	r0, [sp, #112]	; 0x70
 8005108:	2800      	cmp	r0, #0
 800510a:	f47f af7c 	bne.w	8005006 <_strtod_l+0x746>
 800510e:	e5f9      	b.n	8004d04 <_strtod_l+0x444>
 8005110:	08008070 	.word	0x08008070
 8005114:	fffffc02 	.word	0xfffffc02
 8005118:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800511c:	f040 8089 	bne.w	8005232 <_strtod_l+0x972>
 8005120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005122:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005126:	b342      	cbz	r2, 800517a <_strtod_l+0x8ba>
 8005128:	4aaf      	ldr	r2, [pc, #700]	; (80053e8 <_strtod_l+0xb28>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d156      	bne.n	80051dc <_strtod_l+0x91c>
 800512e:	9b05      	ldr	r3, [sp, #20]
 8005130:	4648      	mov	r0, r9
 8005132:	b1eb      	cbz	r3, 8005170 <_strtod_l+0x8b0>
 8005134:	4653      	mov	r3, sl
 8005136:	4aad      	ldr	r2, [pc, #692]	; (80053ec <_strtod_l+0xb2c>)
 8005138:	f04f 31ff 	mov.w	r1, #4294967295
 800513c:	401a      	ands	r2, r3
 800513e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005142:	d818      	bhi.n	8005176 <_strtod_l+0x8b6>
 8005144:	0d12      	lsrs	r2, r2, #20
 8005146:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	4298      	cmp	r0, r3
 8005150:	d144      	bne.n	80051dc <_strtod_l+0x91c>
 8005152:	4ba7      	ldr	r3, [pc, #668]	; (80053f0 <_strtod_l+0xb30>)
 8005154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005156:	429a      	cmp	r2, r3
 8005158:	d102      	bne.n	8005160 <_strtod_l+0x8a0>
 800515a:	3001      	adds	r0, #1
 800515c:	f43f add2 	beq.w	8004d04 <_strtod_l+0x444>
 8005160:	4ba2      	ldr	r3, [pc, #648]	; (80053ec <_strtod_l+0xb2c>)
 8005162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005164:	f04f 0900 	mov.w	r9, #0
 8005168:	401a      	ands	r2, r3
 800516a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800516e:	e79f      	b.n	80050b0 <_strtod_l+0x7f0>
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	e7eb      	b.n	800514e <_strtod_l+0x88e>
 8005176:	460b      	mov	r3, r1
 8005178:	e7e9      	b.n	800514e <_strtod_l+0x88e>
 800517a:	bb7b      	cbnz	r3, 80051dc <_strtod_l+0x91c>
 800517c:	f1b9 0f00 	cmp.w	r9, #0
 8005180:	d12c      	bne.n	80051dc <_strtod_l+0x91c>
 8005182:	9905      	ldr	r1, [sp, #20]
 8005184:	4653      	mov	r3, sl
 8005186:	4a99      	ldr	r2, [pc, #612]	; (80053ec <_strtod_l+0xb2c>)
 8005188:	b1f1      	cbz	r1, 80051c8 <_strtod_l+0x908>
 800518a:	ea02 010a 	and.w	r1, r2, sl
 800518e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005192:	dc19      	bgt.n	80051c8 <_strtod_l+0x908>
 8005194:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005198:	f77f ae51 	ble.w	8004e3e <_strtod_l+0x57e>
 800519c:	2300      	movs	r3, #0
 800519e:	4a95      	ldr	r2, [pc, #596]	; (80053f4 <_strtod_l+0xb34>)
 80051a0:	4648      	mov	r0, r9
 80051a2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80051a6:	4651      	mov	r1, sl
 80051a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80051ac:	f7fb fa0a 	bl	80005c4 <__aeabi_dmul>
 80051b0:	4681      	mov	r9, r0
 80051b2:	468a      	mov	sl, r1
 80051b4:	2900      	cmp	r1, #0
 80051b6:	f47f adb0 	bne.w	8004d1a <_strtod_l+0x45a>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f47f adad 	bne.w	8004d1a <_strtod_l+0x45a>
 80051c0:	2322      	movs	r3, #34	; 0x22
 80051c2:	f8cb 3000 	str.w	r3, [fp]
 80051c6:	e5a8      	b.n	8004d1a <_strtod_l+0x45a>
 80051c8:	4013      	ands	r3, r2
 80051ca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80051ce:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80051d2:	f04f 39ff 	mov.w	r9, #4294967295
 80051d6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80051da:	e769      	b.n	80050b0 <_strtod_l+0x7f0>
 80051dc:	b19d      	cbz	r5, 8005206 <_strtod_l+0x946>
 80051de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e0:	421d      	tst	r5, r3
 80051e2:	f43f af65 	beq.w	80050b0 <_strtod_l+0x7f0>
 80051e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e8:	9a05      	ldr	r2, [sp, #20]
 80051ea:	4648      	mov	r0, r9
 80051ec:	4651      	mov	r1, sl
 80051ee:	b173      	cbz	r3, 800520e <_strtod_l+0x94e>
 80051f0:	f7ff fb42 	bl	8004878 <sulp>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051fc:	f7fb f82c 	bl	8000258 <__adddf3>
 8005200:	4681      	mov	r9, r0
 8005202:	468a      	mov	sl, r1
 8005204:	e754      	b.n	80050b0 <_strtod_l+0x7f0>
 8005206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005208:	ea13 0f09 	tst.w	r3, r9
 800520c:	e7e9      	b.n	80051e2 <_strtod_l+0x922>
 800520e:	f7ff fb33 	bl	8004878 <sulp>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800521a:	f7fb f81b 	bl	8000254 <__aeabi_dsub>
 800521e:	2200      	movs	r2, #0
 8005220:	2300      	movs	r3, #0
 8005222:	4681      	mov	r9, r0
 8005224:	468a      	mov	sl, r1
 8005226:	f7fb fc35 	bl	8000a94 <__aeabi_dcmpeq>
 800522a:	2800      	cmp	r0, #0
 800522c:	f47f ae07 	bne.w	8004e3e <_strtod_l+0x57e>
 8005230:	e73e      	b.n	80050b0 <_strtod_l+0x7f0>
 8005232:	9904      	ldr	r1, [sp, #16]
 8005234:	4640      	mov	r0, r8
 8005236:	f001 ffec 	bl	8007212 <__ratio>
 800523a:	2200      	movs	r2, #0
 800523c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005240:	4606      	mov	r6, r0
 8005242:	460f      	mov	r7, r1
 8005244:	f7fb fc3a 	bl	8000abc <__aeabi_dcmple>
 8005248:	2800      	cmp	r0, #0
 800524a:	d075      	beq.n	8005338 <_strtod_l+0xa78>
 800524c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d047      	beq.n	80052e2 <_strtod_l+0xa22>
 8005252:	2600      	movs	r6, #0
 8005254:	4f68      	ldr	r7, [pc, #416]	; (80053f8 <_strtod_l+0xb38>)
 8005256:	4d68      	ldr	r5, [pc, #416]	; (80053f8 <_strtod_l+0xb38>)
 8005258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800525e:	0d1b      	lsrs	r3, r3, #20
 8005260:	051b      	lsls	r3, r3, #20
 8005262:	930f      	str	r3, [sp, #60]	; 0x3c
 8005264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005266:	4b65      	ldr	r3, [pc, #404]	; (80053fc <_strtod_l+0xb3c>)
 8005268:	429a      	cmp	r2, r3
 800526a:	f040 80cf 	bne.w	800540c <_strtod_l+0xb4c>
 800526e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005272:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	4648      	mov	r0, r9
 800527a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800527e:	4651      	mov	r1, sl
 8005280:	f001 ff02 	bl	8007088 <__ulp>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fb f99a 	bl	80005c4 <__aeabi_dmul>
 8005290:	464a      	mov	r2, r9
 8005292:	4653      	mov	r3, sl
 8005294:	f7fa ffe0 	bl	8000258 <__adddf3>
 8005298:	460b      	mov	r3, r1
 800529a:	4954      	ldr	r1, [pc, #336]	; (80053ec <_strtod_l+0xb2c>)
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <_strtod_l+0xb40>)
 800529e:	4019      	ands	r1, r3
 80052a0:	4291      	cmp	r1, r2
 80052a2:	4681      	mov	r9, r0
 80052a4:	d95e      	bls.n	8005364 <_strtod_l+0xaa4>
 80052a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <_strtod_l+0x9f8>
 80052b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b2:	3301      	adds	r3, #1
 80052b4:	f43f ad26 	beq.w	8004d04 <_strtod_l+0x444>
 80052b8:	f04f 39ff 	mov.w	r9, #4294967295
 80052bc:	f8df a130 	ldr.w	sl, [pc, #304]	; 80053f0 <_strtod_l+0xb30>
 80052c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052c2:	4658      	mov	r0, fp
 80052c4:	f001 fc49 	bl	8006b5a <_Bfree>
 80052c8:	9906      	ldr	r1, [sp, #24]
 80052ca:	4658      	mov	r0, fp
 80052cc:	f001 fc45 	bl	8006b5a <_Bfree>
 80052d0:	9904      	ldr	r1, [sp, #16]
 80052d2:	4658      	mov	r0, fp
 80052d4:	f001 fc41 	bl	8006b5a <_Bfree>
 80052d8:	4641      	mov	r1, r8
 80052da:	4658      	mov	r0, fp
 80052dc:	f001 fc3d 	bl	8006b5a <_Bfree>
 80052e0:	e617      	b.n	8004f12 <_strtod_l+0x652>
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	d119      	bne.n	800531c <_strtod_l+0xa5c>
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ee:	b9e3      	cbnz	r3, 800532a <_strtod_l+0xa6a>
 80052f0:	2200      	movs	r2, #0
 80052f2:	4b41      	ldr	r3, [pc, #260]	; (80053f8 <_strtod_l+0xb38>)
 80052f4:	4630      	mov	r0, r6
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fb fbd6 	bl	8000aa8 <__aeabi_dcmplt>
 80052fc:	b9c8      	cbnz	r0, 8005332 <_strtod_l+0xa72>
 80052fe:	2200      	movs	r2, #0
 8005300:	4b40      	ldr	r3, [pc, #256]	; (8005404 <_strtod_l+0xb44>)
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fb f95d 	bl	80005c4 <__aeabi_dmul>
 800530a:	4604      	mov	r4, r0
 800530c:	460d      	mov	r5, r1
 800530e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005312:	9418      	str	r4, [sp, #96]	; 0x60
 8005314:	9319      	str	r3, [sp, #100]	; 0x64
 8005316:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800531a:	e79d      	b.n	8005258 <_strtod_l+0x998>
 800531c:	f1b9 0f01 	cmp.w	r9, #1
 8005320:	d103      	bne.n	800532a <_strtod_l+0xa6a>
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	f43f ad8a 	beq.w	8004e3e <_strtod_l+0x57e>
 800532a:	2600      	movs	r6, #0
 800532c:	4f36      	ldr	r7, [pc, #216]	; (8005408 <_strtod_l+0xb48>)
 800532e:	2400      	movs	r4, #0
 8005330:	e791      	b.n	8005256 <_strtod_l+0x996>
 8005332:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005334:	4d33      	ldr	r5, [pc, #204]	; (8005404 <_strtod_l+0xb44>)
 8005336:	e7ea      	b.n	800530e <_strtod_l+0xa4e>
 8005338:	4b32      	ldr	r3, [pc, #200]	; (8005404 <_strtod_l+0xb44>)
 800533a:	2200      	movs	r2, #0
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb f940 	bl	80005c4 <__aeabi_dmul>
 8005344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005346:	4604      	mov	r4, r0
 8005348:	460d      	mov	r5, r1
 800534a:	b933      	cbnz	r3, 800535a <_strtod_l+0xa9a>
 800534c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005350:	9010      	str	r0, [sp, #64]	; 0x40
 8005352:	9311      	str	r3, [sp, #68]	; 0x44
 8005354:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005358:	e77e      	b.n	8005258 <_strtod_l+0x998>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005362:	e7f7      	b.n	8005354 <_strtod_l+0xa94>
 8005364:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005368:	9b05      	ldr	r3, [sp, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1a8      	bne.n	80052c0 <_strtod_l+0xa00>
 800536e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005372:	0d1b      	lsrs	r3, r3, #20
 8005374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005376:	051b      	lsls	r3, r3, #20
 8005378:	429a      	cmp	r2, r3
 800537a:	4656      	mov	r6, sl
 800537c:	d1a0      	bne.n	80052c0 <_strtod_l+0xa00>
 800537e:	4629      	mov	r1, r5
 8005380:	4620      	mov	r0, r4
 8005382:	f7fb fbcf 	bl	8000b24 <__aeabi_d2iz>
 8005386:	f7fb f8b3 	bl	80004f0 <__aeabi_i2d>
 800538a:	460b      	mov	r3, r1
 800538c:	4602      	mov	r2, r0
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f7fa ff5f 	bl	8000254 <__aeabi_dsub>
 8005396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005398:	4604      	mov	r4, r0
 800539a:	460d      	mov	r5, r1
 800539c:	b933      	cbnz	r3, 80053ac <_strtod_l+0xaec>
 800539e:	f1b9 0f00 	cmp.w	r9, #0
 80053a2:	d103      	bne.n	80053ac <_strtod_l+0xaec>
 80053a4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80053a8:	2e00      	cmp	r6, #0
 80053aa:	d06a      	beq.n	8005482 <_strtod_l+0xbc2>
 80053ac:	a30a      	add	r3, pc, #40	; (adr r3, 80053d8 <_strtod_l+0xb18>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fb fb77 	bl	8000aa8 <__aeabi_dcmplt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f47f acad 	bne.w	8004d1a <_strtod_l+0x45a>
 80053c0:	a307      	add	r3, pc, #28	; (adr r3, 80053e0 <_strtod_l+0xb20>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7fb fb8b 	bl	8000ae4 <__aeabi_dcmpgt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f43f af76 	beq.w	80052c0 <_strtod_l+0xa00>
 80053d4:	e4a1      	b.n	8004d1a <_strtod_l+0x45a>
 80053d6:	bf00      	nop
 80053d8:	94a03595 	.word	0x94a03595
 80053dc:	3fdfffff 	.word	0x3fdfffff
 80053e0:	35afe535 	.word	0x35afe535
 80053e4:	3fe00000 	.word	0x3fe00000
 80053e8:	000fffff 	.word	0x000fffff
 80053ec:	7ff00000 	.word	0x7ff00000
 80053f0:	7fefffff 	.word	0x7fefffff
 80053f4:	39500000 	.word	0x39500000
 80053f8:	3ff00000 	.word	0x3ff00000
 80053fc:	7fe00000 	.word	0x7fe00000
 8005400:	7c9fffff 	.word	0x7c9fffff
 8005404:	3fe00000 	.word	0x3fe00000
 8005408:	bff00000 	.word	0xbff00000
 800540c:	9b05      	ldr	r3, [sp, #20]
 800540e:	b313      	cbz	r3, 8005456 <_strtod_l+0xb96>
 8005410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005412:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005416:	d81e      	bhi.n	8005456 <_strtod_l+0xb96>
 8005418:	a325      	add	r3, pc, #148	; (adr r3, 80054b0 <_strtod_l+0xbf0>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb fb4b 	bl	8000abc <__aeabi_dcmple>
 8005426:	b190      	cbz	r0, 800544e <_strtod_l+0xb8e>
 8005428:	4629      	mov	r1, r5
 800542a:	4620      	mov	r0, r4
 800542c:	f7fb fba2 	bl	8000b74 <__aeabi_d2uiz>
 8005430:	2800      	cmp	r0, #0
 8005432:	bf08      	it	eq
 8005434:	2001      	moveq	r0, #1
 8005436:	f7fb f84b 	bl	80004d0 <__aeabi_ui2d>
 800543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800543c:	4604      	mov	r4, r0
 800543e:	460d      	mov	r5, r1
 8005440:	b9d3      	cbnz	r3, 8005478 <_strtod_l+0xbb8>
 8005442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005446:	9012      	str	r0, [sp, #72]	; 0x48
 8005448:	9313      	str	r3, [sp, #76]	; 0x4c
 800544a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800544e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005450:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005454:	1a9f      	subs	r7, r3, r2
 8005456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800545a:	f001 fe15 	bl	8007088 <__ulp>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb f8ad 	bl	80005c4 <__aeabi_dmul>
 800546a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800546e:	f7fa fef3 	bl	8000258 <__adddf3>
 8005472:	4681      	mov	r9, r0
 8005474:	468a      	mov	sl, r1
 8005476:	e777      	b.n	8005368 <_strtod_l+0xaa8>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005480:	e7e3      	b.n	800544a <_strtod_l+0xb8a>
 8005482:	a30d      	add	r3, pc, #52	; (adr r3, 80054b8 <_strtod_l+0xbf8>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fb fb0e 	bl	8000aa8 <__aeabi_dcmplt>
 800548c:	e79f      	b.n	80053ce <_strtod_l+0xb0e>
 800548e:	2300      	movs	r3, #0
 8005490:	930d      	str	r3, [sp, #52]	; 0x34
 8005492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005494:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	f7ff ba55 	b.w	8004946 <_strtod_l+0x86>
 800549c:	2b65      	cmp	r3, #101	; 0x65
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f43f ab42 	beq.w	8004b2a <_strtod_l+0x26a>
 80054a6:	2101      	movs	r1, #1
 80054a8:	4614      	mov	r4, r2
 80054aa:	9105      	str	r1, [sp, #20]
 80054ac:	f7ff babf 	b.w	8004a2e <_strtod_l+0x16e>
 80054b0:	ffc00000 	.word	0xffc00000
 80054b4:	41dfffff 	.word	0x41dfffff
 80054b8:	94a03595 	.word	0x94a03595
 80054bc:	3fcfffff 	.word	0x3fcfffff

080054c0 <_strtod_r>:
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_strtod_r+0x18>)
 80054c2:	b410      	push	{r4}
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4c05      	ldr	r4, [pc, #20]	; (80054dc <_strtod_r+0x1c>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf08      	it	eq
 80054ce:	4623      	moveq	r3, r4
 80054d0:	bc10      	pop	{r4}
 80054d2:	f7ff b9f5 	b.w	80048c0 <_strtod_l>
 80054d6:	bf00      	nop
 80054d8:	2000002c 	.word	0x2000002c
 80054dc:	20000090 	.word	0x20000090

080054e0 <_strtol_l.isra.0>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	4680      	mov	r8, r0
 80054e6:	4689      	mov	r9, r1
 80054e8:	4692      	mov	sl, r2
 80054ea:	461e      	mov	r6, r3
 80054ec:	460f      	mov	r7, r1
 80054ee:	463d      	mov	r5, r7
 80054f0:	9808      	ldr	r0, [sp, #32]
 80054f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054f6:	f001 fab5 	bl	8006a64 <__locale_ctype_ptr_l>
 80054fa:	4420      	add	r0, r4
 80054fc:	7843      	ldrb	r3, [r0, #1]
 80054fe:	f013 0308 	ands.w	r3, r3, #8
 8005502:	d132      	bne.n	800556a <_strtol_l.isra.0+0x8a>
 8005504:	2c2d      	cmp	r4, #45	; 0x2d
 8005506:	d132      	bne.n	800556e <_strtol_l.isra.0+0x8e>
 8005508:	2201      	movs	r2, #1
 800550a:	787c      	ldrb	r4, [r7, #1]
 800550c:	1cbd      	adds	r5, r7, #2
 800550e:	2e00      	cmp	r6, #0
 8005510:	d05d      	beq.n	80055ce <_strtol_l.isra.0+0xee>
 8005512:	2e10      	cmp	r6, #16
 8005514:	d109      	bne.n	800552a <_strtol_l.isra.0+0x4a>
 8005516:	2c30      	cmp	r4, #48	; 0x30
 8005518:	d107      	bne.n	800552a <_strtol_l.isra.0+0x4a>
 800551a:	782b      	ldrb	r3, [r5, #0]
 800551c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005520:	2b58      	cmp	r3, #88	; 0x58
 8005522:	d14f      	bne.n	80055c4 <_strtol_l.isra.0+0xe4>
 8005524:	2610      	movs	r6, #16
 8005526:	786c      	ldrb	r4, [r5, #1]
 8005528:	3502      	adds	r5, #2
 800552a:	2a00      	cmp	r2, #0
 800552c:	bf14      	ite	ne
 800552e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005532:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005536:	2700      	movs	r7, #0
 8005538:	fbb1 fcf6 	udiv	ip, r1, r6
 800553c:	4638      	mov	r0, r7
 800553e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005542:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005546:	2b09      	cmp	r3, #9
 8005548:	d817      	bhi.n	800557a <_strtol_l.isra.0+0x9a>
 800554a:	461c      	mov	r4, r3
 800554c:	42a6      	cmp	r6, r4
 800554e:	dd23      	ble.n	8005598 <_strtol_l.isra.0+0xb8>
 8005550:	1c7b      	adds	r3, r7, #1
 8005552:	d007      	beq.n	8005564 <_strtol_l.isra.0+0x84>
 8005554:	4584      	cmp	ip, r0
 8005556:	d31c      	bcc.n	8005592 <_strtol_l.isra.0+0xb2>
 8005558:	d101      	bne.n	800555e <_strtol_l.isra.0+0x7e>
 800555a:	45a6      	cmp	lr, r4
 800555c:	db19      	blt.n	8005592 <_strtol_l.isra.0+0xb2>
 800555e:	2701      	movs	r7, #1
 8005560:	fb00 4006 	mla	r0, r0, r6, r4
 8005564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005568:	e7eb      	b.n	8005542 <_strtol_l.isra.0+0x62>
 800556a:	462f      	mov	r7, r5
 800556c:	e7bf      	b.n	80054ee <_strtol_l.isra.0+0xe>
 800556e:	2c2b      	cmp	r4, #43	; 0x2b
 8005570:	bf04      	itt	eq
 8005572:	1cbd      	addeq	r5, r7, #2
 8005574:	787c      	ldrbeq	r4, [r7, #1]
 8005576:	461a      	mov	r2, r3
 8005578:	e7c9      	b.n	800550e <_strtol_l.isra.0+0x2e>
 800557a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800557e:	2b19      	cmp	r3, #25
 8005580:	d801      	bhi.n	8005586 <_strtol_l.isra.0+0xa6>
 8005582:	3c37      	subs	r4, #55	; 0x37
 8005584:	e7e2      	b.n	800554c <_strtol_l.isra.0+0x6c>
 8005586:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800558a:	2b19      	cmp	r3, #25
 800558c:	d804      	bhi.n	8005598 <_strtol_l.isra.0+0xb8>
 800558e:	3c57      	subs	r4, #87	; 0x57
 8005590:	e7dc      	b.n	800554c <_strtol_l.isra.0+0x6c>
 8005592:	f04f 37ff 	mov.w	r7, #4294967295
 8005596:	e7e5      	b.n	8005564 <_strtol_l.isra.0+0x84>
 8005598:	1c7b      	adds	r3, r7, #1
 800559a:	d108      	bne.n	80055ae <_strtol_l.isra.0+0xce>
 800559c:	2322      	movs	r3, #34	; 0x22
 800559e:	4608      	mov	r0, r1
 80055a0:	f8c8 3000 	str.w	r3, [r8]
 80055a4:	f1ba 0f00 	cmp.w	sl, #0
 80055a8:	d107      	bne.n	80055ba <_strtol_l.isra.0+0xda>
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	b102      	cbz	r2, 80055b2 <_strtol_l.isra.0+0xd2>
 80055b0:	4240      	negs	r0, r0
 80055b2:	f1ba 0f00 	cmp.w	sl, #0
 80055b6:	d0f8      	beq.n	80055aa <_strtol_l.isra.0+0xca>
 80055b8:	b10f      	cbz	r7, 80055be <_strtol_l.isra.0+0xde>
 80055ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80055be:	f8ca 9000 	str.w	r9, [sl]
 80055c2:	e7f2      	b.n	80055aa <_strtol_l.isra.0+0xca>
 80055c4:	2430      	movs	r4, #48	; 0x30
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	d1af      	bne.n	800552a <_strtol_l.isra.0+0x4a>
 80055ca:	2608      	movs	r6, #8
 80055cc:	e7ad      	b.n	800552a <_strtol_l.isra.0+0x4a>
 80055ce:	2c30      	cmp	r4, #48	; 0x30
 80055d0:	d0a3      	beq.n	800551a <_strtol_l.isra.0+0x3a>
 80055d2:	260a      	movs	r6, #10
 80055d4:	e7a9      	b.n	800552a <_strtol_l.isra.0+0x4a>
	...

080055d8 <_strtol_r>:
 80055d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055da:	4c06      	ldr	r4, [pc, #24]	; (80055f4 <_strtol_r+0x1c>)
 80055dc:	4d06      	ldr	r5, [pc, #24]	; (80055f8 <_strtol_r+0x20>)
 80055de:	6824      	ldr	r4, [r4, #0]
 80055e0:	6a24      	ldr	r4, [r4, #32]
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	bf08      	it	eq
 80055e6:	462c      	moveq	r4, r5
 80055e8:	9400      	str	r4, [sp, #0]
 80055ea:	f7ff ff79 	bl	80054e0 <_strtol_l.isra.0>
 80055ee:	b003      	add	sp, #12
 80055f0:	bd30      	pop	{r4, r5, pc}
 80055f2:	bf00      	nop
 80055f4:	2000002c 	.word	0x2000002c
 80055f8:	20000090 	.word	0x20000090

080055fc <quorem>:
 80055fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	6903      	ldr	r3, [r0, #16]
 8005602:	690c      	ldr	r4, [r1, #16]
 8005604:	4680      	mov	r8, r0
 8005606:	42a3      	cmp	r3, r4
 8005608:	f2c0 8084 	blt.w	8005714 <quorem+0x118>
 800560c:	3c01      	subs	r4, #1
 800560e:	f101 0714 	add.w	r7, r1, #20
 8005612:	f100 0614 	add.w	r6, r0, #20
 8005616:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800561a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800561e:	3501      	adds	r5, #1
 8005620:	fbb0 f5f5 	udiv	r5, r0, r5
 8005624:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005628:	eb06 030c 	add.w	r3, r6, ip
 800562c:	eb07 090c 	add.w	r9, r7, ip
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	b39d      	cbz	r5, 800569c <quorem+0xa0>
 8005634:	f04f 0a00 	mov.w	sl, #0
 8005638:	4638      	mov	r0, r7
 800563a:	46b6      	mov	lr, r6
 800563c:	46d3      	mov	fp, sl
 800563e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005642:	b293      	uxth	r3, r2
 8005644:	fb05 a303 	mla	r3, r5, r3, sl
 8005648:	0c12      	lsrs	r2, r2, #16
 800564a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800564e:	fb05 a202 	mla	r2, r5, r2, sl
 8005652:	b29b      	uxth	r3, r3
 8005654:	ebab 0303 	sub.w	r3, fp, r3
 8005658:	f8de b000 	ldr.w	fp, [lr]
 800565c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005660:	fa1f fb8b 	uxth.w	fp, fp
 8005664:	445b      	add	r3, fp
 8005666:	fa1f fb82 	uxth.w	fp, r2
 800566a:	f8de 2000 	ldr.w	r2, [lr]
 800566e:	4581      	cmp	r9, r0
 8005670:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800567e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005682:	f84e 3b04 	str.w	r3, [lr], #4
 8005686:	d2da      	bcs.n	800563e <quorem+0x42>
 8005688:	f856 300c 	ldr.w	r3, [r6, ip]
 800568c:	b933      	cbnz	r3, 800569c <quorem+0xa0>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	3b04      	subs	r3, #4
 8005692:	429e      	cmp	r6, r3
 8005694:	461a      	mov	r2, r3
 8005696:	d331      	bcc.n	80056fc <quorem+0x100>
 8005698:	f8c8 4010 	str.w	r4, [r8, #16]
 800569c:	4640      	mov	r0, r8
 800569e:	f001 fc7b 	bl	8006f98 <__mcmp>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	db26      	blt.n	80056f4 <quorem+0xf8>
 80056a6:	4630      	mov	r0, r6
 80056a8:	f04f 0c00 	mov.w	ip, #0
 80056ac:	3501      	adds	r5, #1
 80056ae:	f857 1b04 	ldr.w	r1, [r7], #4
 80056b2:	f8d0 e000 	ldr.w	lr, [r0]
 80056b6:	b28b      	uxth	r3, r1
 80056b8:	ebac 0303 	sub.w	r3, ip, r3
 80056bc:	fa1f f28e 	uxth.w	r2, lr
 80056c0:	4413      	add	r3, r2
 80056c2:	0c0a      	lsrs	r2, r1, #16
 80056c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056d2:	45b9      	cmp	r9, r7
 80056d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056d8:	f840 3b04 	str.w	r3, [r0], #4
 80056dc:	d2e7      	bcs.n	80056ae <quorem+0xb2>
 80056de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80056e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80056e6:	b92a      	cbnz	r2, 80056f4 <quorem+0xf8>
 80056e8:	3b04      	subs	r3, #4
 80056ea:	429e      	cmp	r6, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	d30b      	bcc.n	8005708 <quorem+0x10c>
 80056f0:	f8c8 4010 	str.w	r4, [r8, #16]
 80056f4:	4628      	mov	r0, r5
 80056f6:	b003      	add	sp, #12
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	3b04      	subs	r3, #4
 8005700:	2a00      	cmp	r2, #0
 8005702:	d1c9      	bne.n	8005698 <quorem+0x9c>
 8005704:	3c01      	subs	r4, #1
 8005706:	e7c4      	b.n	8005692 <quorem+0x96>
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	3b04      	subs	r3, #4
 800570c:	2a00      	cmp	r2, #0
 800570e:	d1ef      	bne.n	80056f0 <quorem+0xf4>
 8005710:	3c01      	subs	r4, #1
 8005712:	e7ea      	b.n	80056ea <quorem+0xee>
 8005714:	2000      	movs	r0, #0
 8005716:	e7ee      	b.n	80056f6 <quorem+0xfa>

08005718 <_dtoa_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	4616      	mov	r6, r2
 800571e:	461f      	mov	r7, r3
 8005720:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005722:	b095      	sub	sp, #84	; 0x54
 8005724:	4604      	mov	r4, r0
 8005726:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800572a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800572e:	b93d      	cbnz	r5, 8005740 <_dtoa_r+0x28>
 8005730:	2010      	movs	r0, #16
 8005732:	f001 f9ab 	bl	8006a8c <malloc>
 8005736:	6260      	str	r0, [r4, #36]	; 0x24
 8005738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800573c:	6005      	str	r5, [r0, #0]
 800573e:	60c5      	str	r5, [r0, #12]
 8005740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	b151      	cbz	r1, 800575c <_dtoa_r+0x44>
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	2301      	movs	r3, #1
 800574a:	4093      	lsls	r3, r2
 800574c:	604a      	str	r2, [r1, #4]
 800574e:	608b      	str	r3, [r1, #8]
 8005750:	4620      	mov	r0, r4
 8005752:	f001 fa02 	bl	8006b5a <_Bfree>
 8005756:	2200      	movs	r2, #0
 8005758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	1e3b      	subs	r3, r7, #0
 800575e:	bfaf      	iteee	ge
 8005760:	2300      	movge	r3, #0
 8005762:	2201      	movlt	r2, #1
 8005764:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005768:	9303      	strlt	r3, [sp, #12]
 800576a:	bfac      	ite	ge
 800576c:	f8c8 3000 	strge.w	r3, [r8]
 8005770:	f8c8 2000 	strlt.w	r2, [r8]
 8005774:	4bae      	ldr	r3, [pc, #696]	; (8005a30 <_dtoa_r+0x318>)
 8005776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800577a:	ea33 0308 	bics.w	r3, r3, r8
 800577e:	d11b      	bne.n	80057b8 <_dtoa_r+0xa0>
 8005780:	f242 730f 	movw	r3, #9999	; 0x270f
 8005784:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	b923      	cbnz	r3, 8005796 <_dtoa_r+0x7e>
 800578c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005790:	2800      	cmp	r0, #0
 8005792:	f000 8545 	beq.w	8006220 <_dtoa_r+0xb08>
 8005796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005798:	b953      	cbnz	r3, 80057b0 <_dtoa_r+0x98>
 800579a:	4ba6      	ldr	r3, [pc, #664]	; (8005a34 <_dtoa_r+0x31c>)
 800579c:	e021      	b.n	80057e2 <_dtoa_r+0xca>
 800579e:	4ba6      	ldr	r3, [pc, #664]	; (8005a38 <_dtoa_r+0x320>)
 80057a0:	9306      	str	r3, [sp, #24]
 80057a2:	3308      	adds	r3, #8
 80057a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	9806      	ldr	r0, [sp, #24]
 80057aa:	b015      	add	sp, #84	; 0x54
 80057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b0:	4ba0      	ldr	r3, [pc, #640]	; (8005a34 <_dtoa_r+0x31c>)
 80057b2:	9306      	str	r3, [sp, #24]
 80057b4:	3303      	adds	r3, #3
 80057b6:	e7f5      	b.n	80057a4 <_dtoa_r+0x8c>
 80057b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fb f966 	bl	8000a94 <__aeabi_dcmpeq>
 80057c8:	4682      	mov	sl, r0
 80057ca:	b160      	cbz	r0, 80057e6 <_dtoa_r+0xce>
 80057cc:	2301      	movs	r3, #1
 80057ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8520 	beq.w	800621a <_dtoa_r+0xb02>
 80057da:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <_dtoa_r+0x324>)
 80057dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	9306      	str	r3, [sp, #24]
 80057e4:	e7e0      	b.n	80057a8 <_dtoa_r+0x90>
 80057e6:	ab12      	add	r3, sp, #72	; 0x48
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	ab13      	add	r3, sp, #76	; 0x4c
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4632      	mov	r2, r6
 80057f0:	463b      	mov	r3, r7
 80057f2:	4620      	mov	r0, r4
 80057f4:	f001 fcbe 	bl	8007174 <__d2b>
 80057f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057fc:	4683      	mov	fp, r0
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d07d      	beq.n	80058fe <_dtoa_r+0x1e6>
 8005802:	46b0      	mov	r8, r6
 8005804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005808:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800580c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005810:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005814:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005818:	2200      	movs	r2, #0
 800581a:	4b89      	ldr	r3, [pc, #548]	; (8005a40 <_dtoa_r+0x328>)
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fa fd18 	bl	8000254 <__aeabi_dsub>
 8005824:	a37c      	add	r3, pc, #496	; (adr r3, 8005a18 <_dtoa_r+0x300>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fecb 	bl	80005c4 <__aeabi_dmul>
 800582e:	a37c      	add	r3, pc, #496	; (adr r3, 8005a20 <_dtoa_r+0x308>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fd10 	bl	8000258 <__adddf3>
 8005838:	4606      	mov	r6, r0
 800583a:	4628      	mov	r0, r5
 800583c:	460f      	mov	r7, r1
 800583e:	f7fa fe57 	bl	80004f0 <__aeabi_i2d>
 8005842:	a379      	add	r3, pc, #484	; (adr r3, 8005a28 <_dtoa_r+0x310>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa febc 	bl	80005c4 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4630      	mov	r0, r6
 8005852:	4639      	mov	r1, r7
 8005854:	f7fa fd00 	bl	8000258 <__adddf3>
 8005858:	4606      	mov	r6, r0
 800585a:	460f      	mov	r7, r1
 800585c:	f7fb f962 	bl	8000b24 <__aeabi_d2iz>
 8005860:	2200      	movs	r2, #0
 8005862:	4682      	mov	sl, r0
 8005864:	2300      	movs	r3, #0
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fb f91d 	bl	8000aa8 <__aeabi_dcmplt>
 800586e:	b148      	cbz	r0, 8005884 <_dtoa_r+0x16c>
 8005870:	4650      	mov	r0, sl
 8005872:	f7fa fe3d 	bl	80004f0 <__aeabi_i2d>
 8005876:	4632      	mov	r2, r6
 8005878:	463b      	mov	r3, r7
 800587a:	f7fb f90b 	bl	8000a94 <__aeabi_dcmpeq>
 800587e:	b908      	cbnz	r0, 8005884 <_dtoa_r+0x16c>
 8005880:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005884:	f1ba 0f16 	cmp.w	sl, #22
 8005888:	d85a      	bhi.n	8005940 <_dtoa_r+0x228>
 800588a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800588e:	496d      	ldr	r1, [pc, #436]	; (8005a44 <_dtoa_r+0x32c>)
 8005890:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005898:	f7fb f924 	bl	8000ae4 <__aeabi_dcmpgt>
 800589c:	2800      	cmp	r0, #0
 800589e:	d051      	beq.n	8005944 <_dtoa_r+0x22c>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058a6:	930d      	str	r3, [sp, #52]	; 0x34
 80058a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058aa:	1b5d      	subs	r5, r3, r5
 80058ac:	1e6b      	subs	r3, r5, #1
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	bf43      	ittte	mi
 80058b2:	2300      	movmi	r3, #0
 80058b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80058b8:	9307      	strmi	r3, [sp, #28]
 80058ba:	f04f 0900 	movpl.w	r9, #0
 80058be:	f1ba 0f00 	cmp.w	sl, #0
 80058c2:	db41      	blt.n	8005948 <_dtoa_r+0x230>
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80058ca:	4453      	add	r3, sl
 80058cc:	9307      	str	r3, [sp, #28]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9308      	str	r3, [sp, #32]
 80058d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	f200 808f 	bhi.w	80059f8 <_dtoa_r+0x2e0>
 80058da:	2b05      	cmp	r3, #5
 80058dc:	bfc4      	itt	gt
 80058de:	3b04      	subgt	r3, #4
 80058e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80058e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058e4:	bfc8      	it	gt
 80058e6:	2500      	movgt	r5, #0
 80058e8:	f1a3 0302 	sub.w	r3, r3, #2
 80058ec:	bfd8      	it	le
 80058ee:	2501      	movle	r5, #1
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	f200 808d 	bhi.w	8005a10 <_dtoa_r+0x2f8>
 80058f6:	e8df f003 	tbb	[pc, r3]
 80058fa:	7d7b      	.short	0x7d7b
 80058fc:	6f2f      	.short	0x6f2f
 80058fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005902:	441d      	add	r5, r3
 8005904:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005908:	2820      	cmp	r0, #32
 800590a:	dd13      	ble.n	8005934 <_dtoa_r+0x21c>
 800590c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	fa08 f800 	lsl.w	r8, r8, r0
 8005916:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800591a:	fa23 f000 	lsr.w	r0, r3, r0
 800591e:	ea48 0000 	orr.w	r0, r8, r0
 8005922:	f7fa fdd5 	bl	80004d0 <__aeabi_ui2d>
 8005926:	2301      	movs	r3, #1
 8005928:	4680      	mov	r8, r0
 800592a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800592e:	3d01      	subs	r5, #1
 8005930:	9310      	str	r3, [sp, #64]	; 0x40
 8005932:	e771      	b.n	8005818 <_dtoa_r+0x100>
 8005934:	9b02      	ldr	r3, [sp, #8]
 8005936:	f1c0 0020 	rsb	r0, r0, #32
 800593a:	fa03 f000 	lsl.w	r0, r3, r0
 800593e:	e7f0      	b.n	8005922 <_dtoa_r+0x20a>
 8005940:	2301      	movs	r3, #1
 8005942:	e7b0      	b.n	80058a6 <_dtoa_r+0x18e>
 8005944:	900d      	str	r0, [sp, #52]	; 0x34
 8005946:	e7af      	b.n	80058a8 <_dtoa_r+0x190>
 8005948:	f1ca 0300 	rsb	r3, sl, #0
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	2300      	movs	r3, #0
 8005950:	eba9 090a 	sub.w	r9, r9, sl
 8005954:	930c      	str	r3, [sp, #48]	; 0x30
 8005956:	e7bc      	b.n	80058d2 <_dtoa_r+0x1ba>
 8005958:	2301      	movs	r3, #1
 800595a:	9309      	str	r3, [sp, #36]	; 0x24
 800595c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800595e:	2b00      	cmp	r3, #0
 8005960:	dd74      	ble.n	8005a4c <_dtoa_r+0x334>
 8005962:	4698      	mov	r8, r3
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	2200      	movs	r2, #0
 8005968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800596a:	6072      	str	r2, [r6, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	f102 0014 	add.w	r0, r2, #20
 8005972:	4298      	cmp	r0, r3
 8005974:	6871      	ldr	r1, [r6, #4]
 8005976:	d96e      	bls.n	8005a56 <_dtoa_r+0x33e>
 8005978:	4620      	mov	r0, r4
 800597a:	f001 f8ba 	bl	8006af2 <_Balloc>
 800597e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005980:	6030      	str	r0, [r6, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f1b8 0f0e 	cmp.w	r8, #14
 8005988:	9306      	str	r3, [sp, #24]
 800598a:	f200 80ed 	bhi.w	8005b68 <_dtoa_r+0x450>
 800598e:	2d00      	cmp	r5, #0
 8005990:	f000 80ea 	beq.w	8005b68 <_dtoa_r+0x450>
 8005994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005998:	f1ba 0f00 	cmp.w	sl, #0
 800599c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80059a0:	dd77      	ble.n	8005a92 <_dtoa_r+0x37a>
 80059a2:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <_dtoa_r+0x32c>)
 80059a4:	f00a 030f 	and.w	r3, sl, #15
 80059a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80059ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059b0:	06f0      	lsls	r0, r6, #27
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059ba:	d568      	bpl.n	8005a8e <_dtoa_r+0x376>
 80059bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <_dtoa_r+0x330>)
 80059c2:	2503      	movs	r5, #3
 80059c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059c8:	f7fa ff26 	bl	8000818 <__aeabi_ddiv>
 80059cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d0:	f006 060f 	and.w	r6, r6, #15
 80059d4:	4f1c      	ldr	r7, [pc, #112]	; (8005a48 <_dtoa_r+0x330>)
 80059d6:	e04f      	b.n	8005a78 <_dtoa_r+0x360>
 80059d8:	2301      	movs	r3, #1
 80059da:	9309      	str	r3, [sp, #36]	; 0x24
 80059dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059de:	4453      	add	r3, sl
 80059e0:	f103 0801 	add.w	r8, r3, #1
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	4643      	mov	r3, r8
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bfb8      	it	lt
 80059ec:	2301      	movlt	r3, #1
 80059ee:	e7ba      	b.n	8005966 <_dtoa_r+0x24e>
 80059f0:	2300      	movs	r3, #0
 80059f2:	e7b2      	b.n	800595a <_dtoa_r+0x242>
 80059f4:	2300      	movs	r3, #0
 80059f6:	e7f0      	b.n	80059da <_dtoa_r+0x2c2>
 80059f8:	2501      	movs	r5, #1
 80059fa:	2300      	movs	r3, #0
 80059fc:	9509      	str	r5, [sp, #36]	; 0x24
 80059fe:	931e      	str	r3, [sp, #120]	; 0x78
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	2200      	movs	r2, #0
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	4698      	mov	r8, r3
 8005a0a:	2312      	movs	r3, #18
 8005a0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005a0e:	e7aa      	b.n	8005966 <_dtoa_r+0x24e>
 8005a10:	2301      	movs	r3, #1
 8005a12:	9309      	str	r3, [sp, #36]	; 0x24
 8005a14:	e7f4      	b.n	8005a00 <_dtoa_r+0x2e8>
 8005a16:	bf00      	nop
 8005a18:	636f4361 	.word	0x636f4361
 8005a1c:	3fd287a7 	.word	0x3fd287a7
 8005a20:	8b60c8b3 	.word	0x8b60c8b3
 8005a24:	3fc68a28 	.word	0x3fc68a28
 8005a28:	509f79fb 	.word	0x509f79fb
 8005a2c:	3fd34413 	.word	0x3fd34413
 8005a30:	7ff00000 	.word	0x7ff00000
 8005a34:	080080a1 	.word	0x080080a1
 8005a38:	08008098 	.word	0x08008098
 8005a3c:	08008019 	.word	0x08008019
 8005a40:	3ff80000 	.word	0x3ff80000
 8005a44:	08008140 	.word	0x08008140
 8005a48:	08008118 	.word	0x08008118
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	4698      	mov	r8, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	e7da      	b.n	8005a0c <_dtoa_r+0x2f4>
 8005a56:	3101      	adds	r1, #1
 8005a58:	6071      	str	r1, [r6, #4]
 8005a5a:	0052      	lsls	r2, r2, #1
 8005a5c:	e787      	b.n	800596e <_dtoa_r+0x256>
 8005a5e:	07f1      	lsls	r1, r6, #31
 8005a60:	d508      	bpl.n	8005a74 <_dtoa_r+0x35c>
 8005a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6a:	f7fa fdab 	bl	80005c4 <__aeabi_dmul>
 8005a6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a72:	3501      	adds	r5, #1
 8005a74:	1076      	asrs	r6, r6, #1
 8005a76:	3708      	adds	r7, #8
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	d1f0      	bne.n	8005a5e <_dtoa_r+0x346>
 8005a7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a84:	f7fa fec8 	bl	8000818 <__aeabi_ddiv>
 8005a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a8c:	e01b      	b.n	8005ac6 <_dtoa_r+0x3ae>
 8005a8e:	2502      	movs	r5, #2
 8005a90:	e7a0      	b.n	80059d4 <_dtoa_r+0x2bc>
 8005a92:	f000 80a4 	beq.w	8005bde <_dtoa_r+0x4c6>
 8005a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a9a:	f1ca 0600 	rsb	r6, sl, #0
 8005a9e:	4ba0      	ldr	r3, [pc, #640]	; (8005d20 <_dtoa_r+0x608>)
 8005aa0:	f006 020f 	and.w	r2, r6, #15
 8005aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f7fa fd8a 	bl	80005c4 <__aeabi_dmul>
 8005ab0:	2502      	movs	r5, #2
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab8:	4f9a      	ldr	r7, [pc, #616]	; (8005d24 <_dtoa_r+0x60c>)
 8005aba:	1136      	asrs	r6, r6, #4
 8005abc:	2e00      	cmp	r6, #0
 8005abe:	f040 8083 	bne.w	8005bc8 <_dtoa_r+0x4b0>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e0      	bne.n	8005a88 <_dtoa_r+0x370>
 8005ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 808a 	beq.w	8005be2 <_dtoa_r+0x4ca>
 8005ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ad2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ada:	2200      	movs	r2, #0
 8005adc:	4b92      	ldr	r3, [pc, #584]	; (8005d28 <_dtoa_r+0x610>)
 8005ade:	f7fa ffe3 	bl	8000aa8 <__aeabi_dcmplt>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d07d      	beq.n	8005be2 <_dtoa_r+0x4ca>
 8005ae6:	f1b8 0f00 	cmp.w	r8, #0
 8005aea:	d07a      	beq.n	8005be2 <_dtoa_r+0x4ca>
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd36      	ble.n	8005b60 <_dtoa_r+0x448>
 8005af2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005af6:	2200      	movs	r2, #0
 8005af8:	4b8c      	ldr	r3, [pc, #560]	; (8005d2c <_dtoa_r+0x614>)
 8005afa:	f7fa fd63 	bl	80005c4 <__aeabi_dmul>
 8005afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b02:	9e04      	ldr	r6, [sp, #16]
 8005b04:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005b08:	3501      	adds	r5, #1
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7fa fcf0 	bl	80004f0 <__aeabi_i2d>
 8005b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b14:	f7fa fd56 	bl	80005c4 <__aeabi_dmul>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4b85      	ldr	r3, [pc, #532]	; (8005d30 <_dtoa_r+0x618>)
 8005b1c:	f7fa fb9c 	bl	8000258 <__adddf3>
 8005b20:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005b24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b28:	950b      	str	r5, [sp, #44]	; 0x2c
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	d15c      	bne.n	8005be8 <_dtoa_r+0x4d0>
 8005b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	4b7f      	ldr	r3, [pc, #508]	; (8005d34 <_dtoa_r+0x61c>)
 8005b36:	f7fa fb8d 	bl	8000254 <__aeabi_dsub>
 8005b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b42:	f7fa ffcf 	bl	8000ae4 <__aeabi_dcmpgt>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8281 	bne.w	800604e <_dtoa_r+0x936>
 8005b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b52:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b56:	f7fa ffa7 	bl	8000aa8 <__aeabi_dcmplt>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f040 8275 	bne.w	800604a <_dtoa_r+0x932>
 8005b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f2c0 814b 	blt.w	8005e06 <_dtoa_r+0x6ee>
 8005b70:	f1ba 0f0e 	cmp.w	sl, #14
 8005b74:	f300 8147 	bgt.w	8005e06 <_dtoa_r+0x6ee>
 8005b78:	4b69      	ldr	r3, [pc, #420]	; (8005d20 <_dtoa_r+0x608>)
 8005b7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f280 80d7 	bge.w	8005d3c <_dtoa_r+0x624>
 8005b8e:	f1b8 0f00 	cmp.w	r8, #0
 8005b92:	f300 80d3 	bgt.w	8005d3c <_dtoa_r+0x624>
 8005b96:	f040 8257 	bne.w	8006048 <_dtoa_r+0x930>
 8005b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <_dtoa_r+0x61c>)
 8005ba2:	f7fa fd0f 	bl	80005c4 <__aeabi_dmul>
 8005ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005baa:	f7fa ff91 	bl	8000ad0 <__aeabi_dcmpge>
 8005bae:	4646      	mov	r6, r8
 8005bb0:	4647      	mov	r7, r8
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f040 822d 	bne.w	8006012 <_dtoa_r+0x8fa>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	9a06      	ldr	r2, [sp, #24]
 8005bbc:	1c5d      	adds	r5, r3, #1
 8005bbe:	2331      	movs	r3, #49	; 0x31
 8005bc0:	f10a 0a01 	add.w	sl, sl, #1
 8005bc4:	7013      	strb	r3, [r2, #0]
 8005bc6:	e228      	b.n	800601a <_dtoa_r+0x902>
 8005bc8:	07f2      	lsls	r2, r6, #31
 8005bca:	d505      	bpl.n	8005bd8 <_dtoa_r+0x4c0>
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	f7fa fcf8 	bl	80005c4 <__aeabi_dmul>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	3501      	adds	r5, #1
 8005bd8:	1076      	asrs	r6, r6, #1
 8005bda:	3708      	adds	r7, #8
 8005bdc:	e76e      	b.n	8005abc <_dtoa_r+0x3a4>
 8005bde:	2502      	movs	r5, #2
 8005be0:	e771      	b.n	8005ac6 <_dtoa_r+0x3ae>
 8005be2:	4657      	mov	r7, sl
 8005be4:	4646      	mov	r6, r8
 8005be6:	e790      	b.n	8005b0a <_dtoa_r+0x3f2>
 8005be8:	4b4d      	ldr	r3, [pc, #308]	; (8005d20 <_dtoa_r+0x608>)
 8005bea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d048      	beq.n	8005c8a <_dtoa_r+0x572>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	494e      	ldr	r1, [pc, #312]	; (8005d38 <_dtoa_r+0x620>)
 8005c00:	f7fa fe0a 	bl	8000818 <__aeabi_ddiv>
 8005c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c08:	f7fa fb24 	bl	8000254 <__aeabi_dsub>
 8005c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c10:	9d06      	ldr	r5, [sp, #24]
 8005c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c16:	f7fa ff85 	bl	8000b24 <__aeabi_d2iz>
 8005c1a:	9011      	str	r0, [sp, #68]	; 0x44
 8005c1c:	f7fa fc68 	bl	80004f0 <__aeabi_i2d>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c28:	f7fa fb14 	bl	8000254 <__aeabi_dsub>
 8005c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c32:	3330      	adds	r3, #48	; 0x30
 8005c34:	f805 3b01 	strb.w	r3, [r5], #1
 8005c38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c3c:	f7fa ff34 	bl	8000aa8 <__aeabi_dcmplt>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d163      	bne.n	8005d0c <_dtoa_r+0x5f4>
 8005c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4937      	ldr	r1, [pc, #220]	; (8005d28 <_dtoa_r+0x610>)
 8005c4c:	f7fa fb02 	bl	8000254 <__aeabi_dsub>
 8005c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c54:	f7fa ff28 	bl	8000aa8 <__aeabi_dcmplt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	f040 80b5 	bne.w	8005dc8 <_dtoa_r+0x6b0>
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	1aeb      	subs	r3, r5, r3
 8005c62:	429e      	cmp	r6, r3
 8005c64:	f77f af7c 	ble.w	8005b60 <_dtoa_r+0x448>
 8005c68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4b2f      	ldr	r3, [pc, #188]	; (8005d2c <_dtoa_r+0x614>)
 8005c70:	f7fa fca8 	bl	80005c4 <__aeabi_dmul>
 8005c74:	2200      	movs	r2, #0
 8005c76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7e:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <_dtoa_r+0x614>)
 8005c80:	f7fa fca0 	bl	80005c4 <__aeabi_dmul>
 8005c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c88:	e7c3      	b.n	8005c12 <_dtoa_r+0x4fa>
 8005c8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c8e:	f7fa fc99 	bl	80005c4 <__aeabi_dmul>
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c98:	199d      	adds	r5, r3, r6
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca0:	f7fa ff40 	bl	8000b24 <__aeabi_d2iz>
 8005ca4:	9011      	str	r0, [sp, #68]	; 0x44
 8005ca6:	f7fa fc23 	bl	80004f0 <__aeabi_i2d>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa facf 	bl	8000254 <__aeabi_dsub>
 8005cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cbc:	3330      	adds	r3, #48	; 0x30
 8005cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8005cc2:	42ae      	cmp	r6, r5
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	d124      	bne.n	8005d14 <_dtoa_r+0x5fc>
 8005cca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cce:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <_dtoa_r+0x620>)
 8005cd0:	f7fa fac2 	bl	8000258 <__adddf3>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cdc:	f7fa ff02 	bl	8000ae4 <__aeabi_dcmpgt>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d171      	bne.n	8005dc8 <_dtoa_r+0x6b0>
 8005ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ce8:	2000      	movs	r0, #0
 8005cea:	4913      	ldr	r1, [pc, #76]	; (8005d38 <_dtoa_r+0x620>)
 8005cec:	f7fa fab2 	bl	8000254 <__aeabi_dsub>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf8:	f7fa fed6 	bl	8000aa8 <__aeabi_dcmplt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f43f af2f 	beq.w	8005b60 <_dtoa_r+0x448>
 8005d02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d06:	1e6a      	subs	r2, r5, #1
 8005d08:	2b30      	cmp	r3, #48	; 0x30
 8005d0a:	d001      	beq.n	8005d10 <_dtoa_r+0x5f8>
 8005d0c:	46ba      	mov	sl, r7
 8005d0e:	e04a      	b.n	8005da6 <_dtoa_r+0x68e>
 8005d10:	4615      	mov	r5, r2
 8005d12:	e7f6      	b.n	8005d02 <_dtoa_r+0x5ea>
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <_dtoa_r+0x614>)
 8005d16:	f7fa fc55 	bl	80005c4 <__aeabi_dmul>
 8005d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1e:	e7bd      	b.n	8005c9c <_dtoa_r+0x584>
 8005d20:	08008140 	.word	0x08008140
 8005d24:	08008118 	.word	0x08008118
 8005d28:	3ff00000 	.word	0x3ff00000
 8005d2c:	40240000 	.word	0x40240000
 8005d30:	401c0000 	.word	0x401c0000
 8005d34:	40140000 	.word	0x40140000
 8005d38:	3fe00000 	.word	0x3fe00000
 8005d3c:	9d06      	ldr	r5, [sp, #24]
 8005d3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d46:	4630      	mov	r0, r6
 8005d48:	4639      	mov	r1, r7
 8005d4a:	f7fa fd65 	bl	8000818 <__aeabi_ddiv>
 8005d4e:	f7fa fee9 	bl	8000b24 <__aeabi_d2iz>
 8005d52:	4681      	mov	r9, r0
 8005d54:	f7fa fbcc 	bl	80004f0 <__aeabi_i2d>
 8005d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d5c:	f7fa fc32 	bl	80005c4 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fa74 	bl	8000254 <__aeabi_dsub>
 8005d6c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005d70:	f805 6b01 	strb.w	r6, [r5], #1
 8005d74:	9e06      	ldr	r6, [sp, #24]
 8005d76:	4602      	mov	r2, r0
 8005d78:	1bae      	subs	r6, r5, r6
 8005d7a:	45b0      	cmp	r8, r6
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	d135      	bne.n	8005dec <_dtoa_r+0x6d4>
 8005d80:	f7fa fa6a 	bl	8000258 <__adddf3>
 8005d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d88:	4606      	mov	r6, r0
 8005d8a:	460f      	mov	r7, r1
 8005d8c:	f7fa feaa 	bl	8000ae4 <__aeabi_dcmpgt>
 8005d90:	b9c8      	cbnz	r0, 8005dc6 <_dtoa_r+0x6ae>
 8005d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d96:	4630      	mov	r0, r6
 8005d98:	4639      	mov	r1, r7
 8005d9a:	f7fa fe7b 	bl	8000a94 <__aeabi_dcmpeq>
 8005d9e:	b110      	cbz	r0, 8005da6 <_dtoa_r+0x68e>
 8005da0:	f019 0f01 	tst.w	r9, #1
 8005da4:	d10f      	bne.n	8005dc6 <_dtoa_r+0x6ae>
 8005da6:	4659      	mov	r1, fp
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fed6 	bl	8006b5a <_Bfree>
 8005dae:	2300      	movs	r3, #0
 8005db0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005db2:	702b      	strb	r3, [r5, #0]
 8005db4:	f10a 0301 	add.w	r3, sl, #1
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f43f acf3 	beq.w	80057a8 <_dtoa_r+0x90>
 8005dc2:	601d      	str	r5, [r3, #0]
 8005dc4:	e4f0      	b.n	80057a8 <_dtoa_r+0x90>
 8005dc6:	4657      	mov	r7, sl
 8005dc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005dcc:	1e6b      	subs	r3, r5, #1
 8005dce:	2a39      	cmp	r2, #57	; 0x39
 8005dd0:	d106      	bne.n	8005de0 <_dtoa_r+0x6c8>
 8005dd2:	9a06      	ldr	r2, [sp, #24]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d107      	bne.n	8005de8 <_dtoa_r+0x6d0>
 8005dd8:	2330      	movs	r3, #48	; 0x30
 8005dda:	7013      	strb	r3, [r2, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	3701      	adds	r7, #1
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	3201      	adds	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e791      	b.n	8005d0c <_dtoa_r+0x5f4>
 8005de8:	461d      	mov	r5, r3
 8005dea:	e7ed      	b.n	8005dc8 <_dtoa_r+0x6b0>
 8005dec:	2200      	movs	r2, #0
 8005dee:	4b99      	ldr	r3, [pc, #612]	; (8006054 <_dtoa_r+0x93c>)
 8005df0:	f7fa fbe8 	bl	80005c4 <__aeabi_dmul>
 8005df4:	2200      	movs	r2, #0
 8005df6:	2300      	movs	r3, #0
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	f7fa fe4a 	bl	8000a94 <__aeabi_dcmpeq>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d09e      	beq.n	8005d42 <_dtoa_r+0x62a>
 8005e04:	e7cf      	b.n	8005da6 <_dtoa_r+0x68e>
 8005e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	f000 8088 	beq.w	8005f1e <_dtoa_r+0x806>
 8005e0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e10:	2a01      	cmp	r2, #1
 8005e12:	dc6d      	bgt.n	8005ef0 <_dtoa_r+0x7d8>
 8005e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	d066      	beq.n	8005ee8 <_dtoa_r+0x7d0>
 8005e1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e1e:	464d      	mov	r5, r9
 8005e20:	9e08      	ldr	r6, [sp, #32]
 8005e22:	9a07      	ldr	r2, [sp, #28]
 8005e24:	2101      	movs	r1, #1
 8005e26:	441a      	add	r2, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4499      	add	r9, r3
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	f000 ff72 	bl	8006d16 <__i2b>
 8005e32:	4607      	mov	r7, r0
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	dd0b      	ble.n	8005e50 <_dtoa_r+0x738>
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dd08      	ble.n	8005e50 <_dtoa_r+0x738>
 8005e3e:	42ab      	cmp	r3, r5
 8005e40:	bfa8      	it	ge
 8005e42:	462b      	movge	r3, r5
 8005e44:	9a07      	ldr	r2, [sp, #28]
 8005e46:	eba9 0903 	sub.w	r9, r9, r3
 8005e4a:	1aed      	subs	r5, r5, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	b1eb      	cbz	r3, 8005e90 <_dtoa_r+0x778>
 8005e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d065      	beq.n	8005f26 <_dtoa_r+0x80e>
 8005e5a:	b18e      	cbz	r6, 8005e80 <_dtoa_r+0x768>
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fff7 	bl	8006e54 <__pow5mult>
 8005e66:	465a      	mov	r2, fp
 8005e68:	4601      	mov	r1, r0
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 ff5b 	bl	8006d28 <__multiply>
 8005e72:	4659      	mov	r1, fp
 8005e74:	900a      	str	r0, [sp, #40]	; 0x28
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 fe6f 	bl	8006b5a <_Bfree>
 8005e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7e:	469b      	mov	fp, r3
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	1b9a      	subs	r2, r3, r6
 8005e84:	d004      	beq.n	8005e90 <_dtoa_r+0x778>
 8005e86:	4659      	mov	r1, fp
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 ffe3 	bl	8006e54 <__pow5mult>
 8005e8e:	4683      	mov	fp, r0
 8005e90:	2101      	movs	r1, #1
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 ff3f 	bl	8006d16 <__i2b>
 8005e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 81c6 	beq.w	800622e <_dtoa_r+0xb16>
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 ffd4 	bl	8006e54 <__pow5mult>
 8005eac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eae:	4606      	mov	r6, r0
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	dc3e      	bgt.n	8005f32 <_dtoa_r+0x81a>
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d137      	bne.n	8005f2a <_dtoa_r+0x812>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d134      	bne.n	8005f2e <_dtoa_r+0x816>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eca:	0d1b      	lsrs	r3, r3, #20
 8005ecc:	051b      	lsls	r3, r3, #20
 8005ece:	b12b      	cbz	r3, 8005edc <_dtoa_r+0x7c4>
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	f109 0901 	add.w	r9, r9, #1
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	2301      	movs	r3, #1
 8005edc:	9308      	str	r3, [sp, #32]
 8005ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d128      	bne.n	8005f36 <_dtoa_r+0x81e>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e02e      	b.n	8005f46 <_dtoa_r+0x82e>
 8005ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eee:	e796      	b.n	8005e1e <_dtoa_r+0x706>
 8005ef0:	9b08      	ldr	r3, [sp, #32]
 8005ef2:	f108 36ff 	add.w	r6, r8, #4294967295
 8005ef6:	42b3      	cmp	r3, r6
 8005ef8:	bfb7      	itett	lt
 8005efa:	9b08      	ldrlt	r3, [sp, #32]
 8005efc:	1b9e      	subge	r6, r3, r6
 8005efe:	1af2      	sublt	r2, r6, r3
 8005f00:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005f02:	bfbf      	itttt	lt
 8005f04:	9608      	strlt	r6, [sp, #32]
 8005f06:	189b      	addlt	r3, r3, r2
 8005f08:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005f0a:	2600      	movlt	r6, #0
 8005f0c:	f1b8 0f00 	cmp.w	r8, #0
 8005f10:	bfb9      	ittee	lt
 8005f12:	eba9 0508 	sublt.w	r5, r9, r8
 8005f16:	2300      	movlt	r3, #0
 8005f18:	464d      	movge	r5, r9
 8005f1a:	4643      	movge	r3, r8
 8005f1c:	e781      	b.n	8005e22 <_dtoa_r+0x70a>
 8005f1e:	9e08      	ldr	r6, [sp, #32]
 8005f20:	464d      	mov	r5, r9
 8005f22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f24:	e786      	b.n	8005e34 <_dtoa_r+0x71c>
 8005f26:	9a08      	ldr	r2, [sp, #32]
 8005f28:	e7ad      	b.n	8005e86 <_dtoa_r+0x76e>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e7d6      	b.n	8005edc <_dtoa_r+0x7c4>
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	e7d4      	b.n	8005edc <_dtoa_r+0x7c4>
 8005f32:	2300      	movs	r3, #0
 8005f34:	9308      	str	r3, [sp, #32]
 8005f36:	6933      	ldr	r3, [r6, #16]
 8005f38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f3c:	6918      	ldr	r0, [r3, #16]
 8005f3e:	f000 fe9c 	bl	8006c7a <__hi0bits>
 8005f42:	f1c0 0020 	rsb	r0, r0, #32
 8005f46:	9b07      	ldr	r3, [sp, #28]
 8005f48:	4418      	add	r0, r3
 8005f4a:	f010 001f 	ands.w	r0, r0, #31
 8005f4e:	d047      	beq.n	8005fe0 <_dtoa_r+0x8c8>
 8005f50:	f1c0 0320 	rsb	r3, r0, #32
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	dd3b      	ble.n	8005fd0 <_dtoa_r+0x8b8>
 8005f58:	9b07      	ldr	r3, [sp, #28]
 8005f5a:	f1c0 001c 	rsb	r0, r0, #28
 8005f5e:	4481      	add	r9, r0
 8005f60:	4405      	add	r5, r0
 8005f62:	4403      	add	r3, r0
 8005f64:	9307      	str	r3, [sp, #28]
 8005f66:	f1b9 0f00 	cmp.w	r9, #0
 8005f6a:	dd05      	ble.n	8005f78 <_dtoa_r+0x860>
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	464a      	mov	r2, r9
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 ffbd 	bl	8006ef0 <__lshift>
 8005f76:	4683      	mov	fp, r0
 8005f78:	9b07      	ldr	r3, [sp, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dd05      	ble.n	8005f8a <_dtoa_r+0x872>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	461a      	mov	r2, r3
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 ffb4 	bl	8006ef0 <__lshift>
 8005f88:	4606      	mov	r6, r0
 8005f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f8c:	b353      	cbz	r3, 8005fe4 <_dtoa_r+0x8cc>
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4658      	mov	r0, fp
 8005f92:	f001 f801 	bl	8006f98 <__mcmp>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	da24      	bge.n	8005fe4 <_dtoa_r+0x8cc>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fdf1 	bl	8006b88 <__multadd>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fac:	4683      	mov	fp, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8144 	beq.w	800623c <_dtoa_r+0xb24>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	220a      	movs	r2, #10
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fde4 	bl	8006b88 <__multadd>
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dc4d      	bgt.n	8006064 <_dtoa_r+0x94c>
 8005fc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	dd4a      	ble.n	8006064 <_dtoa_r+0x94c>
 8005fce:	e011      	b.n	8005ff4 <_dtoa_r+0x8dc>
 8005fd0:	d0c9      	beq.n	8005f66 <_dtoa_r+0x84e>
 8005fd2:	9a07      	ldr	r2, [sp, #28]
 8005fd4:	331c      	adds	r3, #28
 8005fd6:	441a      	add	r2, r3
 8005fd8:	4499      	add	r9, r3
 8005fda:	441d      	add	r5, r3
 8005fdc:	4613      	mov	r3, r2
 8005fde:	e7c1      	b.n	8005f64 <_dtoa_r+0x84c>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	e7f6      	b.n	8005fd2 <_dtoa_r+0x8ba>
 8005fe4:	f1b8 0f00 	cmp.w	r8, #0
 8005fe8:	dc36      	bgt.n	8006058 <_dtoa_r+0x940>
 8005fea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	dd33      	ble.n	8006058 <_dtoa_r+0x940>
 8005ff0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	b963      	cbnz	r3, 8006012 <_dtoa_r+0x8fa>
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fdc3 	bl	8006b88 <__multadd>
 8006002:	4601      	mov	r1, r0
 8006004:	4606      	mov	r6, r0
 8006006:	4658      	mov	r0, fp
 8006008:	f000 ffc6 	bl	8006f98 <__mcmp>
 800600c:	2800      	cmp	r0, #0
 800600e:	f73f add3 	bgt.w	8005bb8 <_dtoa_r+0x4a0>
 8006012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006014:	9d06      	ldr	r5, [sp, #24]
 8006016:	ea6f 0a03 	mvn.w	sl, r3
 800601a:	f04f 0900 	mov.w	r9, #0
 800601e:	4631      	mov	r1, r6
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fd9a 	bl	8006b5a <_Bfree>
 8006026:	2f00      	cmp	r7, #0
 8006028:	f43f aebd 	beq.w	8005da6 <_dtoa_r+0x68e>
 800602c:	f1b9 0f00 	cmp.w	r9, #0
 8006030:	d005      	beq.n	800603e <_dtoa_r+0x926>
 8006032:	45b9      	cmp	r9, r7
 8006034:	d003      	beq.n	800603e <_dtoa_r+0x926>
 8006036:	4649      	mov	r1, r9
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fd8e 	bl	8006b5a <_Bfree>
 800603e:	4639      	mov	r1, r7
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fd8a 	bl	8006b5a <_Bfree>
 8006046:	e6ae      	b.n	8005da6 <_dtoa_r+0x68e>
 8006048:	2600      	movs	r6, #0
 800604a:	4637      	mov	r7, r6
 800604c:	e7e1      	b.n	8006012 <_dtoa_r+0x8fa>
 800604e:	46ba      	mov	sl, r7
 8006050:	4637      	mov	r7, r6
 8006052:	e5b1      	b.n	8005bb8 <_dtoa_r+0x4a0>
 8006054:	40240000 	.word	0x40240000
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	f8cd 8010 	str.w	r8, [sp, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80f3 	beq.w	800624a <_dtoa_r+0xb32>
 8006064:	2d00      	cmp	r5, #0
 8006066:	dd05      	ble.n	8006074 <_dtoa_r+0x95c>
 8006068:	4639      	mov	r1, r7
 800606a:	462a      	mov	r2, r5
 800606c:	4620      	mov	r0, r4
 800606e:	f000 ff3f 	bl	8006ef0 <__lshift>
 8006072:	4607      	mov	r7, r0
 8006074:	9b08      	ldr	r3, [sp, #32]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04c      	beq.n	8006114 <_dtoa_r+0x9fc>
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fd38 	bl	8006af2 <_Balloc>
 8006082:	4605      	mov	r5, r0
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	f107 010c 	add.w	r1, r7, #12
 800608a:	3202      	adds	r2, #2
 800608c:	0092      	lsls	r2, r2, #2
 800608e:	300c      	adds	r0, #12
 8006090:	f000 fd24 	bl	8006adc <memcpy>
 8006094:	2201      	movs	r2, #1
 8006096:	4629      	mov	r1, r5
 8006098:	4620      	mov	r0, r4
 800609a:	f000 ff29 	bl	8006ef0 <__lshift>
 800609e:	46b9      	mov	r9, r7
 80060a0:	4607      	mov	r7, r0
 80060a2:	9b06      	ldr	r3, [sp, #24]
 80060a4:	9307      	str	r3, [sp, #28]
 80060a6:	9b02      	ldr	r3, [sp, #8]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	9308      	str	r3, [sp, #32]
 80060ae:	4631      	mov	r1, r6
 80060b0:	4658      	mov	r0, fp
 80060b2:	f7ff faa3 	bl	80055fc <quorem>
 80060b6:	4649      	mov	r1, r9
 80060b8:	4605      	mov	r5, r0
 80060ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060be:	4658      	mov	r0, fp
 80060c0:	f000 ff6a 	bl	8006f98 <__mcmp>
 80060c4:	463a      	mov	r2, r7
 80060c6:	9002      	str	r0, [sp, #8]
 80060c8:	4631      	mov	r1, r6
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 ff7e 	bl	8006fcc <__mdiff>
 80060d0:	68c3      	ldr	r3, [r0, #12]
 80060d2:	4602      	mov	r2, r0
 80060d4:	bb03      	cbnz	r3, 8006118 <_dtoa_r+0xa00>
 80060d6:	4601      	mov	r1, r0
 80060d8:	9009      	str	r0, [sp, #36]	; 0x24
 80060da:	4658      	mov	r0, fp
 80060dc:	f000 ff5c 	bl	8006f98 <__mcmp>
 80060e0:	4603      	mov	r3, r0
 80060e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e4:	4611      	mov	r1, r2
 80060e6:	4620      	mov	r0, r4
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	f000 fd36 	bl	8006b5a <_Bfree>
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	b9a3      	cbnz	r3, 800611c <_dtoa_r+0xa04>
 80060f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060f4:	b992      	cbnz	r2, 800611c <_dtoa_r+0xa04>
 80060f6:	9a08      	ldr	r2, [sp, #32]
 80060f8:	b982      	cbnz	r2, 800611c <_dtoa_r+0xa04>
 80060fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060fe:	d029      	beq.n	8006154 <_dtoa_r+0xa3c>
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd01      	ble.n	800610a <_dtoa_r+0x9f2>
 8006106:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800610a:	9b07      	ldr	r3, [sp, #28]
 800610c:	1c5d      	adds	r5, r3, #1
 800610e:	f883 8000 	strb.w	r8, [r3]
 8006112:	e784      	b.n	800601e <_dtoa_r+0x906>
 8006114:	4638      	mov	r0, r7
 8006116:	e7c2      	b.n	800609e <_dtoa_r+0x986>
 8006118:	2301      	movs	r3, #1
 800611a:	e7e3      	b.n	80060e4 <_dtoa_r+0x9cc>
 800611c:	9a02      	ldr	r2, [sp, #8]
 800611e:	2a00      	cmp	r2, #0
 8006120:	db04      	blt.n	800612c <_dtoa_r+0xa14>
 8006122:	d123      	bne.n	800616c <_dtoa_r+0xa54>
 8006124:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006126:	bb0a      	cbnz	r2, 800616c <_dtoa_r+0xa54>
 8006128:	9a08      	ldr	r2, [sp, #32]
 800612a:	b9fa      	cbnz	r2, 800616c <_dtoa_r+0xa54>
 800612c:	2b00      	cmp	r3, #0
 800612e:	ddec      	ble.n	800610a <_dtoa_r+0x9f2>
 8006130:	4659      	mov	r1, fp
 8006132:	2201      	movs	r2, #1
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fedb 	bl	8006ef0 <__lshift>
 800613a:	4631      	mov	r1, r6
 800613c:	4683      	mov	fp, r0
 800613e:	f000 ff2b 	bl	8006f98 <__mcmp>
 8006142:	2800      	cmp	r0, #0
 8006144:	dc03      	bgt.n	800614e <_dtoa_r+0xa36>
 8006146:	d1e0      	bne.n	800610a <_dtoa_r+0x9f2>
 8006148:	f018 0f01 	tst.w	r8, #1
 800614c:	d0dd      	beq.n	800610a <_dtoa_r+0x9f2>
 800614e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006152:	d1d8      	bne.n	8006106 <_dtoa_r+0x9ee>
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	1c5d      	adds	r5, r3, #1
 800615a:	2339      	movs	r3, #57	; 0x39
 800615c:	7013      	strb	r3, [r2, #0]
 800615e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006162:	1e6a      	subs	r2, r5, #1
 8006164:	2b39      	cmp	r3, #57	; 0x39
 8006166:	d04d      	beq.n	8006204 <_dtoa_r+0xaec>
 8006168:	3301      	adds	r3, #1
 800616a:	e052      	b.n	8006212 <_dtoa_r+0xafa>
 800616c:	9a07      	ldr	r2, [sp, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f102 0501 	add.w	r5, r2, #1
 8006174:	dd06      	ble.n	8006184 <_dtoa_r+0xa6c>
 8006176:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800617a:	d0eb      	beq.n	8006154 <_dtoa_r+0xa3c>
 800617c:	f108 0801 	add.w	r8, r8, #1
 8006180:	9b07      	ldr	r3, [sp, #28]
 8006182:	e7c4      	b.n	800610e <_dtoa_r+0x9f6>
 8006184:	9b06      	ldr	r3, [sp, #24]
 8006186:	9a04      	ldr	r2, [sp, #16]
 8006188:	1aeb      	subs	r3, r5, r3
 800618a:	4293      	cmp	r3, r2
 800618c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006190:	d021      	beq.n	80061d6 <_dtoa_r+0xabe>
 8006192:	4659      	mov	r1, fp
 8006194:	2300      	movs	r3, #0
 8006196:	220a      	movs	r2, #10
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fcf5 	bl	8006b88 <__multadd>
 800619e:	45b9      	cmp	r9, r7
 80061a0:	4683      	mov	fp, r0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	f04f 020a 	mov.w	r2, #10
 80061aa:	4649      	mov	r1, r9
 80061ac:	4620      	mov	r0, r4
 80061ae:	d105      	bne.n	80061bc <_dtoa_r+0xaa4>
 80061b0:	f000 fcea 	bl	8006b88 <__multadd>
 80061b4:	4681      	mov	r9, r0
 80061b6:	4607      	mov	r7, r0
 80061b8:	9507      	str	r5, [sp, #28]
 80061ba:	e778      	b.n	80060ae <_dtoa_r+0x996>
 80061bc:	f000 fce4 	bl	8006b88 <__multadd>
 80061c0:	4639      	mov	r1, r7
 80061c2:	4681      	mov	r9, r0
 80061c4:	2300      	movs	r3, #0
 80061c6:	220a      	movs	r2, #10
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fcdd 	bl	8006b88 <__multadd>
 80061ce:	4607      	mov	r7, r0
 80061d0:	e7f2      	b.n	80061b8 <_dtoa_r+0xaa0>
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	4659      	mov	r1, fp
 80061d8:	2201      	movs	r2, #1
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fe88 	bl	8006ef0 <__lshift>
 80061e0:	4631      	mov	r1, r6
 80061e2:	4683      	mov	fp, r0
 80061e4:	f000 fed8 	bl	8006f98 <__mcmp>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	dcb8      	bgt.n	800615e <_dtoa_r+0xa46>
 80061ec:	d102      	bne.n	80061f4 <_dtoa_r+0xadc>
 80061ee:	f018 0f01 	tst.w	r8, #1
 80061f2:	d1b4      	bne.n	800615e <_dtoa_r+0xa46>
 80061f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061f8:	1e6a      	subs	r2, r5, #1
 80061fa:	2b30      	cmp	r3, #48	; 0x30
 80061fc:	f47f af0f 	bne.w	800601e <_dtoa_r+0x906>
 8006200:	4615      	mov	r5, r2
 8006202:	e7f7      	b.n	80061f4 <_dtoa_r+0xadc>
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	4293      	cmp	r3, r2
 8006208:	d105      	bne.n	8006216 <_dtoa_r+0xafe>
 800620a:	2331      	movs	r3, #49	; 0x31
 800620c:	9a06      	ldr	r2, [sp, #24]
 800620e:	f10a 0a01 	add.w	sl, sl, #1
 8006212:	7013      	strb	r3, [r2, #0]
 8006214:	e703      	b.n	800601e <_dtoa_r+0x906>
 8006216:	4615      	mov	r5, r2
 8006218:	e7a1      	b.n	800615e <_dtoa_r+0xa46>
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <_dtoa_r+0xb60>)
 800621c:	f7ff bae1 	b.w	80057e2 <_dtoa_r+0xca>
 8006220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006222:	2b00      	cmp	r3, #0
 8006224:	f47f aabb 	bne.w	800579e <_dtoa_r+0x86>
 8006228:	4b14      	ldr	r3, [pc, #80]	; (800627c <_dtoa_r+0xb64>)
 800622a:	f7ff bada 	b.w	80057e2 <_dtoa_r+0xca>
 800622e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006230:	2b01      	cmp	r3, #1
 8006232:	f77f ae3f 	ble.w	8005eb4 <_dtoa_r+0x79c>
 8006236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006238:	9308      	str	r3, [sp, #32]
 800623a:	e653      	b.n	8005ee4 <_dtoa_r+0x7cc>
 800623c:	9b04      	ldr	r3, [sp, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dc03      	bgt.n	800624a <_dtoa_r+0xb32>
 8006242:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006244:	2b02      	cmp	r3, #2
 8006246:	f73f aed5 	bgt.w	8005ff4 <_dtoa_r+0x8dc>
 800624a:	9d06      	ldr	r5, [sp, #24]
 800624c:	4631      	mov	r1, r6
 800624e:	4658      	mov	r0, fp
 8006250:	f7ff f9d4 	bl	80055fc <quorem>
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800625a:	f805 8b01 	strb.w	r8, [r5], #1
 800625e:	9a04      	ldr	r2, [sp, #16]
 8006260:	1aeb      	subs	r3, r5, r3
 8006262:	429a      	cmp	r2, r3
 8006264:	ddb5      	ble.n	80061d2 <_dtoa_r+0xaba>
 8006266:	4659      	mov	r1, fp
 8006268:	2300      	movs	r3, #0
 800626a:	220a      	movs	r2, #10
 800626c:	4620      	mov	r0, r4
 800626e:	f000 fc8b 	bl	8006b88 <__multadd>
 8006272:	4683      	mov	fp, r0
 8006274:	e7ea      	b.n	800624c <_dtoa_r+0xb34>
 8006276:	bf00      	nop
 8006278:	08008018 	.word	0x08008018
 800627c:	08008098 	.word	0x08008098

08006280 <std>:
 8006280:	2300      	movs	r3, #0
 8006282:	b510      	push	{r4, lr}
 8006284:	4604      	mov	r4, r0
 8006286:	e9c0 3300 	strd	r3, r3, [r0]
 800628a:	6083      	str	r3, [r0, #8]
 800628c:	8181      	strh	r1, [r0, #12]
 800628e:	6643      	str	r3, [r0, #100]	; 0x64
 8006290:	81c2      	strh	r2, [r0, #14]
 8006292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006296:	6183      	str	r3, [r0, #24]
 8006298:	4619      	mov	r1, r3
 800629a:	2208      	movs	r2, #8
 800629c:	305c      	adds	r0, #92	; 0x5c
 800629e:	f7fd fc77 	bl	8003b90 <memset>
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <std+0x38>)
 80062a4:	6224      	str	r4, [r4, #32]
 80062a6:	6263      	str	r3, [r4, #36]	; 0x24
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <std+0x3c>)
 80062aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <std+0x40>)
 80062ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <std+0x44>)
 80062b2:	6323      	str	r3, [r4, #48]	; 0x30
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	bf00      	nop
 80062b8:	0800798d 	.word	0x0800798d
 80062bc:	080079af 	.word	0x080079af
 80062c0:	080079e7 	.word	0x080079e7
 80062c4:	08007a0b 	.word	0x08007a0b

080062c8 <_cleanup_r>:
 80062c8:	4901      	ldr	r1, [pc, #4]	; (80062d0 <_cleanup_r+0x8>)
 80062ca:	f000 b885 	b.w	80063d8 <_fwalk_reent>
 80062ce:	bf00      	nop
 80062d0:	08007d25 	.word	0x08007d25

080062d4 <__sfmoreglue>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	2568      	movs	r5, #104	; 0x68
 80062d8:	1e4a      	subs	r2, r1, #1
 80062da:	4355      	muls	r5, r2
 80062dc:	460e      	mov	r6, r1
 80062de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062e2:	f001 f859 	bl	8007398 <_malloc_r>
 80062e6:	4604      	mov	r4, r0
 80062e8:	b140      	cbz	r0, 80062fc <__sfmoreglue+0x28>
 80062ea:	2100      	movs	r1, #0
 80062ec:	e9c0 1600 	strd	r1, r6, [r0]
 80062f0:	300c      	adds	r0, #12
 80062f2:	60a0      	str	r0, [r4, #8]
 80062f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062f8:	f7fd fc4a 	bl	8003b90 <memset>
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd70      	pop	{r4, r5, r6, pc}

08006300 <__sinit>:
 8006300:	6983      	ldr	r3, [r0, #24]
 8006302:	b510      	push	{r4, lr}
 8006304:	4604      	mov	r4, r0
 8006306:	bb33      	cbnz	r3, 8006356 <__sinit+0x56>
 8006308:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800630c:	6503      	str	r3, [r0, #80]	; 0x50
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <__sinit+0x58>)
 8006310:	4a12      	ldr	r2, [pc, #72]	; (800635c <__sinit+0x5c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6282      	str	r2, [r0, #40]	; 0x28
 8006316:	4298      	cmp	r0, r3
 8006318:	bf04      	itt	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	6183      	streq	r3, [r0, #24]
 800631e:	f000 f81f 	bl	8006360 <__sfp>
 8006322:	6060      	str	r0, [r4, #4]
 8006324:	4620      	mov	r0, r4
 8006326:	f000 f81b 	bl	8006360 <__sfp>
 800632a:	60a0      	str	r0, [r4, #8]
 800632c:	4620      	mov	r0, r4
 800632e:	f000 f817 	bl	8006360 <__sfp>
 8006332:	2200      	movs	r2, #0
 8006334:	60e0      	str	r0, [r4, #12]
 8006336:	2104      	movs	r1, #4
 8006338:	6860      	ldr	r0, [r4, #4]
 800633a:	f7ff ffa1 	bl	8006280 <std>
 800633e:	2201      	movs	r2, #1
 8006340:	2109      	movs	r1, #9
 8006342:	68a0      	ldr	r0, [r4, #8]
 8006344:	f7ff ff9c 	bl	8006280 <std>
 8006348:	2202      	movs	r2, #2
 800634a:	2112      	movs	r1, #18
 800634c:	68e0      	ldr	r0, [r4, #12]
 800634e:	f7ff ff97 	bl	8006280 <std>
 8006352:	2301      	movs	r3, #1
 8006354:	61a3      	str	r3, [r4, #24]
 8006356:	bd10      	pop	{r4, pc}
 8006358:	08008004 	.word	0x08008004
 800635c:	080062c9 	.word	0x080062c9

08006360 <__sfp>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <__sfp+0x70>)
 8006364:	4607      	mov	r7, r0
 8006366:	681e      	ldr	r6, [r3, #0]
 8006368:	69b3      	ldr	r3, [r6, #24]
 800636a:	b913      	cbnz	r3, 8006372 <__sfp+0x12>
 800636c:	4630      	mov	r0, r6
 800636e:	f7ff ffc7 	bl	8006300 <__sinit>
 8006372:	3648      	adds	r6, #72	; 0x48
 8006374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006378:	3b01      	subs	r3, #1
 800637a:	d503      	bpl.n	8006384 <__sfp+0x24>
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	b133      	cbz	r3, 800638e <__sfp+0x2e>
 8006380:	6836      	ldr	r6, [r6, #0]
 8006382:	e7f7      	b.n	8006374 <__sfp+0x14>
 8006384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006388:	b16d      	cbz	r5, 80063a6 <__sfp+0x46>
 800638a:	3468      	adds	r4, #104	; 0x68
 800638c:	e7f4      	b.n	8006378 <__sfp+0x18>
 800638e:	2104      	movs	r1, #4
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ff9f 	bl	80062d4 <__sfmoreglue>
 8006396:	6030      	str	r0, [r6, #0]
 8006398:	2800      	cmp	r0, #0
 800639a:	d1f1      	bne.n	8006380 <__sfp+0x20>
 800639c:	230c      	movs	r3, #12
 800639e:	4604      	mov	r4, r0
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4620      	mov	r0, r4
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <__sfp+0x74>)
 80063a8:	6665      	str	r5, [r4, #100]	; 0x64
 80063aa:	e9c4 5500 	strd	r5, r5, [r4]
 80063ae:	60a5      	str	r5, [r4, #8]
 80063b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80063b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80063b8:	2208      	movs	r2, #8
 80063ba:	4629      	mov	r1, r5
 80063bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063c0:	f7fd fbe6 	bl	8003b90 <memset>
 80063c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063cc:	e7e9      	b.n	80063a2 <__sfp+0x42>
 80063ce:	bf00      	nop
 80063d0:	08008004 	.word	0x08008004
 80063d4:	ffff0001 	.word	0xffff0001

080063d8 <_fwalk_reent>:
 80063d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	2600      	movs	r6, #0
 80063e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063e6:	b914      	cbnz	r4, 80063ee <_fwalk_reent+0x16>
 80063e8:	4630      	mov	r0, r6
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80063f2:	3f01      	subs	r7, #1
 80063f4:	d501      	bpl.n	80063fa <_fwalk_reent+0x22>
 80063f6:	6824      	ldr	r4, [r4, #0]
 80063f8:	e7f5      	b.n	80063e6 <_fwalk_reent+0xe>
 80063fa:	89ab      	ldrh	r3, [r5, #12]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d907      	bls.n	8006410 <_fwalk_reent+0x38>
 8006400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006404:	3301      	adds	r3, #1
 8006406:	d003      	beq.n	8006410 <_fwalk_reent+0x38>
 8006408:	4629      	mov	r1, r5
 800640a:	4640      	mov	r0, r8
 800640c:	47c8      	blx	r9
 800640e:	4306      	orrs	r6, r0
 8006410:	3568      	adds	r5, #104	; 0x68
 8006412:	e7ee      	b.n	80063f2 <_fwalk_reent+0x1a>

08006414 <rshift>:
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	6906      	ldr	r6, [r0, #16]
 8006418:	114b      	asrs	r3, r1, #5
 800641a:	429e      	cmp	r6, r3
 800641c:	f100 0414 	add.w	r4, r0, #20
 8006420:	dd31      	ble.n	8006486 <rshift+0x72>
 8006422:	f011 011f 	ands.w	r1, r1, #31
 8006426:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800642a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800642e:	d108      	bne.n	8006442 <rshift+0x2e>
 8006430:	4621      	mov	r1, r4
 8006432:	42b2      	cmp	r2, r6
 8006434:	460b      	mov	r3, r1
 8006436:	d211      	bcs.n	800645c <rshift+0x48>
 8006438:	f852 3b04 	ldr.w	r3, [r2], #4
 800643c:	f841 3b04 	str.w	r3, [r1], #4
 8006440:	e7f7      	b.n	8006432 <rshift+0x1e>
 8006442:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006446:	4623      	mov	r3, r4
 8006448:	f1c1 0c20 	rsb	ip, r1, #32
 800644c:	40cd      	lsrs	r5, r1
 800644e:	3204      	adds	r2, #4
 8006450:	42b2      	cmp	r2, r6
 8006452:	4617      	mov	r7, r2
 8006454:	d30d      	bcc.n	8006472 <rshift+0x5e>
 8006456:	601d      	str	r5, [r3, #0]
 8006458:	b105      	cbz	r5, 800645c <rshift+0x48>
 800645a:	3304      	adds	r3, #4
 800645c:	42a3      	cmp	r3, r4
 800645e:	eba3 0204 	sub.w	r2, r3, r4
 8006462:	bf08      	it	eq
 8006464:	2300      	moveq	r3, #0
 8006466:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800646a:	6102      	str	r2, [r0, #16]
 800646c:	bf08      	it	eq
 800646e:	6143      	streq	r3, [r0, #20]
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006472:	683f      	ldr	r7, [r7, #0]
 8006474:	fa07 f70c 	lsl.w	r7, r7, ip
 8006478:	433d      	orrs	r5, r7
 800647a:	f843 5b04 	str.w	r5, [r3], #4
 800647e:	f852 5b04 	ldr.w	r5, [r2], #4
 8006482:	40cd      	lsrs	r5, r1
 8006484:	e7e4      	b.n	8006450 <rshift+0x3c>
 8006486:	4623      	mov	r3, r4
 8006488:	e7e8      	b.n	800645c <rshift+0x48>

0800648a <__hexdig_fun>:
 800648a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800648e:	2b09      	cmp	r3, #9
 8006490:	d802      	bhi.n	8006498 <__hexdig_fun+0xe>
 8006492:	3820      	subs	r0, #32
 8006494:	b2c0      	uxtb	r0, r0
 8006496:	4770      	bx	lr
 8006498:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800649c:	2b05      	cmp	r3, #5
 800649e:	d801      	bhi.n	80064a4 <__hexdig_fun+0x1a>
 80064a0:	3847      	subs	r0, #71	; 0x47
 80064a2:	e7f7      	b.n	8006494 <__hexdig_fun+0xa>
 80064a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d801      	bhi.n	80064b0 <__hexdig_fun+0x26>
 80064ac:	3827      	subs	r0, #39	; 0x27
 80064ae:	e7f1      	b.n	8006494 <__hexdig_fun+0xa>
 80064b0:	2000      	movs	r0, #0
 80064b2:	4770      	bx	lr

080064b4 <__gethex>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	b08b      	sub	sp, #44	; 0x2c
 80064ba:	9002      	str	r0, [sp, #8]
 80064bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80064be:	468a      	mov	sl, r1
 80064c0:	4690      	mov	r8, r2
 80064c2:	9306      	str	r3, [sp, #24]
 80064c4:	f000 fad1 	bl	8006a6a <__localeconv_l>
 80064c8:	6803      	ldr	r3, [r0, #0]
 80064ca:	f04f 0b00 	mov.w	fp, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	f7f9 feb3 	bl	800023c <strlen>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	9001      	str	r0, [sp, #4]
 80064da:	4403      	add	r3, r0
 80064dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80064e0:	9307      	str	r3, [sp, #28]
 80064e2:	f8da 3000 	ldr.w	r3, [sl]
 80064e6:	3302      	adds	r3, #2
 80064e8:	461f      	mov	r7, r3
 80064ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80064ee:	2830      	cmp	r0, #48	; 0x30
 80064f0:	d06c      	beq.n	80065cc <__gethex+0x118>
 80064f2:	f7ff ffca 	bl	800648a <__hexdig_fun>
 80064f6:	4604      	mov	r4, r0
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d16a      	bne.n	80065d2 <__gethex+0x11e>
 80064fc:	9a01      	ldr	r2, [sp, #4]
 80064fe:	9903      	ldr	r1, [sp, #12]
 8006500:	4638      	mov	r0, r7
 8006502:	f001 fa86 	bl	8007a12 <strncmp>
 8006506:	2800      	cmp	r0, #0
 8006508:	d166      	bne.n	80065d8 <__gethex+0x124>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	5cf8      	ldrb	r0, [r7, r3]
 800650e:	18fe      	adds	r6, r7, r3
 8006510:	f7ff ffbb 	bl	800648a <__hexdig_fun>
 8006514:	2800      	cmp	r0, #0
 8006516:	d062      	beq.n	80065de <__gethex+0x12a>
 8006518:	4633      	mov	r3, r6
 800651a:	7818      	ldrb	r0, [r3, #0]
 800651c:	461f      	mov	r7, r3
 800651e:	2830      	cmp	r0, #48	; 0x30
 8006520:	f103 0301 	add.w	r3, r3, #1
 8006524:	d0f9      	beq.n	800651a <__gethex+0x66>
 8006526:	f7ff ffb0 	bl	800648a <__hexdig_fun>
 800652a:	fab0 f580 	clz	r5, r0
 800652e:	4634      	mov	r4, r6
 8006530:	f04f 0b01 	mov.w	fp, #1
 8006534:	096d      	lsrs	r5, r5, #5
 8006536:	463a      	mov	r2, r7
 8006538:	4616      	mov	r6, r2
 800653a:	7830      	ldrb	r0, [r6, #0]
 800653c:	3201      	adds	r2, #1
 800653e:	f7ff ffa4 	bl	800648a <__hexdig_fun>
 8006542:	2800      	cmp	r0, #0
 8006544:	d1f8      	bne.n	8006538 <__gethex+0x84>
 8006546:	9a01      	ldr	r2, [sp, #4]
 8006548:	9903      	ldr	r1, [sp, #12]
 800654a:	4630      	mov	r0, r6
 800654c:	f001 fa61 	bl	8007a12 <strncmp>
 8006550:	b950      	cbnz	r0, 8006568 <__gethex+0xb4>
 8006552:	b954      	cbnz	r4, 800656a <__gethex+0xb6>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	18f4      	adds	r4, r6, r3
 8006558:	4622      	mov	r2, r4
 800655a:	4616      	mov	r6, r2
 800655c:	7830      	ldrb	r0, [r6, #0]
 800655e:	3201      	adds	r2, #1
 8006560:	f7ff ff93 	bl	800648a <__hexdig_fun>
 8006564:	2800      	cmp	r0, #0
 8006566:	d1f8      	bne.n	800655a <__gethex+0xa6>
 8006568:	b10c      	cbz	r4, 800656e <__gethex+0xba>
 800656a:	1ba4      	subs	r4, r4, r6
 800656c:	00a4      	lsls	r4, r4, #2
 800656e:	7833      	ldrb	r3, [r6, #0]
 8006570:	2b50      	cmp	r3, #80	; 0x50
 8006572:	d001      	beq.n	8006578 <__gethex+0xc4>
 8006574:	2b70      	cmp	r3, #112	; 0x70
 8006576:	d140      	bne.n	80065fa <__gethex+0x146>
 8006578:	7873      	ldrb	r3, [r6, #1]
 800657a:	2b2b      	cmp	r3, #43	; 0x2b
 800657c:	d031      	beq.n	80065e2 <__gethex+0x12e>
 800657e:	2b2d      	cmp	r3, #45	; 0x2d
 8006580:	d033      	beq.n	80065ea <__gethex+0x136>
 8006582:	f04f 0900 	mov.w	r9, #0
 8006586:	1c71      	adds	r1, r6, #1
 8006588:	7808      	ldrb	r0, [r1, #0]
 800658a:	f7ff ff7e 	bl	800648a <__hexdig_fun>
 800658e:	1e43      	subs	r3, r0, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b18      	cmp	r3, #24
 8006594:	d831      	bhi.n	80065fa <__gethex+0x146>
 8006596:	f1a0 0210 	sub.w	r2, r0, #16
 800659a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800659e:	f7ff ff74 	bl	800648a <__hexdig_fun>
 80065a2:	1e43      	subs	r3, r0, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b18      	cmp	r3, #24
 80065a8:	d922      	bls.n	80065f0 <__gethex+0x13c>
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	d000      	beq.n	80065b2 <__gethex+0xfe>
 80065b0:	4252      	negs	r2, r2
 80065b2:	4414      	add	r4, r2
 80065b4:	f8ca 1000 	str.w	r1, [sl]
 80065b8:	b30d      	cbz	r5, 80065fe <__gethex+0x14a>
 80065ba:	f1bb 0f00 	cmp.w	fp, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2706      	moveq	r7, #6
 80065c2:	2700      	movne	r7, #0
 80065c4:	4638      	mov	r0, r7
 80065c6:	b00b      	add	sp, #44	; 0x2c
 80065c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065cc:	f10b 0b01 	add.w	fp, fp, #1
 80065d0:	e78a      	b.n	80064e8 <__gethex+0x34>
 80065d2:	2500      	movs	r5, #0
 80065d4:	462c      	mov	r4, r5
 80065d6:	e7ae      	b.n	8006536 <__gethex+0x82>
 80065d8:	463e      	mov	r6, r7
 80065da:	2501      	movs	r5, #1
 80065dc:	e7c7      	b.n	800656e <__gethex+0xba>
 80065de:	4604      	mov	r4, r0
 80065e0:	e7fb      	b.n	80065da <__gethex+0x126>
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	1cb1      	adds	r1, r6, #2
 80065e8:	e7ce      	b.n	8006588 <__gethex+0xd4>
 80065ea:	f04f 0901 	mov.w	r9, #1
 80065ee:	e7fa      	b.n	80065e6 <__gethex+0x132>
 80065f0:	230a      	movs	r3, #10
 80065f2:	fb03 0202 	mla	r2, r3, r2, r0
 80065f6:	3a10      	subs	r2, #16
 80065f8:	e7cf      	b.n	800659a <__gethex+0xe6>
 80065fa:	4631      	mov	r1, r6
 80065fc:	e7da      	b.n	80065b4 <__gethex+0x100>
 80065fe:	4629      	mov	r1, r5
 8006600:	1bf3      	subs	r3, r6, r7
 8006602:	3b01      	subs	r3, #1
 8006604:	2b07      	cmp	r3, #7
 8006606:	dc49      	bgt.n	800669c <__gethex+0x1e8>
 8006608:	9802      	ldr	r0, [sp, #8]
 800660a:	f000 fa72 	bl	8006af2 <_Balloc>
 800660e:	f04f 0b00 	mov.w	fp, #0
 8006612:	4605      	mov	r5, r0
 8006614:	46da      	mov	sl, fp
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	f100 0914 	add.w	r9, r0, #20
 800661c:	f1c3 0301 	rsb	r3, r3, #1
 8006620:	f8cd 9010 	str.w	r9, [sp, #16]
 8006624:	9308      	str	r3, [sp, #32]
 8006626:	42b7      	cmp	r7, r6
 8006628:	d33b      	bcc.n	80066a2 <__gethex+0x1ee>
 800662a:	9804      	ldr	r0, [sp, #16]
 800662c:	f840 ab04 	str.w	sl, [r0], #4
 8006630:	eba0 0009 	sub.w	r0, r0, r9
 8006634:	1080      	asrs	r0, r0, #2
 8006636:	6128      	str	r0, [r5, #16]
 8006638:	0147      	lsls	r7, r0, #5
 800663a:	4650      	mov	r0, sl
 800663c:	f000 fb1d 	bl	8006c7a <__hi0bits>
 8006640:	f8d8 6000 	ldr.w	r6, [r8]
 8006644:	1a3f      	subs	r7, r7, r0
 8006646:	42b7      	cmp	r7, r6
 8006648:	dd64      	ble.n	8006714 <__gethex+0x260>
 800664a:	1bbf      	subs	r7, r7, r6
 800664c:	4639      	mov	r1, r7
 800664e:	4628      	mov	r0, r5
 8006650:	f000 fe27 	bl	80072a2 <__any_on>
 8006654:	4682      	mov	sl, r0
 8006656:	b178      	cbz	r0, 8006678 <__gethex+0x1c4>
 8006658:	f04f 0a01 	mov.w	sl, #1
 800665c:	1e7b      	subs	r3, r7, #1
 800665e:	1159      	asrs	r1, r3, #5
 8006660:	f003 021f 	and.w	r2, r3, #31
 8006664:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006668:	fa0a f202 	lsl.w	r2, sl, r2
 800666c:	420a      	tst	r2, r1
 800666e:	d003      	beq.n	8006678 <__gethex+0x1c4>
 8006670:	4553      	cmp	r3, sl
 8006672:	dc46      	bgt.n	8006702 <__gethex+0x24e>
 8006674:	f04f 0a02 	mov.w	sl, #2
 8006678:	4639      	mov	r1, r7
 800667a:	4628      	mov	r0, r5
 800667c:	f7ff feca 	bl	8006414 <rshift>
 8006680:	443c      	add	r4, r7
 8006682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006686:	42a3      	cmp	r3, r4
 8006688:	da52      	bge.n	8006730 <__gethex+0x27c>
 800668a:	4629      	mov	r1, r5
 800668c:	9802      	ldr	r0, [sp, #8]
 800668e:	f000 fa64 	bl	8006b5a <_Bfree>
 8006692:	2300      	movs	r3, #0
 8006694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006696:	27a3      	movs	r7, #163	; 0xa3
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e793      	b.n	80065c4 <__gethex+0x110>
 800669c:	3101      	adds	r1, #1
 800669e:	105b      	asrs	r3, r3, #1
 80066a0:	e7b0      	b.n	8006604 <__gethex+0x150>
 80066a2:	1e73      	subs	r3, r6, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	9a07      	ldr	r2, [sp, #28]
 80066a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <__gethex+0x22e>
 80066b0:	f1bb 0f20 	cmp.w	fp, #32
 80066b4:	d107      	bne.n	80066c6 <__gethex+0x212>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	f8c3 a000 	str.w	sl, [r3]
 80066bc:	f04f 0a00 	mov.w	sl, #0
 80066c0:	46d3      	mov	fp, sl
 80066c2:	3304      	adds	r3, #4
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80066ca:	f7ff fede 	bl	800648a <__hexdig_fun>
 80066ce:	f000 000f 	and.w	r0, r0, #15
 80066d2:	fa00 f00b 	lsl.w	r0, r0, fp
 80066d6:	ea4a 0a00 	orr.w	sl, sl, r0
 80066da:	f10b 0b04 	add.w	fp, fp, #4
 80066de:	9b05      	ldr	r3, [sp, #20]
 80066e0:	e00d      	b.n	80066fe <__gethex+0x24a>
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	9a08      	ldr	r2, [sp, #32]
 80066e6:	4413      	add	r3, r2
 80066e8:	42bb      	cmp	r3, r7
 80066ea:	d3e1      	bcc.n	80066b0 <__gethex+0x1fc>
 80066ec:	4618      	mov	r0, r3
 80066ee:	9a01      	ldr	r2, [sp, #4]
 80066f0:	9903      	ldr	r1, [sp, #12]
 80066f2:	9309      	str	r3, [sp, #36]	; 0x24
 80066f4:	f001 f98d 	bl	8007a12 <strncmp>
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d1d8      	bne.n	80066b0 <__gethex+0x1fc>
 80066fe:	461e      	mov	r6, r3
 8006700:	e791      	b.n	8006626 <__gethex+0x172>
 8006702:	1eb9      	subs	r1, r7, #2
 8006704:	4628      	mov	r0, r5
 8006706:	f000 fdcc 	bl	80072a2 <__any_on>
 800670a:	2800      	cmp	r0, #0
 800670c:	d0b2      	beq.n	8006674 <__gethex+0x1c0>
 800670e:	f04f 0a03 	mov.w	sl, #3
 8006712:	e7b1      	b.n	8006678 <__gethex+0x1c4>
 8006714:	da09      	bge.n	800672a <__gethex+0x276>
 8006716:	1bf7      	subs	r7, r6, r7
 8006718:	4629      	mov	r1, r5
 800671a:	463a      	mov	r2, r7
 800671c:	9802      	ldr	r0, [sp, #8]
 800671e:	f000 fbe7 	bl	8006ef0 <__lshift>
 8006722:	4605      	mov	r5, r0
 8006724:	1be4      	subs	r4, r4, r7
 8006726:	f100 0914 	add.w	r9, r0, #20
 800672a:	f04f 0a00 	mov.w	sl, #0
 800672e:	e7a8      	b.n	8006682 <__gethex+0x1ce>
 8006730:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006734:	42a0      	cmp	r0, r4
 8006736:	dd6b      	ble.n	8006810 <__gethex+0x35c>
 8006738:	1b04      	subs	r4, r0, r4
 800673a:	42a6      	cmp	r6, r4
 800673c:	dc2e      	bgt.n	800679c <__gethex+0x2e8>
 800673e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d022      	beq.n	800678c <__gethex+0x2d8>
 8006746:	2b03      	cmp	r3, #3
 8006748:	d024      	beq.n	8006794 <__gethex+0x2e0>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d115      	bne.n	800677a <__gethex+0x2c6>
 800674e:	42a6      	cmp	r6, r4
 8006750:	d113      	bne.n	800677a <__gethex+0x2c6>
 8006752:	2e01      	cmp	r6, #1
 8006754:	dc0b      	bgt.n	800676e <__gethex+0x2ba>
 8006756:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800675a:	9a06      	ldr	r2, [sp, #24]
 800675c:	2762      	movs	r7, #98	; 0x62
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	2301      	movs	r3, #1
 8006762:	612b      	str	r3, [r5, #16]
 8006764:	f8c9 3000 	str.w	r3, [r9]
 8006768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800676a:	601d      	str	r5, [r3, #0]
 800676c:	e72a      	b.n	80065c4 <__gethex+0x110>
 800676e:	1e71      	subs	r1, r6, #1
 8006770:	4628      	mov	r0, r5
 8006772:	f000 fd96 	bl	80072a2 <__any_on>
 8006776:	2800      	cmp	r0, #0
 8006778:	d1ed      	bne.n	8006756 <__gethex+0x2a2>
 800677a:	4629      	mov	r1, r5
 800677c:	9802      	ldr	r0, [sp, #8]
 800677e:	f000 f9ec 	bl	8006b5a <_Bfree>
 8006782:	2300      	movs	r3, #0
 8006784:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006786:	2750      	movs	r7, #80	; 0x50
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e71b      	b.n	80065c4 <__gethex+0x110>
 800678c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0e1      	beq.n	8006756 <__gethex+0x2a2>
 8006792:	e7f2      	b.n	800677a <__gethex+0x2c6>
 8006794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1dd      	bne.n	8006756 <__gethex+0x2a2>
 800679a:	e7ee      	b.n	800677a <__gethex+0x2c6>
 800679c:	1e67      	subs	r7, r4, #1
 800679e:	f1ba 0f00 	cmp.w	sl, #0
 80067a2:	d132      	bne.n	800680a <__gethex+0x356>
 80067a4:	b127      	cbz	r7, 80067b0 <__gethex+0x2fc>
 80067a6:	4639      	mov	r1, r7
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 fd7a 	bl	80072a2 <__any_on>
 80067ae:	4682      	mov	sl, r0
 80067b0:	2301      	movs	r3, #1
 80067b2:	117a      	asrs	r2, r7, #5
 80067b4:	f007 071f 	and.w	r7, r7, #31
 80067b8:	fa03 f707 	lsl.w	r7, r3, r7
 80067bc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80067c0:	4621      	mov	r1, r4
 80067c2:	421f      	tst	r7, r3
 80067c4:	f04f 0702 	mov.w	r7, #2
 80067c8:	4628      	mov	r0, r5
 80067ca:	bf18      	it	ne
 80067cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80067d0:	1b36      	subs	r6, r6, r4
 80067d2:	f7ff fe1f 	bl	8006414 <rshift>
 80067d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80067da:	f1ba 0f00 	cmp.w	sl, #0
 80067de:	d048      	beq.n	8006872 <__gethex+0x3be>
 80067e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d015      	beq.n	8006814 <__gethex+0x360>
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d017      	beq.n	800681c <__gethex+0x368>
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d109      	bne.n	8006804 <__gethex+0x350>
 80067f0:	f01a 0f02 	tst.w	sl, #2
 80067f4:	d006      	beq.n	8006804 <__gethex+0x350>
 80067f6:	f8d9 3000 	ldr.w	r3, [r9]
 80067fa:	ea4a 0a03 	orr.w	sl, sl, r3
 80067fe:	f01a 0f01 	tst.w	sl, #1
 8006802:	d10e      	bne.n	8006822 <__gethex+0x36e>
 8006804:	f047 0710 	orr.w	r7, r7, #16
 8006808:	e033      	b.n	8006872 <__gethex+0x3be>
 800680a:	f04f 0a01 	mov.w	sl, #1
 800680e:	e7cf      	b.n	80067b0 <__gethex+0x2fc>
 8006810:	2701      	movs	r7, #1
 8006812:	e7e2      	b.n	80067da <__gethex+0x326>
 8006814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006816:	f1c3 0301 	rsb	r3, r3, #1
 800681a:	9315      	str	r3, [sp, #84]	; 0x54
 800681c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0f0      	beq.n	8006804 <__gethex+0x350>
 8006822:	f04f 0c00 	mov.w	ip, #0
 8006826:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800682a:	f105 0314 	add.w	r3, r5, #20
 800682e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006832:	eb03 010a 	add.w	r1, r3, sl
 8006836:	4618      	mov	r0, r3
 8006838:	f853 2b04 	ldr.w	r2, [r3], #4
 800683c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006840:	d01c      	beq.n	800687c <__gethex+0x3c8>
 8006842:	3201      	adds	r2, #1
 8006844:	6002      	str	r2, [r0, #0]
 8006846:	2f02      	cmp	r7, #2
 8006848:	f105 0314 	add.w	r3, r5, #20
 800684c:	d138      	bne.n	80068c0 <__gethex+0x40c>
 800684e:	f8d8 2000 	ldr.w	r2, [r8]
 8006852:	3a01      	subs	r2, #1
 8006854:	42b2      	cmp	r2, r6
 8006856:	d10a      	bne.n	800686e <__gethex+0x3ba>
 8006858:	2201      	movs	r2, #1
 800685a:	1171      	asrs	r1, r6, #5
 800685c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006860:	f006 061f 	and.w	r6, r6, #31
 8006864:	fa02 f606 	lsl.w	r6, r2, r6
 8006868:	421e      	tst	r6, r3
 800686a:	bf18      	it	ne
 800686c:	4617      	movne	r7, r2
 800686e:	f047 0720 	orr.w	r7, r7, #32
 8006872:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006874:	601d      	str	r5, [r3, #0]
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	601c      	str	r4, [r3, #0]
 800687a:	e6a3      	b.n	80065c4 <__gethex+0x110>
 800687c:	4299      	cmp	r1, r3
 800687e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006882:	d8d8      	bhi.n	8006836 <__gethex+0x382>
 8006884:	68ab      	ldr	r3, [r5, #8]
 8006886:	4599      	cmp	r9, r3
 8006888:	db12      	blt.n	80068b0 <__gethex+0x3fc>
 800688a:	6869      	ldr	r1, [r5, #4]
 800688c:	9802      	ldr	r0, [sp, #8]
 800688e:	3101      	adds	r1, #1
 8006890:	f000 f92f 	bl	8006af2 <_Balloc>
 8006894:	4683      	mov	fp, r0
 8006896:	692a      	ldr	r2, [r5, #16]
 8006898:	f105 010c 	add.w	r1, r5, #12
 800689c:	3202      	adds	r2, #2
 800689e:	0092      	lsls	r2, r2, #2
 80068a0:	300c      	adds	r0, #12
 80068a2:	f000 f91b 	bl	8006adc <memcpy>
 80068a6:	4629      	mov	r1, r5
 80068a8:	9802      	ldr	r0, [sp, #8]
 80068aa:	f000 f956 	bl	8006b5a <_Bfree>
 80068ae:	465d      	mov	r5, fp
 80068b0:	692b      	ldr	r3, [r5, #16]
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	612a      	str	r2, [r5, #16]
 80068b6:	2201      	movs	r2, #1
 80068b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80068bc:	615a      	str	r2, [r3, #20]
 80068be:	e7c2      	b.n	8006846 <__gethex+0x392>
 80068c0:	692a      	ldr	r2, [r5, #16]
 80068c2:	454a      	cmp	r2, r9
 80068c4:	dd0b      	ble.n	80068de <__gethex+0x42a>
 80068c6:	2101      	movs	r1, #1
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7ff fda3 	bl	8006414 <rshift>
 80068ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068d2:	3401      	adds	r4, #1
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	f6ff aed8 	blt.w	800668a <__gethex+0x1d6>
 80068da:	2701      	movs	r7, #1
 80068dc:	e7c7      	b.n	800686e <__gethex+0x3ba>
 80068de:	f016 061f 	ands.w	r6, r6, #31
 80068e2:	d0fa      	beq.n	80068da <__gethex+0x426>
 80068e4:	449a      	add	sl, r3
 80068e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80068ea:	f000 f9c6 	bl	8006c7a <__hi0bits>
 80068ee:	f1c6 0620 	rsb	r6, r6, #32
 80068f2:	42b0      	cmp	r0, r6
 80068f4:	dbe7      	blt.n	80068c6 <__gethex+0x412>
 80068f6:	e7f0      	b.n	80068da <__gethex+0x426>

080068f8 <L_shift>:
 80068f8:	f1c2 0208 	rsb	r2, r2, #8
 80068fc:	0092      	lsls	r2, r2, #2
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	f1c2 0620 	rsb	r6, r2, #32
 8006904:	6843      	ldr	r3, [r0, #4]
 8006906:	6804      	ldr	r4, [r0, #0]
 8006908:	fa03 f506 	lsl.w	r5, r3, r6
 800690c:	432c      	orrs	r4, r5
 800690e:	40d3      	lsrs	r3, r2
 8006910:	6004      	str	r4, [r0, #0]
 8006912:	f840 3f04 	str.w	r3, [r0, #4]!
 8006916:	4288      	cmp	r0, r1
 8006918:	d3f4      	bcc.n	8006904 <L_shift+0xc>
 800691a:	bd70      	pop	{r4, r5, r6, pc}

0800691c <__match>:
 800691c:	b530      	push	{r4, r5, lr}
 800691e:	6803      	ldr	r3, [r0, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006926:	b914      	cbnz	r4, 800692e <__match+0x12>
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	2001      	movs	r0, #1
 800692c:	bd30      	pop	{r4, r5, pc}
 800692e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006932:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006936:	2d19      	cmp	r5, #25
 8006938:	bf98      	it	ls
 800693a:	3220      	addls	r2, #32
 800693c:	42a2      	cmp	r2, r4
 800693e:	d0f0      	beq.n	8006922 <__match+0x6>
 8006940:	2000      	movs	r0, #0
 8006942:	e7f3      	b.n	800692c <__match+0x10>

08006944 <__hexnan>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	2500      	movs	r5, #0
 800694a:	680b      	ldr	r3, [r1, #0]
 800694c:	4682      	mov	sl, r0
 800694e:	115f      	asrs	r7, r3, #5
 8006950:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006954:	f013 031f 	ands.w	r3, r3, #31
 8006958:	bf18      	it	ne
 800695a:	3704      	addne	r7, #4
 800695c:	1f3e      	subs	r6, r7, #4
 800695e:	4690      	mov	r8, r2
 8006960:	46b1      	mov	r9, r6
 8006962:	4634      	mov	r4, r6
 8006964:	46ab      	mov	fp, r5
 8006966:	b087      	sub	sp, #28
 8006968:	6801      	ldr	r1, [r0, #0]
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	f847 5c04 	str.w	r5, [r7, #-4]
 8006970:	9502      	str	r5, [sp, #8]
 8006972:	784a      	ldrb	r2, [r1, #1]
 8006974:	1c4b      	adds	r3, r1, #1
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	b342      	cbz	r2, 80069cc <__hexnan+0x88>
 800697a:	4610      	mov	r0, r2
 800697c:	9105      	str	r1, [sp, #20]
 800697e:	9204      	str	r2, [sp, #16]
 8006980:	f7ff fd83 	bl	800648a <__hexdig_fun>
 8006984:	2800      	cmp	r0, #0
 8006986:	d143      	bne.n	8006a10 <__hexnan+0xcc>
 8006988:	9a04      	ldr	r2, [sp, #16]
 800698a:	9905      	ldr	r1, [sp, #20]
 800698c:	2a20      	cmp	r2, #32
 800698e:	d818      	bhi.n	80069c2 <__hexnan+0x7e>
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	459b      	cmp	fp, r3
 8006994:	dd13      	ble.n	80069be <__hexnan+0x7a>
 8006996:	454c      	cmp	r4, r9
 8006998:	d206      	bcs.n	80069a8 <__hexnan+0x64>
 800699a:	2d07      	cmp	r5, #7
 800699c:	dc04      	bgt.n	80069a8 <__hexnan+0x64>
 800699e:	462a      	mov	r2, r5
 80069a0:	4649      	mov	r1, r9
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7ff ffa8 	bl	80068f8 <L_shift>
 80069a8:	4544      	cmp	r4, r8
 80069aa:	d944      	bls.n	8006a36 <__hexnan+0xf2>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f1a4 0904 	sub.w	r9, r4, #4
 80069b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80069b6:	461d      	mov	r5, r3
 80069b8:	464c      	mov	r4, r9
 80069ba:	f8cd b008 	str.w	fp, [sp, #8]
 80069be:	9903      	ldr	r1, [sp, #12]
 80069c0:	e7d7      	b.n	8006972 <__hexnan+0x2e>
 80069c2:	2a29      	cmp	r2, #41	; 0x29
 80069c4:	d14a      	bne.n	8006a5c <__hexnan+0x118>
 80069c6:	3102      	adds	r1, #2
 80069c8:	f8ca 1000 	str.w	r1, [sl]
 80069cc:	f1bb 0f00 	cmp.w	fp, #0
 80069d0:	d044      	beq.n	8006a5c <__hexnan+0x118>
 80069d2:	454c      	cmp	r4, r9
 80069d4:	d206      	bcs.n	80069e4 <__hexnan+0xa0>
 80069d6:	2d07      	cmp	r5, #7
 80069d8:	dc04      	bgt.n	80069e4 <__hexnan+0xa0>
 80069da:	462a      	mov	r2, r5
 80069dc:	4649      	mov	r1, r9
 80069de:	4620      	mov	r0, r4
 80069e0:	f7ff ff8a 	bl	80068f8 <L_shift>
 80069e4:	4544      	cmp	r4, r8
 80069e6:	d928      	bls.n	8006a3a <__hexnan+0xf6>
 80069e8:	4643      	mov	r3, r8
 80069ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	f843 2b04 	str.w	r2, [r3], #4
 80069f4:	d2f9      	bcs.n	80069ea <__hexnan+0xa6>
 80069f6:	2200      	movs	r2, #0
 80069f8:	f843 2b04 	str.w	r2, [r3], #4
 80069fc:	429e      	cmp	r6, r3
 80069fe:	d2fb      	bcs.n	80069f8 <__hexnan+0xb4>
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	b91b      	cbnz	r3, 8006a0c <__hexnan+0xc8>
 8006a04:	4546      	cmp	r6, r8
 8006a06:	d127      	bne.n	8006a58 <__hexnan+0x114>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	2005      	movs	r0, #5
 8006a0e:	e026      	b.n	8006a5e <__hexnan+0x11a>
 8006a10:	3501      	adds	r5, #1
 8006a12:	2d08      	cmp	r5, #8
 8006a14:	f10b 0b01 	add.w	fp, fp, #1
 8006a18:	dd06      	ble.n	8006a28 <__hexnan+0xe4>
 8006a1a:	4544      	cmp	r4, r8
 8006a1c:	d9cf      	bls.n	80069be <__hexnan+0x7a>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2501      	movs	r5, #1
 8006a22:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a26:	3c04      	subs	r4, #4
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	f000 000f 	and.w	r0, r0, #15
 8006a2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006a32:	6020      	str	r0, [r4, #0]
 8006a34:	e7c3      	b.n	80069be <__hexnan+0x7a>
 8006a36:	2508      	movs	r5, #8
 8006a38:	e7c1      	b.n	80069be <__hexnan+0x7a>
 8006a3a:	9b01      	ldr	r3, [sp, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0df      	beq.n	8006a00 <__hexnan+0xbc>
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	f1c3 0320 	rsb	r3, r3, #32
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006a50:	401a      	ands	r2, r3
 8006a52:	f847 2c04 	str.w	r2, [r7, #-4]
 8006a56:	e7d3      	b.n	8006a00 <__hexnan+0xbc>
 8006a58:	3e04      	subs	r6, #4
 8006a5a:	e7d1      	b.n	8006a00 <__hexnan+0xbc>
 8006a5c:	2004      	movs	r0, #4
 8006a5e:	b007      	add	sp, #28
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a64 <__locale_ctype_ptr_l>:
 8006a64:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006a68:	4770      	bx	lr

08006a6a <__localeconv_l>:
 8006a6a:	30f0      	adds	r0, #240	; 0xf0
 8006a6c:	4770      	bx	lr
	...

08006a70 <_localeconv_r>:
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <_localeconv_r+0x14>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a18      	ldr	r0, [r3, #32]
 8006a76:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <_localeconv_r+0x18>)
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	bf08      	it	eq
 8006a7c:	4618      	moveq	r0, r3
 8006a7e:	30f0      	adds	r0, #240	; 0xf0
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000002c 	.word	0x2000002c
 8006a88:	20000090 	.word	0x20000090

08006a8c <malloc>:
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <malloc+0xc>)
 8006a8e:	4601      	mov	r1, r0
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f000 bc81 	b.w	8007398 <_malloc_r>
 8006a96:	bf00      	nop
 8006a98:	2000002c 	.word	0x2000002c

08006a9c <__ascii_mbtowc>:
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b901      	cbnz	r1, 8006aa2 <__ascii_mbtowc+0x6>
 8006aa0:	a901      	add	r1, sp, #4
 8006aa2:	b142      	cbz	r2, 8006ab6 <__ascii_mbtowc+0x1a>
 8006aa4:	b14b      	cbz	r3, 8006aba <__ascii_mbtowc+0x1e>
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	1c10      	adds	r0, r2, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2001      	movne	r0, #1
 8006ab2:	b002      	add	sp, #8
 8006ab4:	4770      	bx	lr
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	e7fb      	b.n	8006ab2 <__ascii_mbtowc+0x16>
 8006aba:	f06f 0001 	mvn.w	r0, #1
 8006abe:	e7f8      	b.n	8006ab2 <__ascii_mbtowc+0x16>

08006ac0 <memchr>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	b2c9      	uxtb	r1, r1
 8006ac4:	4402      	add	r2, r0
 8006ac6:	4290      	cmp	r0, r2
 8006ac8:	4603      	mov	r3, r0
 8006aca:	d101      	bne.n	8006ad0 <memchr+0x10>
 8006acc:	2300      	movs	r3, #0
 8006ace:	e003      	b.n	8006ad8 <memchr+0x18>
 8006ad0:	781c      	ldrb	r4, [r3, #0]
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	428c      	cmp	r4, r1
 8006ad6:	d1f6      	bne.n	8006ac6 <memchr+0x6>
 8006ad8:	4618      	mov	r0, r3
 8006ada:	bd10      	pop	{r4, pc}

08006adc <memcpy>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	1e43      	subs	r3, r0, #1
 8006ae0:	440a      	add	r2, r1
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	d100      	bne.n	8006ae8 <memcpy+0xc>
 8006ae6:	bd10      	pop	{r4, pc}
 8006ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af0:	e7f7      	b.n	8006ae2 <memcpy+0x6>

08006af2 <_Balloc>:
 8006af2:	b570      	push	{r4, r5, r6, lr}
 8006af4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af6:	4604      	mov	r4, r0
 8006af8:	460e      	mov	r6, r1
 8006afa:	b93d      	cbnz	r5, 8006b0c <_Balloc+0x1a>
 8006afc:	2010      	movs	r0, #16
 8006afe:	f7ff ffc5 	bl	8006a8c <malloc>
 8006b02:	6260      	str	r0, [r4, #36]	; 0x24
 8006b04:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b08:	6005      	str	r5, [r0, #0]
 8006b0a:	60c5      	str	r5, [r0, #12]
 8006b0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	b183      	cbz	r3, 8006b34 <_Balloc+0x42>
 8006b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b1a:	b9b8      	cbnz	r0, 8006b4c <_Balloc+0x5a>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f506 	lsl.w	r5, r1, r6
 8006b22:	1d6a      	adds	r2, r5, #5
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fbdc 	bl	80072e4 <_calloc_r>
 8006b2c:	b160      	cbz	r0, 8006b48 <_Balloc+0x56>
 8006b2e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006b32:	e00e      	b.n	8006b52 <_Balloc+0x60>
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	2104      	movs	r1, #4
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fbd3 	bl	80072e4 <_calloc_r>
 8006b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b40:	60e8      	str	r0, [r5, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <_Balloc+0x20>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b58:	e7f7      	b.n	8006b4a <_Balloc+0x58>

08006b5a <_Bfree>:
 8006b5a:	b570      	push	{r4, r5, r6, lr}
 8006b5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	b93c      	cbnz	r4, 8006b74 <_Bfree+0x1a>
 8006b64:	2010      	movs	r0, #16
 8006b66:	f7ff ff91 	bl	8006a8c <malloc>
 8006b6a:	6270      	str	r0, [r6, #36]	; 0x24
 8006b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b70:	6004      	str	r4, [r0, #0]
 8006b72:	60c4      	str	r4, [r0, #12]
 8006b74:	b13d      	cbz	r5, 8006b86 <_Bfree+0x2c>
 8006b76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b78:	686a      	ldr	r2, [r5, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b80:	6029      	str	r1, [r5, #0]
 8006b82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__multadd>:
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	461f      	mov	r7, r3
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	2300      	movs	r3, #0
 8006b94:	690d      	ldr	r5, [r1, #16]
 8006b96:	f101 0c14 	add.w	ip, r1, #20
 8006b9a:	f8dc 0000 	ldr.w	r0, [ip]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	b281      	uxth	r1, r0
 8006ba2:	fb02 7101 	mla	r1, r2, r1, r7
 8006ba6:	0c00      	lsrs	r0, r0, #16
 8006ba8:	0c0f      	lsrs	r7, r1, #16
 8006baa:	fb02 7000 	mla	r0, r2, r0, r7
 8006bae:	b289      	uxth	r1, r1
 8006bb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006bba:	f84c 1b04 	str.w	r1, [ip], #4
 8006bbe:	dcec      	bgt.n	8006b9a <__multadd+0x12>
 8006bc0:	b1d7      	cbz	r7, 8006bf8 <__multadd+0x70>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dc12      	bgt.n	8006bee <__multadd+0x66>
 8006bc8:	6861      	ldr	r1, [r4, #4]
 8006bca:	4630      	mov	r0, r6
 8006bcc:	3101      	adds	r1, #1
 8006bce:	f7ff ff90 	bl	8006af2 <_Balloc>
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	6922      	ldr	r2, [r4, #16]
 8006bd6:	f104 010c 	add.w	r1, r4, #12
 8006bda:	3202      	adds	r2, #2
 8006bdc:	0092      	lsls	r2, r2, #2
 8006bde:	300c      	adds	r0, #12
 8006be0:	f7ff ff7c 	bl	8006adc <memcpy>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff ffb7 	bl	8006b5a <_Bfree>
 8006bec:	4644      	mov	r4, r8
 8006bee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	615f      	str	r7, [r3, #20]
 8006bf6:	6125      	str	r5, [r4, #16]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bfe <__s2b>:
 8006bfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c02:	4615      	mov	r5, r2
 8006c04:	2209      	movs	r2, #9
 8006c06:	461f      	mov	r7, r3
 8006c08:	3308      	adds	r3, #8
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c10:	4606      	mov	r6, r0
 8006c12:	2201      	movs	r2, #1
 8006c14:	2100      	movs	r1, #0
 8006c16:	429a      	cmp	r2, r3
 8006c18:	db20      	blt.n	8006c5c <__s2b+0x5e>
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7ff ff69 	bl	8006af2 <_Balloc>
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	2d09      	cmp	r5, #9
 8006c24:	6143      	str	r3, [r0, #20]
 8006c26:	f04f 0301 	mov.w	r3, #1
 8006c2a:	6103      	str	r3, [r0, #16]
 8006c2c:	dd19      	ble.n	8006c62 <__s2b+0x64>
 8006c2e:	f104 0809 	add.w	r8, r4, #9
 8006c32:	46c1      	mov	r9, r8
 8006c34:	442c      	add	r4, r5
 8006c36:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	3b30      	subs	r3, #48	; 0x30
 8006c3e:	220a      	movs	r2, #10
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ffa1 	bl	8006b88 <__multadd>
 8006c46:	45a1      	cmp	r9, r4
 8006c48:	d1f5      	bne.n	8006c36 <__s2b+0x38>
 8006c4a:	eb08 0405 	add.w	r4, r8, r5
 8006c4e:	3c08      	subs	r4, #8
 8006c50:	1b2d      	subs	r5, r5, r4
 8006c52:	1963      	adds	r3, r4, r5
 8006c54:	42bb      	cmp	r3, r7
 8006c56:	db07      	blt.n	8006c68 <__s2b+0x6a>
 8006c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5c:	0052      	lsls	r2, r2, #1
 8006c5e:	3101      	adds	r1, #1
 8006c60:	e7d9      	b.n	8006c16 <__s2b+0x18>
 8006c62:	340a      	adds	r4, #10
 8006c64:	2509      	movs	r5, #9
 8006c66:	e7f3      	b.n	8006c50 <__s2b+0x52>
 8006c68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	3b30      	subs	r3, #48	; 0x30
 8006c70:	220a      	movs	r2, #10
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ff88 	bl	8006b88 <__multadd>
 8006c78:	e7eb      	b.n	8006c52 <__s2b+0x54>

08006c7a <__hi0bits>:
 8006c7a:	0c02      	lsrs	r2, r0, #16
 8006c7c:	0412      	lsls	r2, r2, #16
 8006c7e:	4603      	mov	r3, r0
 8006c80:	b9b2      	cbnz	r2, 8006cb0 <__hi0bits+0x36>
 8006c82:	0403      	lsls	r3, r0, #16
 8006c84:	2010      	movs	r0, #16
 8006c86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c8a:	bf04      	itt	eq
 8006c8c:	021b      	lsleq	r3, r3, #8
 8006c8e:	3008      	addeq	r0, #8
 8006c90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c94:	bf04      	itt	eq
 8006c96:	011b      	lsleq	r3, r3, #4
 8006c98:	3004      	addeq	r0, #4
 8006c9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c9e:	bf04      	itt	eq
 8006ca0:	009b      	lsleq	r3, r3, #2
 8006ca2:	3002      	addeq	r0, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db06      	blt.n	8006cb6 <__hi0bits+0x3c>
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	d503      	bpl.n	8006cb4 <__hi0bits+0x3a>
 8006cac:	3001      	adds	r0, #1
 8006cae:	4770      	bx	lr
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e7e8      	b.n	8006c86 <__hi0bits+0xc>
 8006cb4:	2020      	movs	r0, #32
 8006cb6:	4770      	bx	lr

08006cb8 <__lo0bits>:
 8006cb8:	6803      	ldr	r3, [r0, #0]
 8006cba:	4601      	mov	r1, r0
 8006cbc:	f013 0207 	ands.w	r2, r3, #7
 8006cc0:	d00b      	beq.n	8006cda <__lo0bits+0x22>
 8006cc2:	07da      	lsls	r2, r3, #31
 8006cc4:	d423      	bmi.n	8006d0e <__lo0bits+0x56>
 8006cc6:	0798      	lsls	r0, r3, #30
 8006cc8:	bf49      	itett	mi
 8006cca:	085b      	lsrmi	r3, r3, #1
 8006ccc:	089b      	lsrpl	r3, r3, #2
 8006cce:	2001      	movmi	r0, #1
 8006cd0:	600b      	strmi	r3, [r1, #0]
 8006cd2:	bf5c      	itt	pl
 8006cd4:	600b      	strpl	r3, [r1, #0]
 8006cd6:	2002      	movpl	r0, #2
 8006cd8:	4770      	bx	lr
 8006cda:	b298      	uxth	r0, r3
 8006cdc:	b9a8      	cbnz	r0, 8006d0a <__lo0bits+0x52>
 8006cde:	2010      	movs	r0, #16
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ce6:	bf04      	itt	eq
 8006ce8:	0a1b      	lsreq	r3, r3, #8
 8006cea:	3008      	addeq	r0, #8
 8006cec:	071a      	lsls	r2, r3, #28
 8006cee:	bf04      	itt	eq
 8006cf0:	091b      	lsreq	r3, r3, #4
 8006cf2:	3004      	addeq	r0, #4
 8006cf4:	079a      	lsls	r2, r3, #30
 8006cf6:	bf04      	itt	eq
 8006cf8:	089b      	lsreq	r3, r3, #2
 8006cfa:	3002      	addeq	r0, #2
 8006cfc:	07da      	lsls	r2, r3, #31
 8006cfe:	d402      	bmi.n	8006d06 <__lo0bits+0x4e>
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	d006      	beq.n	8006d12 <__lo0bits+0x5a>
 8006d04:	3001      	adds	r0, #1
 8006d06:	600b      	str	r3, [r1, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	e7e9      	b.n	8006ce2 <__lo0bits+0x2a>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	4770      	bx	lr
 8006d12:	2020      	movs	r0, #32
 8006d14:	4770      	bx	lr

08006d16 <__i2b>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	f7ff fee9 	bl	8006af2 <_Balloc>
 8006d20:	2201      	movs	r2, #1
 8006d22:	6144      	str	r4, [r0, #20]
 8006d24:	6102      	str	r2, [r0, #16]
 8006d26:	bd10      	pop	{r4, pc}

08006d28 <__multiply>:
 8006d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	690a      	ldr	r2, [r1, #16]
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	4688      	mov	r8, r1
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bfbe      	ittt	lt
 8006d38:	460b      	movlt	r3, r1
 8006d3a:	46a0      	movlt	r8, r4
 8006d3c:	461c      	movlt	r4, r3
 8006d3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d4e:	eb07 0609 	add.w	r6, r7, r9
 8006d52:	42b3      	cmp	r3, r6
 8006d54:	bfb8      	it	lt
 8006d56:	3101      	addlt	r1, #1
 8006d58:	f7ff fecb 	bl	8006af2 <_Balloc>
 8006d5c:	f100 0514 	add.w	r5, r0, #20
 8006d60:	462b      	mov	r3, r5
 8006d62:	2200      	movs	r2, #0
 8006d64:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006d68:	4573      	cmp	r3, lr
 8006d6a:	d316      	bcc.n	8006d9a <__multiply+0x72>
 8006d6c:	f104 0214 	add.w	r2, r4, #20
 8006d70:	f108 0114 	add.w	r1, r8, #20
 8006d74:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	9201      	str	r2, [sp, #4]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d80c      	bhi.n	8006da0 <__multiply+0x78>
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	dd03      	ble.n	8006d92 <__multiply+0x6a>
 8006d8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d05d      	beq.n	8006e4e <__multiply+0x126>
 8006d92:	6106      	str	r6, [r0, #16]
 8006d94:	b003      	add	sp, #12
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	f843 2b04 	str.w	r2, [r3], #4
 8006d9e:	e7e3      	b.n	8006d68 <__multiply+0x40>
 8006da0:	f8b2 b000 	ldrh.w	fp, [r2]
 8006da4:	f1bb 0f00 	cmp.w	fp, #0
 8006da8:	d023      	beq.n	8006df2 <__multiply+0xca>
 8006daa:	4689      	mov	r9, r1
 8006dac:	46ac      	mov	ip, r5
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f859 4b04 	ldr.w	r4, [r9], #4
 8006db6:	f8dc a000 	ldr.w	sl, [ip]
 8006dba:	b2a3      	uxth	r3, r4
 8006dbc:	fa1f fa8a 	uxth.w	sl, sl
 8006dc0:	fb0b a303 	mla	r3, fp, r3, sl
 8006dc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006dc8:	f8dc 4000 	ldr.w	r4, [ip]
 8006dcc:	4443      	add	r3, r8
 8006dce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dd2:	fb0b 840a 	mla	r4, fp, sl, r8
 8006dd6:	46e2      	mov	sl, ip
 8006dd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006de2:	454f      	cmp	r7, r9
 8006de4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006de8:	f84a 3b04 	str.w	r3, [sl], #4
 8006dec:	d82b      	bhi.n	8006e46 <__multiply+0x11e>
 8006dee:	f8cc 8004 	str.w	r8, [ip, #4]
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	3204      	adds	r2, #4
 8006df6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006dfa:	f1ba 0f00 	cmp.w	sl, #0
 8006dfe:	d020      	beq.n	8006e42 <__multiply+0x11a>
 8006e00:	4689      	mov	r9, r1
 8006e02:	46a8      	mov	r8, r5
 8006e04:	f04f 0b00 	mov.w	fp, #0
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e0e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e18:	46c4      	mov	ip, r8
 8006e1a:	445c      	add	r4, fp
 8006e1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e20:	f84c 3b04 	str.w	r3, [ip], #4
 8006e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e28:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e2c:	0c1b      	lsrs	r3, r3, #16
 8006e2e:	fb0a b303 	mla	r3, sl, r3, fp
 8006e32:	454f      	cmp	r7, r9
 8006e34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e38:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e3c:	d805      	bhi.n	8006e4a <__multiply+0x122>
 8006e3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e42:	3504      	adds	r5, #4
 8006e44:	e79b      	b.n	8006d7e <__multiply+0x56>
 8006e46:	46d4      	mov	ip, sl
 8006e48:	e7b3      	b.n	8006db2 <__multiply+0x8a>
 8006e4a:	46e0      	mov	r8, ip
 8006e4c:	e7dd      	b.n	8006e0a <__multiply+0xe2>
 8006e4e:	3e01      	subs	r6, #1
 8006e50:	e799      	b.n	8006d86 <__multiply+0x5e>
	...

08006e54 <__pow5mult>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4615      	mov	r5, r2
 8006e5a:	f012 0203 	ands.w	r2, r2, #3
 8006e5e:	4606      	mov	r6, r0
 8006e60:	460f      	mov	r7, r1
 8006e62:	d007      	beq.n	8006e74 <__pow5mult+0x20>
 8006e64:	4c21      	ldr	r4, [pc, #132]	; (8006eec <__pow5mult+0x98>)
 8006e66:	3a01      	subs	r2, #1
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e6e:	f7ff fe8b 	bl	8006b88 <__multadd>
 8006e72:	4607      	mov	r7, r0
 8006e74:	10ad      	asrs	r5, r5, #2
 8006e76:	d035      	beq.n	8006ee4 <__pow5mult+0x90>
 8006e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e7a:	b93c      	cbnz	r4, 8006e8c <__pow5mult+0x38>
 8006e7c:	2010      	movs	r0, #16
 8006e7e:	f7ff fe05 	bl	8006a8c <malloc>
 8006e82:	6270      	str	r0, [r6, #36]	; 0x24
 8006e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e88:	6004      	str	r4, [r0, #0]
 8006e8a:	60c4      	str	r4, [r0, #12]
 8006e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e94:	b94c      	cbnz	r4, 8006eaa <__pow5mult+0x56>
 8006e96:	f240 2171 	movw	r1, #625	; 0x271
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ff3b 	bl	8006d16 <__i2b>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ea8:	6003      	str	r3, [r0, #0]
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	07eb      	lsls	r3, r5, #31
 8006eb0:	d50a      	bpl.n	8006ec8 <__pow5mult+0x74>
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff36 	bl	8006d28 <__multiply>
 8006ebc:	4681      	mov	r9, r0
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff fe4a 	bl	8006b5a <_Bfree>
 8006ec6:	464f      	mov	r7, r9
 8006ec8:	106d      	asrs	r5, r5, #1
 8006eca:	d00b      	beq.n	8006ee4 <__pow5mult+0x90>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	b938      	cbnz	r0, 8006ee0 <__pow5mult+0x8c>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ff27 	bl	8006d28 <__multiply>
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f8c0 8000 	str.w	r8, [r0]
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	e7e4      	b.n	8006eae <__pow5mult+0x5a>
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eea:	bf00      	nop
 8006eec:	08008208 	.word	0x08008208

08006ef0 <__lshift>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	4616      	mov	r6, r2
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f00:	eb0a 0903 	add.w	r9, sl, r3
 8006f04:	6849      	ldr	r1, [r1, #4]
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	f109 0501 	add.w	r5, r9, #1
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	db32      	blt.n	8006f76 <__lshift+0x86>
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fdee 	bl	8006af2 <_Balloc>
 8006f16:	2300      	movs	r3, #0
 8006f18:	4680      	mov	r8, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f100 0114 	add.w	r1, r0, #20
 8006f20:	4553      	cmp	r3, sl
 8006f22:	db2b      	blt.n	8006f7c <__lshift+0x8c>
 8006f24:	6920      	ldr	r0, [r4, #16]
 8006f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f2a:	f104 0314 	add.w	r3, r4, #20
 8006f2e:	f016 021f 	ands.w	r2, r6, #31
 8006f32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f3a:	d025      	beq.n	8006f88 <__lshift+0x98>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f1c2 0e20 	rsb	lr, r2, #32
 8006f42:	468a      	mov	sl, r1
 8006f44:	681e      	ldr	r6, [r3, #0]
 8006f46:	4096      	lsls	r6, r2
 8006f48:	4330      	orrs	r0, r6
 8006f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f52:	459c      	cmp	ip, r3
 8006f54:	fa20 f00e 	lsr.w	r0, r0, lr
 8006f58:	d814      	bhi.n	8006f84 <__lshift+0x94>
 8006f5a:	6048      	str	r0, [r1, #4]
 8006f5c:	b108      	cbz	r0, 8006f62 <__lshift+0x72>
 8006f5e:	f109 0502 	add.w	r5, r9, #2
 8006f62:	3d01      	subs	r5, #1
 8006f64:	4638      	mov	r0, r7
 8006f66:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	f7ff fdf5 	bl	8006b5a <_Bfree>
 8006f70:	4640      	mov	r0, r8
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f76:	3101      	adds	r1, #1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	e7c7      	b.n	8006f0c <__lshift+0x1c>
 8006f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f80:	3301      	adds	r3, #1
 8006f82:	e7cd      	b.n	8006f20 <__lshift+0x30>
 8006f84:	4651      	mov	r1, sl
 8006f86:	e7dc      	b.n	8006f42 <__lshift+0x52>
 8006f88:	3904      	subs	r1, #4
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	459c      	cmp	ip, r3
 8006f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f94:	d8f9      	bhi.n	8006f8a <__lshift+0x9a>
 8006f96:	e7e4      	b.n	8006f62 <__lshift+0x72>

08006f98 <__mcmp>:
 8006f98:	6903      	ldr	r3, [r0, #16]
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	b530      	push	{r4, r5, lr}
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	d10c      	bne.n	8006fbc <__mcmp+0x24>
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	3014      	adds	r0, #20
 8006fa6:	3114      	adds	r1, #20
 8006fa8:	1884      	adds	r4, r0, r2
 8006faa:	4411      	add	r1, r2
 8006fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fb4:	4295      	cmp	r5, r2
 8006fb6:	d003      	beq.n	8006fc0 <__mcmp+0x28>
 8006fb8:	d305      	bcc.n	8006fc6 <__mcmp+0x2e>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	bd30      	pop	{r4, r5, pc}
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d3f3      	bcc.n	8006fac <__mcmp+0x14>
 8006fc4:	e7fa      	b.n	8006fbc <__mcmp+0x24>
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	e7f7      	b.n	8006fbc <__mcmp+0x24>

08006fcc <__mdiff>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	4614      	mov	r4, r2
 8006fda:	f7ff ffdd 	bl	8006f98 <__mcmp>
 8006fde:	1e06      	subs	r6, r0, #0
 8006fe0:	d108      	bne.n	8006ff4 <__mdiff+0x28>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff fd84 	bl	8006af2 <_Balloc>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	bfa4      	itt	ge
 8006ff6:	4623      	movge	r3, r4
 8006ff8:	462c      	movge	r4, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	6861      	ldr	r1, [r4, #4]
 8006ffe:	bfa6      	itte	ge
 8007000:	461d      	movge	r5, r3
 8007002:	2600      	movge	r6, #0
 8007004:	2601      	movlt	r6, #1
 8007006:	f7ff fd74 	bl	8006af2 <_Balloc>
 800700a:	f04f 0e00 	mov.w	lr, #0
 800700e:	60c6      	str	r6, [r0, #12]
 8007010:	692b      	ldr	r3, [r5, #16]
 8007012:	6926      	ldr	r6, [r4, #16]
 8007014:	f104 0214 	add.w	r2, r4, #20
 8007018:	f105 0914 	add.w	r9, r5, #20
 800701c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007020:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007024:	f100 0114 	add.w	r1, r0, #20
 8007028:	f852 ab04 	ldr.w	sl, [r2], #4
 800702c:	f859 5b04 	ldr.w	r5, [r9], #4
 8007030:	fa1f f38a 	uxth.w	r3, sl
 8007034:	4473      	add	r3, lr
 8007036:	b2ac      	uxth	r4, r5
 8007038:	1b1b      	subs	r3, r3, r4
 800703a:	0c2c      	lsrs	r4, r5, #16
 800703c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007040:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800704a:	45c8      	cmp	r8, r9
 800704c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007050:	4694      	mov	ip, r2
 8007052:	f841 4b04 	str.w	r4, [r1], #4
 8007056:	d8e7      	bhi.n	8007028 <__mdiff+0x5c>
 8007058:	45bc      	cmp	ip, r7
 800705a:	d304      	bcc.n	8007066 <__mdiff+0x9a>
 800705c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007060:	b183      	cbz	r3, 8007084 <__mdiff+0xb8>
 8007062:	6106      	str	r6, [r0, #16]
 8007064:	e7c4      	b.n	8006ff0 <__mdiff+0x24>
 8007066:	f85c 4b04 	ldr.w	r4, [ip], #4
 800706a:	b2a2      	uxth	r2, r4
 800706c:	4472      	add	r2, lr
 800706e:	1413      	asrs	r3, r2, #16
 8007070:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007074:	b292      	uxth	r2, r2
 8007076:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800707a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800707e:	f841 2b04 	str.w	r2, [r1], #4
 8007082:	e7e9      	b.n	8007058 <__mdiff+0x8c>
 8007084:	3e01      	subs	r6, #1
 8007086:	e7e9      	b.n	800705c <__mdiff+0x90>

08007088 <__ulp>:
 8007088:	4b10      	ldr	r3, [pc, #64]	; (80070cc <__ulp+0x44>)
 800708a:	400b      	ands	r3, r1
 800708c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007090:	2b00      	cmp	r3, #0
 8007092:	dd02      	ble.n	800709a <__ulp+0x12>
 8007094:	2000      	movs	r0, #0
 8007096:	4619      	mov	r1, r3
 8007098:	4770      	bx	lr
 800709a:	425b      	negs	r3, r3
 800709c:	151b      	asrs	r3, r3, #20
 800709e:	2b13      	cmp	r3, #19
 80070a0:	f04f 0000 	mov.w	r0, #0
 80070a4:	f04f 0100 	mov.w	r1, #0
 80070a8:	dc04      	bgt.n	80070b4 <__ulp+0x2c>
 80070aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80070ae:	fa42 f103 	asr.w	r1, r2, r3
 80070b2:	4770      	bx	lr
 80070b4:	2201      	movs	r2, #1
 80070b6:	3b14      	subs	r3, #20
 80070b8:	2b1e      	cmp	r3, #30
 80070ba:	bfce      	itee	gt
 80070bc:	4613      	movgt	r3, r2
 80070be:	f1c3 031f 	rsble	r3, r3, #31
 80070c2:	fa02 f303 	lslle.w	r3, r2, r3
 80070c6:	4618      	mov	r0, r3
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	7ff00000 	.word	0x7ff00000

080070d0 <__b2d>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	6907      	ldr	r7, [r0, #16]
 80070d6:	f100 0914 	add.w	r9, r0, #20
 80070da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80070de:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80070e2:	f1a7 0804 	sub.w	r8, r7, #4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7ff fdc7 	bl	8006c7a <__hi0bits>
 80070ec:	f1c0 0320 	rsb	r3, r0, #32
 80070f0:	280a      	cmp	r0, #10
 80070f2:	600b      	str	r3, [r1, #0]
 80070f4:	491e      	ldr	r1, [pc, #120]	; (8007170 <__b2d+0xa0>)
 80070f6:	dc17      	bgt.n	8007128 <__b2d+0x58>
 80070f8:	45c1      	cmp	r9, r8
 80070fa:	bf28      	it	cs
 80070fc:	2200      	movcs	r2, #0
 80070fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8007102:	fa26 f30c 	lsr.w	r3, r6, ip
 8007106:	bf38      	it	cc
 8007108:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800710c:	ea43 0501 	orr.w	r5, r3, r1
 8007110:	f100 0315 	add.w	r3, r0, #21
 8007114:	fa06 f303 	lsl.w	r3, r6, r3
 8007118:	fa22 f20c 	lsr.w	r2, r2, ip
 800711c:	ea43 0402 	orr.w	r4, r3, r2
 8007120:	4620      	mov	r0, r4
 8007122:	4629      	mov	r1, r5
 8007124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007128:	45c1      	cmp	r9, r8
 800712a:	bf3a      	itte	cc
 800712c:	f1a7 0808 	subcc.w	r8, r7, #8
 8007130:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007134:	2200      	movcs	r2, #0
 8007136:	f1b0 030b 	subs.w	r3, r0, #11
 800713a:	d015      	beq.n	8007168 <__b2d+0x98>
 800713c:	409e      	lsls	r6, r3
 800713e:	f1c3 0720 	rsb	r7, r3, #32
 8007142:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007146:	fa22 f107 	lsr.w	r1, r2, r7
 800714a:	45c8      	cmp	r8, r9
 800714c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007150:	ea46 0501 	orr.w	r5, r6, r1
 8007154:	bf94      	ite	ls
 8007156:	2100      	movls	r1, #0
 8007158:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800715c:	fa02 f003 	lsl.w	r0, r2, r3
 8007160:	40f9      	lsrs	r1, r7
 8007162:	ea40 0401 	orr.w	r4, r0, r1
 8007166:	e7db      	b.n	8007120 <__b2d+0x50>
 8007168:	ea46 0501 	orr.w	r5, r6, r1
 800716c:	4614      	mov	r4, r2
 800716e:	e7d7      	b.n	8007120 <__b2d+0x50>
 8007170:	3ff00000 	.word	0x3ff00000

08007174 <__d2b>:
 8007174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007178:	461c      	mov	r4, r3
 800717a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800717e:	2101      	movs	r1, #1
 8007180:	4690      	mov	r8, r2
 8007182:	f7ff fcb6 	bl	8006af2 <_Balloc>
 8007186:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800718a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800718e:	4607      	mov	r7, r0
 8007190:	bb34      	cbnz	r4, 80071e0 <__d2b+0x6c>
 8007192:	9201      	str	r2, [sp, #4]
 8007194:	f1b8 0200 	subs.w	r2, r8, #0
 8007198:	d027      	beq.n	80071ea <__d2b+0x76>
 800719a:	a802      	add	r0, sp, #8
 800719c:	f840 2d08 	str.w	r2, [r0, #-8]!
 80071a0:	f7ff fd8a 	bl	8006cb8 <__lo0bits>
 80071a4:	9900      	ldr	r1, [sp, #0]
 80071a6:	b1f0      	cbz	r0, 80071e6 <__d2b+0x72>
 80071a8:	9a01      	ldr	r2, [sp, #4]
 80071aa:	f1c0 0320 	rsb	r3, r0, #32
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	430b      	orrs	r3, r1
 80071b4:	40c2      	lsrs	r2, r0
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	9201      	str	r2, [sp, #4]
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf14      	ite	ne
 80071c0:	2102      	movne	r1, #2
 80071c2:	2101      	moveq	r1, #1
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	6139      	str	r1, [r7, #16]
 80071c8:	b1c4      	cbz	r4, 80071fc <__d2b+0x88>
 80071ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071ce:	4404      	add	r4, r0
 80071d0:	6034      	str	r4, [r6, #0]
 80071d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071d6:	6028      	str	r0, [r5, #0]
 80071d8:	4638      	mov	r0, r7
 80071da:	b002      	add	sp, #8
 80071dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071e4:	e7d5      	b.n	8007192 <__d2b+0x1e>
 80071e6:	6179      	str	r1, [r7, #20]
 80071e8:	e7e7      	b.n	80071ba <__d2b+0x46>
 80071ea:	a801      	add	r0, sp, #4
 80071ec:	f7ff fd64 	bl	8006cb8 <__lo0bits>
 80071f0:	2101      	movs	r1, #1
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	6139      	str	r1, [r7, #16]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	3020      	adds	r0, #32
 80071fa:	e7e5      	b.n	80071c8 <__d2b+0x54>
 80071fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007200:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007204:	6030      	str	r0, [r6, #0]
 8007206:	6918      	ldr	r0, [r3, #16]
 8007208:	f7ff fd37 	bl	8006c7a <__hi0bits>
 800720c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007210:	e7e1      	b.n	80071d6 <__d2b+0x62>

08007212 <__ratio>:
 8007212:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	4688      	mov	r8, r1
 8007218:	4669      	mov	r1, sp
 800721a:	4681      	mov	r9, r0
 800721c:	f7ff ff58 	bl	80070d0 <__b2d>
 8007220:	468b      	mov	fp, r1
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	4640      	mov	r0, r8
 8007228:	a901      	add	r1, sp, #4
 800722a:	f7ff ff51 	bl	80070d0 <__b2d>
 800722e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007232:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007236:	460d      	mov	r5, r1
 8007238:	eba3 0c02 	sub.w	ip, r3, r2
 800723c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfd5      	itete	le
 800724a:	460a      	movle	r2, r1
 800724c:	463a      	movgt	r2, r7
 800724e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007252:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007256:	bfd8      	it	le
 8007258:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800725c:	462b      	mov	r3, r5
 800725e:	4602      	mov	r2, r0
 8007260:	4659      	mov	r1, fp
 8007262:	4630      	mov	r0, r6
 8007264:	f7f9 fad8 	bl	8000818 <__aeabi_ddiv>
 8007268:	b003      	add	sp, #12
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800726e <__copybits>:
 800726e:	3901      	subs	r1, #1
 8007270:	b510      	push	{r4, lr}
 8007272:	1149      	asrs	r1, r1, #5
 8007274:	6914      	ldr	r4, [r2, #16]
 8007276:	3101      	adds	r1, #1
 8007278:	f102 0314 	add.w	r3, r2, #20
 800727c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007284:	42a3      	cmp	r3, r4
 8007286:	4602      	mov	r2, r0
 8007288:	d303      	bcc.n	8007292 <__copybits+0x24>
 800728a:	2300      	movs	r3, #0
 800728c:	428a      	cmp	r2, r1
 800728e:	d305      	bcc.n	800729c <__copybits+0x2e>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	f853 2b04 	ldr.w	r2, [r3], #4
 8007296:	f840 2b04 	str.w	r2, [r0], #4
 800729a:	e7f3      	b.n	8007284 <__copybits+0x16>
 800729c:	f842 3b04 	str.w	r3, [r2], #4
 80072a0:	e7f4      	b.n	800728c <__copybits+0x1e>

080072a2 <__any_on>:
 80072a2:	f100 0214 	add.w	r2, r0, #20
 80072a6:	6900      	ldr	r0, [r0, #16]
 80072a8:	114b      	asrs	r3, r1, #5
 80072aa:	4298      	cmp	r0, r3
 80072ac:	b510      	push	{r4, lr}
 80072ae:	db11      	blt.n	80072d4 <__any_on+0x32>
 80072b0:	dd0a      	ble.n	80072c8 <__any_on+0x26>
 80072b2:	f011 011f 	ands.w	r1, r1, #31
 80072b6:	d007      	beq.n	80072c8 <__any_on+0x26>
 80072b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072bc:	fa24 f001 	lsr.w	r0, r4, r1
 80072c0:	fa00 f101 	lsl.w	r1, r0, r1
 80072c4:	428c      	cmp	r4, r1
 80072c6:	d10b      	bne.n	80072e0 <__any_on+0x3e>
 80072c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d803      	bhi.n	80072d8 <__any_on+0x36>
 80072d0:	2000      	movs	r0, #0
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	4603      	mov	r3, r0
 80072d6:	e7f7      	b.n	80072c8 <__any_on+0x26>
 80072d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072dc:	2900      	cmp	r1, #0
 80072de:	d0f5      	beq.n	80072cc <__any_on+0x2a>
 80072e0:	2001      	movs	r0, #1
 80072e2:	e7f6      	b.n	80072d2 <__any_on+0x30>

080072e4 <_calloc_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	fb02 f401 	mul.w	r4, r2, r1
 80072ea:	4621      	mov	r1, r4
 80072ec:	f000 f854 	bl	8007398 <_malloc_r>
 80072f0:	4605      	mov	r5, r0
 80072f2:	b118      	cbz	r0, 80072fc <_calloc_r+0x18>
 80072f4:	4622      	mov	r2, r4
 80072f6:	2100      	movs	r1, #0
 80072f8:	f7fc fc4a 	bl	8003b90 <memset>
 80072fc:	4628      	mov	r0, r5
 80072fe:	bd38      	pop	{r3, r4, r5, pc}

08007300 <_free_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4605      	mov	r5, r0
 8007304:	2900      	cmp	r1, #0
 8007306:	d043      	beq.n	8007390 <_free_r+0x90>
 8007308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730c:	1f0c      	subs	r4, r1, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	18e4      	addlt	r4, r4, r3
 8007314:	f000 fdbf 	bl	8007e96 <__malloc_lock>
 8007318:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <_free_r+0x94>)
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	4610      	mov	r0, r2
 800731e:	b933      	cbnz	r3, 800732e <_free_r+0x2e>
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	6014      	str	r4, [r2, #0]
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732a:	f000 bdb5 	b.w	8007e98 <__malloc_unlock>
 800732e:	42a3      	cmp	r3, r4
 8007330:	d90b      	bls.n	800734a <_free_r+0x4a>
 8007332:	6821      	ldr	r1, [r4, #0]
 8007334:	1862      	adds	r2, r4, r1
 8007336:	4293      	cmp	r3, r2
 8007338:	bf01      	itttt	eq
 800733a:	681a      	ldreq	r2, [r3, #0]
 800733c:	685b      	ldreq	r3, [r3, #4]
 800733e:	1852      	addeq	r2, r2, r1
 8007340:	6022      	streq	r2, [r4, #0]
 8007342:	6063      	str	r3, [r4, #4]
 8007344:	6004      	str	r4, [r0, #0]
 8007346:	e7ed      	b.n	8007324 <_free_r+0x24>
 8007348:	4613      	mov	r3, r2
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	b10a      	cbz	r2, 8007352 <_free_r+0x52>
 800734e:	42a2      	cmp	r2, r4
 8007350:	d9fa      	bls.n	8007348 <_free_r+0x48>
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	1858      	adds	r0, r3, r1
 8007356:	42a0      	cmp	r0, r4
 8007358:	d10b      	bne.n	8007372 <_free_r+0x72>
 800735a:	6820      	ldr	r0, [r4, #0]
 800735c:	4401      	add	r1, r0
 800735e:	1858      	adds	r0, r3, r1
 8007360:	4282      	cmp	r2, r0
 8007362:	6019      	str	r1, [r3, #0]
 8007364:	d1de      	bne.n	8007324 <_free_r+0x24>
 8007366:	6810      	ldr	r0, [r2, #0]
 8007368:	6852      	ldr	r2, [r2, #4]
 800736a:	4401      	add	r1, r0
 800736c:	6019      	str	r1, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	e7d8      	b.n	8007324 <_free_r+0x24>
 8007372:	d902      	bls.n	800737a <_free_r+0x7a>
 8007374:	230c      	movs	r3, #12
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	e7d4      	b.n	8007324 <_free_r+0x24>
 800737a:	6820      	ldr	r0, [r4, #0]
 800737c:	1821      	adds	r1, r4, r0
 800737e:	428a      	cmp	r2, r1
 8007380:	bf01      	itttt	eq
 8007382:	6811      	ldreq	r1, [r2, #0]
 8007384:	6852      	ldreq	r2, [r2, #4]
 8007386:	1809      	addeq	r1, r1, r0
 8007388:	6021      	streq	r1, [r4, #0]
 800738a:	6062      	str	r2, [r4, #4]
 800738c:	605c      	str	r4, [r3, #4]
 800738e:	e7c9      	b.n	8007324 <_free_r+0x24>
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	20000220 	.word	0x20000220

08007398 <_malloc_r>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	1ccd      	adds	r5, r1, #3
 800739c:	f025 0503 	bic.w	r5, r5, #3
 80073a0:	3508      	adds	r5, #8
 80073a2:	2d0c      	cmp	r5, #12
 80073a4:	bf38      	it	cc
 80073a6:	250c      	movcc	r5, #12
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	4606      	mov	r6, r0
 80073ac:	db01      	blt.n	80073b2 <_malloc_r+0x1a>
 80073ae:	42a9      	cmp	r1, r5
 80073b0:	d903      	bls.n	80073ba <_malloc_r+0x22>
 80073b2:	230c      	movs	r3, #12
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	2000      	movs	r0, #0
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	f000 fd6c 	bl	8007e96 <__malloc_lock>
 80073be:	4a21      	ldr	r2, [pc, #132]	; (8007444 <_malloc_r+0xac>)
 80073c0:	6814      	ldr	r4, [r2, #0]
 80073c2:	4621      	mov	r1, r4
 80073c4:	b991      	cbnz	r1, 80073ec <_malloc_r+0x54>
 80073c6:	4c20      	ldr	r4, [pc, #128]	; (8007448 <_malloc_r+0xb0>)
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	b91b      	cbnz	r3, 80073d4 <_malloc_r+0x3c>
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 facd 	bl	800796c <_sbrk_r>
 80073d2:	6020      	str	r0, [r4, #0]
 80073d4:	4629      	mov	r1, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 fac8 	bl	800796c <_sbrk_r>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d124      	bne.n	800742a <_malloc_r+0x92>
 80073e0:	230c      	movs	r3, #12
 80073e2:	4630      	mov	r0, r6
 80073e4:	6033      	str	r3, [r6, #0]
 80073e6:	f000 fd57 	bl	8007e98 <__malloc_unlock>
 80073ea:	e7e4      	b.n	80073b6 <_malloc_r+0x1e>
 80073ec:	680b      	ldr	r3, [r1, #0]
 80073ee:	1b5b      	subs	r3, r3, r5
 80073f0:	d418      	bmi.n	8007424 <_malloc_r+0x8c>
 80073f2:	2b0b      	cmp	r3, #11
 80073f4:	d90f      	bls.n	8007416 <_malloc_r+0x7e>
 80073f6:	600b      	str	r3, [r1, #0]
 80073f8:	18cc      	adds	r4, r1, r3
 80073fa:	50cd      	str	r5, [r1, r3]
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 fd4b 	bl	8007e98 <__malloc_unlock>
 8007402:	f104 000b 	add.w	r0, r4, #11
 8007406:	1d23      	adds	r3, r4, #4
 8007408:	f020 0007 	bic.w	r0, r0, #7
 800740c:	1ac3      	subs	r3, r0, r3
 800740e:	d0d3      	beq.n	80073b8 <_malloc_r+0x20>
 8007410:	425a      	negs	r2, r3
 8007412:	50e2      	str	r2, [r4, r3]
 8007414:	e7d0      	b.n	80073b8 <_malloc_r+0x20>
 8007416:	684b      	ldr	r3, [r1, #4]
 8007418:	428c      	cmp	r4, r1
 800741a:	bf16      	itet	ne
 800741c:	6063      	strne	r3, [r4, #4]
 800741e:	6013      	streq	r3, [r2, #0]
 8007420:	460c      	movne	r4, r1
 8007422:	e7eb      	b.n	80073fc <_malloc_r+0x64>
 8007424:	460c      	mov	r4, r1
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	e7cc      	b.n	80073c4 <_malloc_r+0x2c>
 800742a:	1cc4      	adds	r4, r0, #3
 800742c:	f024 0403 	bic.w	r4, r4, #3
 8007430:	42a0      	cmp	r0, r4
 8007432:	d005      	beq.n	8007440 <_malloc_r+0xa8>
 8007434:	1a21      	subs	r1, r4, r0
 8007436:	4630      	mov	r0, r6
 8007438:	f000 fa98 	bl	800796c <_sbrk_r>
 800743c:	3001      	adds	r0, #1
 800743e:	d0cf      	beq.n	80073e0 <_malloc_r+0x48>
 8007440:	6025      	str	r5, [r4, #0]
 8007442:	e7db      	b.n	80073fc <_malloc_r+0x64>
 8007444:	20000220 	.word	0x20000220
 8007448:	20000224 	.word	0x20000224

0800744c <__ssputs_r>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	688e      	ldr	r6, [r1, #8]
 8007452:	4682      	mov	sl, r0
 8007454:	429e      	cmp	r6, r3
 8007456:	460c      	mov	r4, r1
 8007458:	4690      	mov	r8, r2
 800745a:	4699      	mov	r9, r3
 800745c:	d837      	bhi.n	80074ce <__ssputs_r+0x82>
 800745e:	898a      	ldrh	r2, [r1, #12]
 8007460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007464:	d031      	beq.n	80074ca <__ssputs_r+0x7e>
 8007466:	2302      	movs	r3, #2
 8007468:	6825      	ldr	r5, [r4, #0]
 800746a:	6909      	ldr	r1, [r1, #16]
 800746c:	1a6f      	subs	r7, r5, r1
 800746e:	6965      	ldr	r5, [r4, #20]
 8007470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007474:	fb95 f5f3 	sdiv	r5, r5, r3
 8007478:	f109 0301 	add.w	r3, r9, #1
 800747c:	443b      	add	r3, r7
 800747e:	429d      	cmp	r5, r3
 8007480:	bf38      	it	cc
 8007482:	461d      	movcc	r5, r3
 8007484:	0553      	lsls	r3, r2, #21
 8007486:	d530      	bpl.n	80074ea <__ssputs_r+0x9e>
 8007488:	4629      	mov	r1, r5
 800748a:	f7ff ff85 	bl	8007398 <_malloc_r>
 800748e:	4606      	mov	r6, r0
 8007490:	b950      	cbnz	r0, 80074a8 <__ssputs_r+0x5c>
 8007492:	230c      	movs	r3, #12
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	463a      	mov	r2, r7
 80074aa:	6921      	ldr	r1, [r4, #16]
 80074ac:	f7ff fb16 	bl	8006adc <memcpy>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	6126      	str	r6, [r4, #16]
 80074be:	443e      	add	r6, r7
 80074c0:	6026      	str	r6, [r4, #0]
 80074c2:	464e      	mov	r6, r9
 80074c4:	6165      	str	r5, [r4, #20]
 80074c6:	1bed      	subs	r5, r5, r7
 80074c8:	60a5      	str	r5, [r4, #8]
 80074ca:	454e      	cmp	r6, r9
 80074cc:	d900      	bls.n	80074d0 <__ssputs_r+0x84>
 80074ce:	464e      	mov	r6, r9
 80074d0:	4632      	mov	r2, r6
 80074d2:	4641      	mov	r1, r8
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	f000 fcc5 	bl	8007e64 <memmove>
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	2000      	movs	r0, #0
 80074de:	1b9b      	subs	r3, r3, r6
 80074e0:	60a3      	str	r3, [r4, #8]
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	441e      	add	r6, r3
 80074e6:	6026      	str	r6, [r4, #0]
 80074e8:	e7dc      	b.n	80074a4 <__ssputs_r+0x58>
 80074ea:	462a      	mov	r2, r5
 80074ec:	f000 fcd5 	bl	8007e9a <_realloc_r>
 80074f0:	4606      	mov	r6, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d1e2      	bne.n	80074bc <__ssputs_r+0x70>
 80074f6:	6921      	ldr	r1, [r4, #16]
 80074f8:	4650      	mov	r0, sl
 80074fa:	f7ff ff01 	bl	8007300 <_free_r>
 80074fe:	e7c8      	b.n	8007492 <__ssputs_r+0x46>

08007500 <_svfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	461d      	mov	r5, r3
 8007506:	898b      	ldrh	r3, [r1, #12]
 8007508:	b09d      	sub	sp, #116	; 0x74
 800750a:	061f      	lsls	r7, r3, #24
 800750c:	4680      	mov	r8, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d50f      	bpl.n	8007534 <_svfiprintf_r+0x34>
 8007514:	690b      	ldr	r3, [r1, #16]
 8007516:	b96b      	cbnz	r3, 8007534 <_svfiprintf_r+0x34>
 8007518:	2140      	movs	r1, #64	; 0x40
 800751a:	f7ff ff3d 	bl	8007398 <_malloc_r>
 800751e:	6020      	str	r0, [r4, #0]
 8007520:	6120      	str	r0, [r4, #16]
 8007522:	b928      	cbnz	r0, 8007530 <_svfiprintf_r+0x30>
 8007524:	230c      	movs	r3, #12
 8007526:	f8c8 3000 	str.w	r3, [r8]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	e0c8      	b.n	80076c2 <_svfiprintf_r+0x1c2>
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	6163      	str	r3, [r4, #20]
 8007534:	2300      	movs	r3, #0
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	2320      	movs	r3, #32
 800753a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753e:	2330      	movs	r3, #48	; 0x30
 8007540:	f04f 0b01 	mov.w	fp, #1
 8007544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007548:	9503      	str	r5, [sp, #12]
 800754a:	4637      	mov	r7, r6
 800754c:	463d      	mov	r5, r7
 800754e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007552:	b10b      	cbz	r3, 8007558 <_svfiprintf_r+0x58>
 8007554:	2b25      	cmp	r3, #37	; 0x25
 8007556:	d13e      	bne.n	80075d6 <_svfiprintf_r+0xd6>
 8007558:	ebb7 0a06 	subs.w	sl, r7, r6
 800755c:	d00b      	beq.n	8007576 <_svfiprintf_r+0x76>
 800755e:	4653      	mov	r3, sl
 8007560:	4632      	mov	r2, r6
 8007562:	4621      	mov	r1, r4
 8007564:	4640      	mov	r0, r8
 8007566:	f7ff ff71 	bl	800744c <__ssputs_r>
 800756a:	3001      	adds	r0, #1
 800756c:	f000 80a4 	beq.w	80076b8 <_svfiprintf_r+0x1b8>
 8007570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007572:	4453      	add	r3, sl
 8007574:	9309      	str	r3, [sp, #36]	; 0x24
 8007576:	783b      	ldrb	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 809d 	beq.w	80076b8 <_svfiprintf_r+0x1b8>
 800757e:	2300      	movs	r3, #0
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9307      	str	r3, [sp, #28]
 800758c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007590:	931a      	str	r3, [sp, #104]	; 0x68
 8007592:	462f      	mov	r7, r5
 8007594:	2205      	movs	r2, #5
 8007596:	f817 1b01 	ldrb.w	r1, [r7], #1
 800759a:	4850      	ldr	r0, [pc, #320]	; (80076dc <_svfiprintf_r+0x1dc>)
 800759c:	f7ff fa90 	bl	8006ac0 <memchr>
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	b9d0      	cbnz	r0, 80075da <_svfiprintf_r+0xda>
 80075a4:	06d9      	lsls	r1, r3, #27
 80075a6:	bf44      	itt	mi
 80075a8:	2220      	movmi	r2, #32
 80075aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075ae:	071a      	lsls	r2, r3, #28
 80075b0:	bf44      	itt	mi
 80075b2:	222b      	movmi	r2, #43	; 0x2b
 80075b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075b8:	782a      	ldrb	r2, [r5, #0]
 80075ba:	2a2a      	cmp	r2, #42	; 0x2a
 80075bc:	d015      	beq.n	80075ea <_svfiprintf_r+0xea>
 80075be:	462f      	mov	r7, r5
 80075c0:	2000      	movs	r0, #0
 80075c2:	250a      	movs	r5, #10
 80075c4:	9a07      	ldr	r2, [sp, #28]
 80075c6:	4639      	mov	r1, r7
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94d      	bls.n	800766e <_svfiprintf_r+0x16e>
 80075d2:	b1b8      	cbz	r0, 8007604 <_svfiprintf_r+0x104>
 80075d4:	e00f      	b.n	80075f6 <_svfiprintf_r+0xf6>
 80075d6:	462f      	mov	r7, r5
 80075d8:	e7b8      	b.n	800754c <_svfiprintf_r+0x4c>
 80075da:	4a40      	ldr	r2, [pc, #256]	; (80076dc <_svfiprintf_r+0x1dc>)
 80075dc:	463d      	mov	r5, r7
 80075de:	1a80      	subs	r0, r0, r2
 80075e0:	fa0b f000 	lsl.w	r0, fp, r0
 80075e4:	4318      	orrs	r0, r3
 80075e6:	9004      	str	r0, [sp, #16]
 80075e8:	e7d3      	b.n	8007592 <_svfiprintf_r+0x92>
 80075ea:	9a03      	ldr	r2, [sp, #12]
 80075ec:	1d11      	adds	r1, r2, #4
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	9103      	str	r1, [sp, #12]
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	db01      	blt.n	80075fa <_svfiprintf_r+0xfa>
 80075f6:	9207      	str	r2, [sp, #28]
 80075f8:	e004      	b.n	8007604 <_svfiprintf_r+0x104>
 80075fa:	4252      	negs	r2, r2
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	9207      	str	r2, [sp, #28]
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	783b      	ldrb	r3, [r7, #0]
 8007606:	2b2e      	cmp	r3, #46	; 0x2e
 8007608:	d10c      	bne.n	8007624 <_svfiprintf_r+0x124>
 800760a:	787b      	ldrb	r3, [r7, #1]
 800760c:	2b2a      	cmp	r3, #42	; 0x2a
 800760e:	d133      	bne.n	8007678 <_svfiprintf_r+0x178>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	3702      	adds	r7, #2
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	9203      	str	r2, [sp, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	4d2e      	ldr	r5, [pc, #184]	; (80076e0 <_svfiprintf_r+0x1e0>)
 8007626:	2203      	movs	r2, #3
 8007628:	7839      	ldrb	r1, [r7, #0]
 800762a:	4628      	mov	r0, r5
 800762c:	f7ff fa48 	bl	8006ac0 <memchr>
 8007630:	b138      	cbz	r0, 8007642 <_svfiprintf_r+0x142>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	1b40      	subs	r0, r0, r5
 8007636:	fa03 f000 	lsl.w	r0, r3, r0
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	3701      	adds	r7, #1
 800763e:	4303      	orrs	r3, r0
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	7839      	ldrb	r1, [r7, #0]
 8007644:	2206      	movs	r2, #6
 8007646:	4827      	ldr	r0, [pc, #156]	; (80076e4 <_svfiprintf_r+0x1e4>)
 8007648:	1c7e      	adds	r6, r7, #1
 800764a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764e:	f7ff fa37 	bl	8006ac0 <memchr>
 8007652:	2800      	cmp	r0, #0
 8007654:	d038      	beq.n	80076c8 <_svfiprintf_r+0x1c8>
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <_svfiprintf_r+0x1e8>)
 8007658:	bb13      	cbnz	r3, 80076a0 <_svfiprintf_r+0x1a0>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	3308      	adds	r3, #8
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	444b      	add	r3, r9
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e76d      	b.n	800754a <_svfiprintf_r+0x4a>
 800766e:	fb05 3202 	mla	r2, r5, r2, r3
 8007672:	2001      	movs	r0, #1
 8007674:	460f      	mov	r7, r1
 8007676:	e7a6      	b.n	80075c6 <_svfiprintf_r+0xc6>
 8007678:	2300      	movs	r3, #0
 800767a:	250a      	movs	r5, #10
 800767c:	4619      	mov	r1, r3
 800767e:	3701      	adds	r7, #1
 8007680:	9305      	str	r3, [sp, #20]
 8007682:	4638      	mov	r0, r7
 8007684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007688:	3a30      	subs	r2, #48	; 0x30
 800768a:	2a09      	cmp	r2, #9
 800768c:	d903      	bls.n	8007696 <_svfiprintf_r+0x196>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c8      	beq.n	8007624 <_svfiprintf_r+0x124>
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	e7c6      	b.n	8007624 <_svfiprintf_r+0x124>
 8007696:	fb05 2101 	mla	r1, r5, r1, r2
 800769a:	2301      	movs	r3, #1
 800769c:	4607      	mov	r7, r0
 800769e:	e7f0      	b.n	8007682 <_svfiprintf_r+0x182>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4622      	mov	r2, r4
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <_svfiprintf_r+0x1ec>)
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7fc fb0a 	bl	8003cc4 <_printf_float>
 80076b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076b4:	4681      	mov	r9, r0
 80076b6:	d1d6      	bne.n	8007666 <_svfiprintf_r+0x166>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	065b      	lsls	r3, r3, #25
 80076bc:	f53f af35 	bmi.w	800752a <_svfiprintf_r+0x2a>
 80076c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c2:	b01d      	add	sp, #116	; 0x74
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	ab03      	add	r3, sp, #12
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4622      	mov	r2, r4
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <_svfiprintf_r+0x1ec>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7fc fda2 	bl	800421c <_printf_i>
 80076d8:	e7ea      	b.n	80076b0 <_svfiprintf_r+0x1b0>
 80076da:	bf00      	nop
 80076dc:	08008214 	.word	0x08008214
 80076e0:	0800821a 	.word	0x0800821a
 80076e4:	0800821e 	.word	0x0800821e
 80076e8:	08003cc5 	.word	0x08003cc5
 80076ec:	0800744d 	.word	0x0800744d

080076f0 <__sfputc_r>:
 80076f0:	6893      	ldr	r3, [r2, #8]
 80076f2:	b410      	push	{r4}
 80076f4:	3b01      	subs	r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	6093      	str	r3, [r2, #8]
 80076fa:	da07      	bge.n	800770c <__sfputc_r+0x1c>
 80076fc:	6994      	ldr	r4, [r2, #24]
 80076fe:	42a3      	cmp	r3, r4
 8007700:	db01      	blt.n	8007706 <__sfputc_r+0x16>
 8007702:	290a      	cmp	r1, #10
 8007704:	d102      	bne.n	800770c <__sfputc_r+0x1c>
 8007706:	bc10      	pop	{r4}
 8007708:	f000 b996 	b.w	8007a38 <__swbuf_r>
 800770c:	6813      	ldr	r3, [r2, #0]
 800770e:	1c58      	adds	r0, r3, #1
 8007710:	6010      	str	r0, [r2, #0]
 8007712:	7019      	strb	r1, [r3, #0]
 8007714:	4608      	mov	r0, r1
 8007716:	bc10      	pop	{r4}
 8007718:	4770      	bx	lr

0800771a <__sfputs_r>:
 800771a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771c:	4606      	mov	r6, r0
 800771e:	460f      	mov	r7, r1
 8007720:	4614      	mov	r4, r2
 8007722:	18d5      	adds	r5, r2, r3
 8007724:	42ac      	cmp	r4, r5
 8007726:	d101      	bne.n	800772c <__sfputs_r+0x12>
 8007728:	2000      	movs	r0, #0
 800772a:	e007      	b.n	800773c <__sfputs_r+0x22>
 800772c:	463a      	mov	r2, r7
 800772e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffdc 	bl	80076f0 <__sfputc_r>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d1f3      	bne.n	8007724 <__sfputs_r+0xa>
 800773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007740 <_vfiprintf_r>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	b09d      	sub	sp, #116	; 0x74
 8007748:	4617      	mov	r7, r2
 800774a:	461d      	mov	r5, r3
 800774c:	4606      	mov	r6, r0
 800774e:	b118      	cbz	r0, 8007758 <_vfiprintf_r+0x18>
 8007750:	6983      	ldr	r3, [r0, #24]
 8007752:	b90b      	cbnz	r3, 8007758 <_vfiprintf_r+0x18>
 8007754:	f7fe fdd4 	bl	8006300 <__sinit>
 8007758:	4b7c      	ldr	r3, [pc, #496]	; (800794c <_vfiprintf_r+0x20c>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d158      	bne.n	8007810 <_vfiprintf_r+0xd0>
 800775e:	6874      	ldr	r4, [r6, #4]
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	0718      	lsls	r0, r3, #28
 8007764:	d55e      	bpl.n	8007824 <_vfiprintf_r+0xe4>
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05b      	beq.n	8007824 <_vfiprintf_r+0xe4>
 800776c:	2300      	movs	r3, #0
 800776e:	9309      	str	r3, [sp, #36]	; 0x24
 8007770:	2320      	movs	r3, #32
 8007772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	f04f 0b01 	mov.w	fp, #1
 800777c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007780:	9503      	str	r5, [sp, #12]
 8007782:	46b8      	mov	r8, r7
 8007784:	4645      	mov	r5, r8
 8007786:	f815 3b01 	ldrb.w	r3, [r5], #1
 800778a:	b10b      	cbz	r3, 8007790 <_vfiprintf_r+0x50>
 800778c:	2b25      	cmp	r3, #37	; 0x25
 800778e:	d154      	bne.n	800783a <_vfiprintf_r+0xfa>
 8007790:	ebb8 0a07 	subs.w	sl, r8, r7
 8007794:	d00b      	beq.n	80077ae <_vfiprintf_r+0x6e>
 8007796:	4653      	mov	r3, sl
 8007798:	463a      	mov	r2, r7
 800779a:	4621      	mov	r1, r4
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff ffbc 	bl	800771a <__sfputs_r>
 80077a2:	3001      	adds	r0, #1
 80077a4:	f000 80c2 	beq.w	800792c <_vfiprintf_r+0x1ec>
 80077a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077aa:	4453      	add	r3, sl
 80077ac:	9309      	str	r3, [sp, #36]	; 0x24
 80077ae:	f898 3000 	ldrb.w	r3, [r8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80ba 	beq.w	800792c <_vfiprintf_r+0x1ec>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ca:	931a      	str	r3, [sp, #104]	; 0x68
 80077cc:	46a8      	mov	r8, r5
 80077ce:	2205      	movs	r2, #5
 80077d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80077d4:	485e      	ldr	r0, [pc, #376]	; (8007950 <_vfiprintf_r+0x210>)
 80077d6:	f7ff f973 	bl	8006ac0 <memchr>
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	bb78      	cbnz	r0, 800783e <_vfiprintf_r+0xfe>
 80077de:	06d9      	lsls	r1, r3, #27
 80077e0:	bf44      	itt	mi
 80077e2:	2220      	movmi	r2, #32
 80077e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077e8:	071a      	lsls	r2, r3, #28
 80077ea:	bf44      	itt	mi
 80077ec:	222b      	movmi	r2, #43	; 0x2b
 80077ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077f2:	782a      	ldrb	r2, [r5, #0]
 80077f4:	2a2a      	cmp	r2, #42	; 0x2a
 80077f6:	d02a      	beq.n	800784e <_vfiprintf_r+0x10e>
 80077f8:	46a8      	mov	r8, r5
 80077fa:	2000      	movs	r0, #0
 80077fc:	250a      	movs	r5, #10
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	4641      	mov	r1, r8
 8007802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007806:	3b30      	subs	r3, #48	; 0x30
 8007808:	2b09      	cmp	r3, #9
 800780a:	d969      	bls.n	80078e0 <_vfiprintf_r+0x1a0>
 800780c:	b360      	cbz	r0, 8007868 <_vfiprintf_r+0x128>
 800780e:	e024      	b.n	800785a <_vfiprintf_r+0x11a>
 8007810:	4b50      	ldr	r3, [pc, #320]	; (8007954 <_vfiprintf_r+0x214>)
 8007812:	429c      	cmp	r4, r3
 8007814:	d101      	bne.n	800781a <_vfiprintf_r+0xda>
 8007816:	68b4      	ldr	r4, [r6, #8]
 8007818:	e7a2      	b.n	8007760 <_vfiprintf_r+0x20>
 800781a:	4b4f      	ldr	r3, [pc, #316]	; (8007958 <_vfiprintf_r+0x218>)
 800781c:	429c      	cmp	r4, r3
 800781e:	bf08      	it	eq
 8007820:	68f4      	ldreq	r4, [r6, #12]
 8007822:	e79d      	b.n	8007760 <_vfiprintf_r+0x20>
 8007824:	4621      	mov	r1, r4
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f978 	bl	8007b1c <__swsetup_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	d09d      	beq.n	800776c <_vfiprintf_r+0x2c>
 8007830:	f04f 30ff 	mov.w	r0, #4294967295
 8007834:	b01d      	add	sp, #116	; 0x74
 8007836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783a:	46a8      	mov	r8, r5
 800783c:	e7a2      	b.n	8007784 <_vfiprintf_r+0x44>
 800783e:	4a44      	ldr	r2, [pc, #272]	; (8007950 <_vfiprintf_r+0x210>)
 8007840:	4645      	mov	r5, r8
 8007842:	1a80      	subs	r0, r0, r2
 8007844:	fa0b f000 	lsl.w	r0, fp, r0
 8007848:	4318      	orrs	r0, r3
 800784a:	9004      	str	r0, [sp, #16]
 800784c:	e7be      	b.n	80077cc <_vfiprintf_r+0x8c>
 800784e:	9a03      	ldr	r2, [sp, #12]
 8007850:	1d11      	adds	r1, r2, #4
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	2a00      	cmp	r2, #0
 8007858:	db01      	blt.n	800785e <_vfiprintf_r+0x11e>
 800785a:	9207      	str	r2, [sp, #28]
 800785c:	e004      	b.n	8007868 <_vfiprintf_r+0x128>
 800785e:	4252      	negs	r2, r2
 8007860:	f043 0302 	orr.w	r3, r3, #2
 8007864:	9207      	str	r2, [sp, #28]
 8007866:	9304      	str	r3, [sp, #16]
 8007868:	f898 3000 	ldrb.w	r3, [r8]
 800786c:	2b2e      	cmp	r3, #46	; 0x2e
 800786e:	d10e      	bne.n	800788e <_vfiprintf_r+0x14e>
 8007870:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007874:	2b2a      	cmp	r3, #42	; 0x2a
 8007876:	d138      	bne.n	80078ea <_vfiprintf_r+0x1aa>
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	f108 0802 	add.w	r8, r8, #2
 800787e:	1d1a      	adds	r2, r3, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	9203      	str	r2, [sp, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	bfb8      	it	lt
 8007888:	f04f 33ff 	movlt.w	r3, #4294967295
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	4d33      	ldr	r5, [pc, #204]	; (800795c <_vfiprintf_r+0x21c>)
 8007890:	2203      	movs	r2, #3
 8007892:	f898 1000 	ldrb.w	r1, [r8]
 8007896:	4628      	mov	r0, r5
 8007898:	f7ff f912 	bl	8006ac0 <memchr>
 800789c:	b140      	cbz	r0, 80078b0 <_vfiprintf_r+0x170>
 800789e:	2340      	movs	r3, #64	; 0x40
 80078a0:	1b40      	subs	r0, r0, r5
 80078a2:	fa03 f000 	lsl.w	r0, r3, r0
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	f108 0801 	add.w	r8, r8, #1
 80078ac:	4303      	orrs	r3, r0
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	f898 1000 	ldrb.w	r1, [r8]
 80078b4:	2206      	movs	r2, #6
 80078b6:	482a      	ldr	r0, [pc, #168]	; (8007960 <_vfiprintf_r+0x220>)
 80078b8:	f108 0701 	add.w	r7, r8, #1
 80078bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c0:	f7ff f8fe 	bl	8006ac0 <memchr>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d037      	beq.n	8007938 <_vfiprintf_r+0x1f8>
 80078c8:	4b26      	ldr	r3, [pc, #152]	; (8007964 <_vfiprintf_r+0x224>)
 80078ca:	bb1b      	cbnz	r3, 8007914 <_vfiprintf_r+0x1d4>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	3307      	adds	r3, #7
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	444b      	add	r3, r9
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	e750      	b.n	8007782 <_vfiprintf_r+0x42>
 80078e0:	fb05 3202 	mla	r2, r5, r2, r3
 80078e4:	2001      	movs	r0, #1
 80078e6:	4688      	mov	r8, r1
 80078e8:	e78a      	b.n	8007800 <_vfiprintf_r+0xc0>
 80078ea:	2300      	movs	r3, #0
 80078ec:	250a      	movs	r5, #10
 80078ee:	4619      	mov	r1, r3
 80078f0:	f108 0801 	add.w	r8, r8, #1
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4640      	mov	r0, r8
 80078f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fc:	3a30      	subs	r2, #48	; 0x30
 80078fe:	2a09      	cmp	r2, #9
 8007900:	d903      	bls.n	800790a <_vfiprintf_r+0x1ca>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c3      	beq.n	800788e <_vfiprintf_r+0x14e>
 8007906:	9105      	str	r1, [sp, #20]
 8007908:	e7c1      	b.n	800788e <_vfiprintf_r+0x14e>
 800790a:	fb05 2101 	mla	r1, r5, r1, r2
 800790e:	2301      	movs	r3, #1
 8007910:	4680      	mov	r8, r0
 8007912:	e7f0      	b.n	80078f6 <_vfiprintf_r+0x1b6>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4622      	mov	r2, r4
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <_vfiprintf_r+0x228>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	4630      	mov	r0, r6
 8007920:	f7fc f9d0 	bl	8003cc4 <_printf_float>
 8007924:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007928:	4681      	mov	r9, r0
 800792a:	d1d5      	bne.n	80078d8 <_vfiprintf_r+0x198>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	065b      	lsls	r3, r3, #25
 8007930:	f53f af7e 	bmi.w	8007830 <_vfiprintf_r+0xf0>
 8007934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007936:	e77d      	b.n	8007834 <_vfiprintf_r+0xf4>
 8007938:	ab03      	add	r3, sp, #12
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4622      	mov	r2, r4
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <_vfiprintf_r+0x228>)
 8007940:	a904      	add	r1, sp, #16
 8007942:	4630      	mov	r0, r6
 8007944:	f7fc fc6a 	bl	800421c <_printf_i>
 8007948:	e7ec      	b.n	8007924 <_vfiprintf_r+0x1e4>
 800794a:	bf00      	nop
 800794c:	080080c8 	.word	0x080080c8
 8007950:	08008214 	.word	0x08008214
 8007954:	080080e8 	.word	0x080080e8
 8007958:	080080a8 	.word	0x080080a8
 800795c:	0800821a 	.word	0x0800821a
 8007960:	0800821e 	.word	0x0800821e
 8007964:	08003cc5 	.word	0x08003cc5
 8007968:	0800771b 	.word	0x0800771b

0800796c <_sbrk_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	2300      	movs	r3, #0
 8007970:	4c05      	ldr	r4, [pc, #20]	; (8007988 <_sbrk_r+0x1c>)
 8007972:	4605      	mov	r5, r0
 8007974:	4608      	mov	r0, r1
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	f7f9 fd9a 	bl	80014b0 <_sbrk>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_sbrk_r+0x1a>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	b103      	cbz	r3, 8007986 <_sbrk_r+0x1a>
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	200003a0 	.word	0x200003a0

0800798c <__sread>:
 800798c:	b510      	push	{r4, lr}
 800798e:	460c      	mov	r4, r1
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	f000 faa8 	bl	8007ee8 <_read_r>
 8007998:	2800      	cmp	r0, #0
 800799a:	bfab      	itete	ge
 800799c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800799e:	89a3      	ldrhlt	r3, [r4, #12]
 80079a0:	181b      	addge	r3, r3, r0
 80079a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079a6:	bfac      	ite	ge
 80079a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079aa:	81a3      	strhlt	r3, [r4, #12]
 80079ac:	bd10      	pop	{r4, pc}

080079ae <__swrite>:
 80079ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	461f      	mov	r7, r3
 80079b4:	898b      	ldrh	r3, [r1, #12]
 80079b6:	4605      	mov	r5, r0
 80079b8:	05db      	lsls	r3, r3, #23
 80079ba:	460c      	mov	r4, r1
 80079bc:	4616      	mov	r6, r2
 80079be:	d505      	bpl.n	80079cc <__swrite+0x1e>
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c8:	f000 f9d6 	bl	8007d78 <_lseek_r>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	4632      	mov	r2, r6
 80079d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079da:	463b      	mov	r3, r7
 80079dc:	4628      	mov	r0, r5
 80079de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	f000 b889 	b.w	8007af8 <_write_r>

080079e6 <__sseek>:
 80079e6:	b510      	push	{r4, lr}
 80079e8:	460c      	mov	r4, r1
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 f9c3 	bl	8007d78 <_lseek_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	bf15      	itete	ne
 80079f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80079fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a02:	81a3      	strheq	r3, [r4, #12]
 8007a04:	bf18      	it	ne
 8007a06:	81a3      	strhne	r3, [r4, #12]
 8007a08:	bd10      	pop	{r4, pc}

08007a0a <__sclose>:
 8007a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0e:	f000 b8f3 	b.w	8007bf8 <_close_r>

08007a12 <strncmp>:
 8007a12:	b510      	push	{r4, lr}
 8007a14:	b16a      	cbz	r2, 8007a32 <strncmp+0x20>
 8007a16:	3901      	subs	r1, #1
 8007a18:	1884      	adds	r4, r0, r2
 8007a1a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d103      	bne.n	8007a2e <strncmp+0x1c>
 8007a26:	42a0      	cmp	r0, r4
 8007a28:	d001      	beq.n	8007a2e <strncmp+0x1c>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f5      	bne.n	8007a1a <strncmp+0x8>
 8007a2e:	1a98      	subs	r0, r3, r2
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	4610      	mov	r0, r2
 8007a34:	e7fc      	b.n	8007a30 <strncmp+0x1e>
	...

08007a38 <__swbuf_r>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b118      	cbz	r0, 8007a4a <__swbuf_r+0x12>
 8007a42:	6983      	ldr	r3, [r0, #24]
 8007a44:	b90b      	cbnz	r3, 8007a4a <__swbuf_r+0x12>
 8007a46:	f7fe fc5b 	bl	8006300 <__sinit>
 8007a4a:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <__swbuf_r+0x98>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d12a      	bne.n	8007aa6 <__swbuf_r+0x6e>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	69a3      	ldr	r3, [r4, #24]
 8007a54:	60a3      	str	r3, [r4, #8]
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	071a      	lsls	r2, r3, #28
 8007a5a:	d52e      	bpl.n	8007aba <__swbuf_r+0x82>
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	b363      	cbz	r3, 8007aba <__swbuf_r+0x82>
 8007a60:	6923      	ldr	r3, [r4, #16]
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	b2f6      	uxtb	r6, r6
 8007a66:	1ac0      	subs	r0, r0, r3
 8007a68:	6963      	ldr	r3, [r4, #20]
 8007a6a:	4637      	mov	r7, r6
 8007a6c:	4283      	cmp	r3, r0
 8007a6e:	dc04      	bgt.n	8007a7a <__swbuf_r+0x42>
 8007a70:	4621      	mov	r1, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 f956 	bl	8007d24 <_fflush_r>
 8007a78:	bb28      	cbnz	r0, 8007ac6 <__swbuf_r+0x8e>
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	701e      	strb	r6, [r3, #0]
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	4283      	cmp	r3, r0
 8007a8e:	d004      	beq.n	8007a9a <__swbuf_r+0x62>
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	07db      	lsls	r3, r3, #31
 8007a94:	d519      	bpl.n	8007aca <__swbuf_r+0x92>
 8007a96:	2e0a      	cmp	r6, #10
 8007a98:	d117      	bne.n	8007aca <__swbuf_r+0x92>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 f941 	bl	8007d24 <_fflush_r>
 8007aa2:	b190      	cbz	r0, 8007aca <__swbuf_r+0x92>
 8007aa4:	e00f      	b.n	8007ac6 <__swbuf_r+0x8e>
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <__swbuf_r+0x9c>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	d101      	bne.n	8007ab0 <__swbuf_r+0x78>
 8007aac:	68ac      	ldr	r4, [r5, #8]
 8007aae:	e7d0      	b.n	8007a52 <__swbuf_r+0x1a>
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <__swbuf_r+0xa0>)
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	bf08      	it	eq
 8007ab6:	68ec      	ldreq	r4, [r5, #12]
 8007ab8:	e7cb      	b.n	8007a52 <__swbuf_r+0x1a>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 f82d 	bl	8007b1c <__swsetup_r>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d0cc      	beq.n	8007a60 <__swbuf_r+0x28>
 8007ac6:	f04f 37ff 	mov.w	r7, #4294967295
 8007aca:	4638      	mov	r0, r7
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	080080c8 	.word	0x080080c8
 8007ad4:	080080e8 	.word	0x080080e8
 8007ad8:	080080a8 	.word	0x080080a8

08007adc <__ascii_wctomb>:
 8007adc:	b149      	cbz	r1, 8007af2 <__ascii_wctomb+0x16>
 8007ade:	2aff      	cmp	r2, #255	; 0xff
 8007ae0:	bf8b      	itete	hi
 8007ae2:	238a      	movhi	r3, #138	; 0x8a
 8007ae4:	700a      	strbls	r2, [r1, #0]
 8007ae6:	6003      	strhi	r3, [r0, #0]
 8007ae8:	2001      	movls	r0, #1
 8007aea:	bf88      	it	hi
 8007aec:	f04f 30ff 	movhi.w	r0, #4294967295
 8007af0:	4770      	bx	lr
 8007af2:	4608      	mov	r0, r1
 8007af4:	4770      	bx	lr
	...

08007af8 <_write_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	2200      	movs	r2, #0
 8007b02:	4c05      	ldr	r4, [pc, #20]	; (8007b18 <_write_r+0x20>)
 8007b04:	6022      	str	r2, [r4, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f7f9 fcb5 	bl	8001476 <_write>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_write_r+0x1e>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_write_r+0x1e>
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	200003a0 	.word	0x200003a0

08007b1c <__swsetup_r>:
 8007b1c:	4b32      	ldr	r3, [pc, #200]	; (8007be8 <__swsetup_r+0xcc>)
 8007b1e:	b570      	push	{r4, r5, r6, lr}
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	b125      	cbz	r5, 8007b32 <__swsetup_r+0x16>
 8007b28:	69ab      	ldr	r3, [r5, #24]
 8007b2a:	b913      	cbnz	r3, 8007b32 <__swsetup_r+0x16>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7fe fbe7 	bl	8006300 <__sinit>
 8007b32:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <__swsetup_r+0xd0>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	d10f      	bne.n	8007b58 <__swsetup_r+0x3c>
 8007b38:	686c      	ldr	r4, [r5, #4]
 8007b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	0715      	lsls	r5, r2, #28
 8007b42:	d42c      	bmi.n	8007b9e <__swsetup_r+0x82>
 8007b44:	06d0      	lsls	r0, r2, #27
 8007b46:	d411      	bmi.n	8007b6c <__swsetup_r+0x50>
 8007b48:	2209      	movs	r2, #9
 8007b4a:	6032      	str	r2, [r6, #0]
 8007b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	f04f 30ff 	mov.w	r0, #4294967295
 8007b56:	e03e      	b.n	8007bd6 <__swsetup_r+0xba>
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <__swsetup_r+0xd4>)
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	d101      	bne.n	8007b62 <__swsetup_r+0x46>
 8007b5e:	68ac      	ldr	r4, [r5, #8]
 8007b60:	e7eb      	b.n	8007b3a <__swsetup_r+0x1e>
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <__swsetup_r+0xd8>)
 8007b64:	429c      	cmp	r4, r3
 8007b66:	bf08      	it	eq
 8007b68:	68ec      	ldreq	r4, [r5, #12]
 8007b6a:	e7e6      	b.n	8007b3a <__swsetup_r+0x1e>
 8007b6c:	0751      	lsls	r1, r2, #29
 8007b6e:	d512      	bpl.n	8007b96 <__swsetup_r+0x7a>
 8007b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b72:	b141      	cbz	r1, 8007b86 <__swsetup_r+0x6a>
 8007b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d002      	beq.n	8007b82 <__swsetup_r+0x66>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff fbbf 	bl	8007300 <_free_r>
 8007b82:	2300      	movs	r3, #0
 8007b84:	6363      	str	r3, [r4, #52]	; 0x34
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6063      	str	r3, [r4, #4]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f043 0308 	orr.w	r3, r3, #8
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	b94b      	cbnz	r3, 8007bb6 <__swsetup_r+0x9a>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bac:	d003      	beq.n	8007bb6 <__swsetup_r+0x9a>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f917 	bl	8007de4 <__smakebuf_r>
 8007bb6:	89a2      	ldrh	r2, [r4, #12]
 8007bb8:	f012 0301 	ands.w	r3, r2, #1
 8007bbc:	d00c      	beq.n	8007bd8 <__swsetup_r+0xbc>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60a3      	str	r3, [r4, #8]
 8007bc2:	6963      	ldr	r3, [r4, #20]
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	61a3      	str	r3, [r4, #24]
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	b953      	cbnz	r3, 8007be2 <__swsetup_r+0xc6>
 8007bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007bd4:	d1ba      	bne.n	8007b4c <__swsetup_r+0x30>
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	0792      	lsls	r2, r2, #30
 8007bda:	bf58      	it	pl
 8007bdc:	6963      	ldrpl	r3, [r4, #20]
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	e7f2      	b.n	8007bc8 <__swsetup_r+0xac>
 8007be2:	2000      	movs	r0, #0
 8007be4:	e7f7      	b.n	8007bd6 <__swsetup_r+0xba>
 8007be6:	bf00      	nop
 8007be8:	2000002c 	.word	0x2000002c
 8007bec:	080080c8 	.word	0x080080c8
 8007bf0:	080080e8 	.word	0x080080e8
 8007bf4:	080080a8 	.word	0x080080a8

08007bf8 <_close_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4c05      	ldr	r4, [pc, #20]	; (8007c14 <_close_r+0x1c>)
 8007bfe:	4605      	mov	r5, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	f7f9 fc80 	bl	8001508 <_close>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_close_r+0x1a>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_close_r+0x1a>
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200003a0 	.word	0x200003a0

08007c18 <__sflush_r>:
 8007c18:	898a      	ldrh	r2, [r1, #12]
 8007c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1e:	4605      	mov	r5, r0
 8007c20:	0710      	lsls	r0, r2, #28
 8007c22:	460c      	mov	r4, r1
 8007c24:	d458      	bmi.n	8007cd8 <__sflush_r+0xc0>
 8007c26:	684b      	ldr	r3, [r1, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dc05      	bgt.n	8007c38 <__sflush_r+0x20>
 8007c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	dc02      	bgt.n	8007c38 <__sflush_r+0x20>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	d0f9      	beq.n	8007c32 <__sflush_r+0x1a>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c44:	682f      	ldr	r7, [r5, #0]
 8007c46:	6a21      	ldr	r1, [r4, #32]
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	d032      	beq.n	8007cb2 <__sflush_r+0x9a>
 8007c4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	075a      	lsls	r2, r3, #29
 8007c52:	d505      	bpl.n	8007c60 <__sflush_r+0x48>
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	1ac0      	subs	r0, r0, r3
 8007c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c5a:	b10b      	cbz	r3, 8007c60 <__sflush_r+0x48>
 8007c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c5e:	1ac0      	subs	r0, r0, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	4602      	mov	r2, r0
 8007c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c66:	6a21      	ldr	r1, [r4, #32]
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b0      	blx	r6
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	d106      	bne.n	8007c80 <__sflush_r+0x68>
 8007c72:	6829      	ldr	r1, [r5, #0]
 8007c74:	291d      	cmp	r1, #29
 8007c76:	d848      	bhi.n	8007d0a <__sflush_r+0xf2>
 8007c78:	4a29      	ldr	r2, [pc, #164]	; (8007d20 <__sflush_r+0x108>)
 8007c7a:	40ca      	lsrs	r2, r1
 8007c7c:	07d6      	lsls	r6, r2, #31
 8007c7e:	d544      	bpl.n	8007d0a <__sflush_r+0xf2>
 8007c80:	2200      	movs	r2, #0
 8007c82:	6062      	str	r2, [r4, #4]
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	04d9      	lsls	r1, r3, #19
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	d504      	bpl.n	8007c96 <__sflush_r+0x7e>
 8007c8c:	1c42      	adds	r2, r0, #1
 8007c8e:	d101      	bne.n	8007c94 <__sflush_r+0x7c>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b903      	cbnz	r3, 8007c96 <__sflush_r+0x7e>
 8007c94:	6560      	str	r0, [r4, #84]	; 0x54
 8007c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c98:	602f      	str	r7, [r5, #0]
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	d0c9      	beq.n	8007c32 <__sflush_r+0x1a>
 8007c9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d002      	beq.n	8007cac <__sflush_r+0x94>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f7ff fb2a 	bl	8007300 <_free_r>
 8007cac:	2000      	movs	r0, #0
 8007cae:	6360      	str	r0, [r4, #52]	; 0x34
 8007cb0:	e7c0      	b.n	8007c34 <__sflush_r+0x1c>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b0      	blx	r6
 8007cb8:	1c41      	adds	r1, r0, #1
 8007cba:	d1c8      	bne.n	8007c4e <__sflush_r+0x36>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0c5      	beq.n	8007c4e <__sflush_r+0x36>
 8007cc2:	2b1d      	cmp	r3, #29
 8007cc4:	d001      	beq.n	8007cca <__sflush_r+0xb2>
 8007cc6:	2b16      	cmp	r3, #22
 8007cc8:	d101      	bne.n	8007cce <__sflush_r+0xb6>
 8007cca:	602f      	str	r7, [r5, #0]
 8007ccc:	e7b1      	b.n	8007c32 <__sflush_r+0x1a>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	e7ad      	b.n	8007c34 <__sflush_r+0x1c>
 8007cd8:	690f      	ldr	r7, [r1, #16]
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	d0a9      	beq.n	8007c32 <__sflush_r+0x1a>
 8007cde:	0793      	lsls	r3, r2, #30
 8007ce0:	bf18      	it	ne
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	680e      	ldr	r6, [r1, #0]
 8007ce6:	bf08      	it	eq
 8007ce8:	694b      	ldreq	r3, [r1, #20]
 8007cea:	eba6 0807 	sub.w	r8, r6, r7
 8007cee:	600f      	str	r7, [r1, #0]
 8007cf0:	608b      	str	r3, [r1, #8]
 8007cf2:	f1b8 0f00 	cmp.w	r8, #0
 8007cf6:	dd9c      	ble.n	8007c32 <__sflush_r+0x1a>
 8007cf8:	4643      	mov	r3, r8
 8007cfa:	463a      	mov	r2, r7
 8007cfc:	6a21      	ldr	r1, [r4, #32]
 8007cfe:	4628      	mov	r0, r5
 8007d00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d02:	47b0      	blx	r6
 8007d04:	2800      	cmp	r0, #0
 8007d06:	dc06      	bgt.n	8007d16 <__sflush_r+0xfe>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e78e      	b.n	8007c34 <__sflush_r+0x1c>
 8007d16:	4407      	add	r7, r0
 8007d18:	eba8 0800 	sub.w	r8, r8, r0
 8007d1c:	e7e9      	b.n	8007cf2 <__sflush_r+0xda>
 8007d1e:	bf00      	nop
 8007d20:	20400001 	.word	0x20400001

08007d24 <_fflush_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	690b      	ldr	r3, [r1, #16]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	b1db      	cbz	r3, 8007d66 <_fflush_r+0x42>
 8007d2e:	b118      	cbz	r0, 8007d38 <_fflush_r+0x14>
 8007d30:	6983      	ldr	r3, [r0, #24]
 8007d32:	b90b      	cbnz	r3, 8007d38 <_fflush_r+0x14>
 8007d34:	f7fe fae4 	bl	8006300 <__sinit>
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <_fflush_r+0x48>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d109      	bne.n	8007d52 <_fflush_r+0x2e>
 8007d3e:	686c      	ldr	r4, [r5, #4]
 8007d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d44:	b17b      	cbz	r3, 8007d66 <_fflush_r+0x42>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4e:	f7ff bf63 	b.w	8007c18 <__sflush_r>
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <_fflush_r+0x4c>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d101      	bne.n	8007d5c <_fflush_r+0x38>
 8007d58:	68ac      	ldr	r4, [r5, #8]
 8007d5a:	e7f1      	b.n	8007d40 <_fflush_r+0x1c>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_fflush_r+0x50>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	bf08      	it	eq
 8007d62:	68ec      	ldreq	r4, [r5, #12]
 8007d64:	e7ec      	b.n	8007d40 <_fflush_r+0x1c>
 8007d66:	2000      	movs	r0, #0
 8007d68:	bd38      	pop	{r3, r4, r5, pc}
 8007d6a:	bf00      	nop
 8007d6c:	080080c8 	.word	0x080080c8
 8007d70:	080080e8 	.word	0x080080e8
 8007d74:	080080a8 	.word	0x080080a8

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4611      	mov	r1, r2
 8007d80:	2200      	movs	r2, #0
 8007d82:	4c05      	ldr	r4, [pc, #20]	; (8007d98 <_lseek_r+0x20>)
 8007d84:	6022      	str	r2, [r4, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7f9 fbe2 	bl	8001550 <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	200003a0 	.word	0x200003a0

08007d9c <__swhatbuf_r>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	460e      	mov	r6, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	b096      	sub	sp, #88	; 0x58
 8007da6:	2900      	cmp	r1, #0
 8007da8:	4614      	mov	r4, r2
 8007daa:	461d      	mov	r5, r3
 8007dac:	da07      	bge.n	8007dbe <__swhatbuf_r+0x22>
 8007dae:	2300      	movs	r3, #0
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	89b3      	ldrh	r3, [r6, #12]
 8007db4:	061a      	lsls	r2, r3, #24
 8007db6:	d410      	bmi.n	8007dda <__swhatbuf_r+0x3e>
 8007db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dbc:	e00e      	b.n	8007ddc <__swhatbuf_r+0x40>
 8007dbe:	466a      	mov	r2, sp
 8007dc0:	f000 f8a4 	bl	8007f0c <_fstat_r>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	dbf2      	blt.n	8007dae <__swhatbuf_r+0x12>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dd2:	425a      	negs	r2, r3
 8007dd4:	415a      	adcs	r2, r3
 8007dd6:	602a      	str	r2, [r5, #0]
 8007dd8:	e7ee      	b.n	8007db8 <__swhatbuf_r+0x1c>
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	2000      	movs	r0, #0
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	b016      	add	sp, #88	; 0x58
 8007de2:	bd70      	pop	{r4, r5, r6, pc}

08007de4 <__smakebuf_r>:
 8007de4:	898b      	ldrh	r3, [r1, #12]
 8007de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007de8:	079d      	lsls	r5, r3, #30
 8007dea:	4606      	mov	r6, r0
 8007dec:	460c      	mov	r4, r1
 8007dee:	d507      	bpl.n	8007e00 <__smakebuf_r+0x1c>
 8007df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	6163      	str	r3, [r4, #20]
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	ab01      	add	r3, sp, #4
 8007e02:	466a      	mov	r2, sp
 8007e04:	f7ff ffca 	bl	8007d9c <__swhatbuf_r>
 8007e08:	9900      	ldr	r1, [sp, #0]
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff fac3 	bl	8007398 <_malloc_r>
 8007e12:	b948      	cbnz	r0, 8007e28 <__smakebuf_r+0x44>
 8007e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e18:	059a      	lsls	r2, r3, #22
 8007e1a:	d4ef      	bmi.n	8007dfc <__smakebuf_r+0x18>
 8007e1c:	f023 0303 	bic.w	r3, r3, #3
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	e7e3      	b.n	8007df0 <__smakebuf_r+0xc>
 8007e28:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <__smakebuf_r+0x7c>)
 8007e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	6020      	str	r0, [r4, #0]
 8007e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	6120      	str	r0, [r4, #16]
 8007e3a:	6163      	str	r3, [r4, #20]
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	b15b      	cbz	r3, 8007e58 <__smakebuf_r+0x74>
 8007e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f873 	bl	8007f30 <_isatty_r>
 8007e4a:	b128      	cbz	r0, 8007e58 <__smakebuf_r+0x74>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	431d      	orrs	r5, r3
 8007e5c:	81a5      	strh	r5, [r4, #12]
 8007e5e:	e7cd      	b.n	8007dfc <__smakebuf_r+0x18>
 8007e60:	080062c9 	.word	0x080062c9

08007e64 <memmove>:
 8007e64:	4288      	cmp	r0, r1
 8007e66:	b510      	push	{r4, lr}
 8007e68:	eb01 0302 	add.w	r3, r1, r2
 8007e6c:	d807      	bhi.n	8007e7e <memmove+0x1a>
 8007e6e:	1e42      	subs	r2, r0, #1
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d00a      	beq.n	8007e8a <memmove+0x26>
 8007e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e7c:	e7f8      	b.n	8007e70 <memmove+0xc>
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	d9f5      	bls.n	8007e6e <memmove+0xa>
 8007e82:	1881      	adds	r1, r0, r2
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	42d3      	cmn	r3, r2
 8007e88:	d100      	bne.n	8007e8c <memmove+0x28>
 8007e8a:	bd10      	pop	{r4, pc}
 8007e8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e94:	e7f7      	b.n	8007e86 <memmove+0x22>

08007e96 <__malloc_lock>:
 8007e96:	4770      	bx	lr

08007e98 <__malloc_unlock>:
 8007e98:	4770      	bx	lr

08007e9a <_realloc_r>:
 8007e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	460e      	mov	r6, r1
 8007ea2:	b921      	cbnz	r1, 8007eae <_realloc_r+0x14>
 8007ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	f7ff ba75 	b.w	8007398 <_malloc_r>
 8007eae:	b922      	cbnz	r2, 8007eba <_realloc_r+0x20>
 8007eb0:	f7ff fa26 	bl	8007300 <_free_r>
 8007eb4:	4625      	mov	r5, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eba:	f000 f849 	bl	8007f50 <_malloc_usable_size_r>
 8007ebe:	42a0      	cmp	r0, r4
 8007ec0:	d20f      	bcs.n	8007ee2 <_realloc_r+0x48>
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f7ff fa67 	bl	8007398 <_malloc_r>
 8007eca:	4605      	mov	r5, r0
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d0f2      	beq.n	8007eb6 <_realloc_r+0x1c>
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	f7fe fe02 	bl	8006adc <memcpy>
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff fa10 	bl	8007300 <_free_r>
 8007ee0:	e7e9      	b.n	8007eb6 <_realloc_r+0x1c>
 8007ee2:	4635      	mov	r5, r6
 8007ee4:	e7e7      	b.n	8007eb6 <_realloc_r+0x1c>
	...

08007ee8 <_read_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4605      	mov	r5, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4c05      	ldr	r4, [pc, #20]	; (8007f08 <_read_r+0x20>)
 8007ef4:	6022      	str	r2, [r4, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7f9 faa0 	bl	800143c <_read>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_read_r+0x1e>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_read_r+0x1e>
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	200003a0 	.word	0x200003a0

08007f0c <_fstat_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4c06      	ldr	r4, [pc, #24]	; (8007f2c <_fstat_r+0x20>)
 8007f12:	4605      	mov	r5, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	f7f9 fb00 	bl	800151e <_fstat>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d102      	bne.n	8007f28 <_fstat_r+0x1c>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	b103      	cbz	r3, 8007f28 <_fstat_r+0x1c>
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200003a0 	.word	0x200003a0

08007f30 <_isatty_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	2300      	movs	r3, #0
 8007f34:	4c05      	ldr	r4, [pc, #20]	; (8007f4c <_isatty_r+0x1c>)
 8007f36:	4605      	mov	r5, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	f7f9 fafe 	bl	800153c <_isatty>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_isatty_r+0x1a>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_isatty_r+0x1a>
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	200003a0 	.word	0x200003a0

08007f50 <_malloc_usable_size_r>:
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f18      	subs	r0, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbc      	itt	lt
 8007f5a:	580b      	ldrlt	r3, [r1, r0]
 8007f5c:	18c0      	addlt	r0, r0, r3
 8007f5e:	4770      	bx	lr

08007f60 <_init>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	bf00      	nop
 8007f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f66:	bc08      	pop	{r3}
 8007f68:	469e      	mov	lr, r3
 8007f6a:	4770      	bx	lr

08007f6c <_fini>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr
