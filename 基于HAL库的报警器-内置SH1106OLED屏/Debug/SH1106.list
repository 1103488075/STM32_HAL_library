
SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080066e0  080066e0  000166e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b8  080069b8  00020520  2**0
                  CONTENTS
  4 .ARM          00000000  080069b8  080069b8  00020520  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069b8  080069b8  00020520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000520  20000000  080069c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000520  08006ee0  00020520  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08006ee0  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba8d  00000000  00000000  00020549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4e  00000000  00000000  0002bfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000379d  00000000  00000000  0002f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000923b  00000000  00000000  00032a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000867e6  00000000  00000000  0003bc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c247e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000c24fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000520 	.word	0x20000520
 8000204:	00000000 	.word	0x00000000
 8000208:	080066c4 	.word	0x080066c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000524 	.word	0x20000524
 8000224:	080066c4 	.word	0x080066c4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <RGB_choose_blue>:
#include "RGB.h"


void RGB_choose_blue(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	LED1_OFF();LED2_ON();LED3_ON();
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <RGB_choose_blue+0x2c>)
 8000c4a:	f001 f9a6 	bl	8001f9a <HAL_GPIO_WritePin>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <RGB_choose_blue+0x2c>)
 8000c56:	f001 f9a0 	bl	8001f9a <HAL_GPIO_WritePin>
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <RGB_choose_blue+0x2c>)
 8000c62:	f001 f99a 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40011000 	.word	0x40011000

08000c70 <RGB_choose_red>:

void RGB_choose_red(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	LED1_ON();LED2_ON();LED3_OFF();
 8000c74:	2201      	movs	r2, #1
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <RGB_choose_red+0x2c>)
 8000c7a:	f001 f98e 	bl	8001f9a <HAL_GPIO_WritePin>
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <RGB_choose_red+0x2c>)
 8000c86:	f001 f988 	bl	8001f9a <HAL_GPIO_WritePin>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <RGB_choose_red+0x2c>)
 8000c92:	f001 f982 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <RGB_choose_green>:

void RGB_choose_green(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	LED1_ON();LED2_OFF();LED3_ON();
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <RGB_choose_green+0x2c>)
 8000caa:	f001 f976 	bl	8001f9a <HAL_GPIO_WritePin>
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <RGB_choose_green+0x2c>)
 8000cb6:	f001 f970 	bl	8001f9a <HAL_GPIO_WritePin>
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <RGB_choose_green+0x2c>)
 8000cc2:	f001 f96a 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <RGB_choose_white>:

void RGB_choose_white(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	LED1_OFF();LED2_OFF();LED3_OFF();
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <RGB_choose_white+0x2c>)
 8000cda:	f001 f95e 	bl	8001f9a <HAL_GPIO_WritePin>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <RGB_choose_white+0x2c>)
 8000ce6:	f001 f958 	bl	8001f9a <HAL_GPIO_WritePin>
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <RGB_choose_white+0x2c>)
 8000cf2:	f001 f952 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40011000 	.word	0x40011000

08000d00 <RGB_choose_yellow>:

void RGB_choose_yellow(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	LED1_ON();LED2_OFF();LED3_OFF();
 8000d04:	2201      	movs	r2, #1
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <RGB_choose_yellow+0x2c>)
 8000d0a:	f001 f946 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <RGB_choose_yellow+0x2c>)
 8000d16:	f001 f940 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <RGB_choose_yellow+0x2c>)
 8000d22:	f001 f93a 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40011000 	.word	0x40011000

08000d30 <RGB_choose_blue_green>:

void RGB_choose_blue_green(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	LED1_OFF();LED2_OFF();LED3_ON();
 8000d34:	2200      	movs	r2, #0
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <RGB_choose_blue_green+0x2c>)
 8000d3a:	f001 f92e 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <RGB_choose_blue_green+0x2c>)
 8000d46:	f001 f928 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <RGB_choose_blue_green+0x2c>)
 8000d52:	f001 f922 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40011000 	.word	0x40011000

08000d60 <RGB_choose_violet>:

void RGB_choose_violet(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	LED1_OFF();LED2_ON();LED3_OFF();
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <RGB_choose_violet+0x2c>)
 8000d6a:	f001 f916 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <RGB_choose_violet+0x2c>)
 8000d76:	f001 f910 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <RGB_choose_violet+0x2c>)
 8000d82:	f001 f90a 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40011000 	.word	0x40011000

08000d90 <RGB_choose_close>:

void RGB_choose_close(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	LED1_ON();LED2_ON();LED3_ON();
 8000d94:	2201      	movs	r2, #1
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <RGB_choose_close+0x2c>)
 8000d9a:	f001 f8fe 	bl	8001f9a <HAL_GPIO_WritePin>
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <RGB_choose_close+0x2c>)
 8000da6:	f001 f8f8 	bl	8001f9a <HAL_GPIO_WritePin>
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <RGB_choose_close+0x2c>)
 8000db2:	f001 f8f2 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <RGB_choose_colour>:
void RGB_choose_colour(u8 num)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d825      	bhi.n	8000e1e <RGB_choose_colour+0x5e>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <RGB_choose_colour+0x18>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000df5 	.word	0x08000df5
 8000ddc:	08000dfb 	.word	0x08000dfb
 8000de0:	08000e01 	.word	0x08000e01
 8000de4:	08000e07 	.word	0x08000e07
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	08000e13 	.word	0x08000e13
 8000df0:	08000e19 	.word	0x08000e19
	{
	case 1:RGB_choose_blue();break;
 8000df4:	f7ff ff24 	bl	8000c40 <RGB_choose_blue>
 8000df8:	e011      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 2:RGB_choose_green();break;
 8000dfa:	f7ff ff51 	bl	8000ca0 <RGB_choose_green>
 8000dfe:	e00e      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 3:RGB_choose_red();break;
 8000e00:	f7ff ff36 	bl	8000c70 <RGB_choose_red>
 8000e04:	e00b      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 4:RGB_choose_white();break;
 8000e06:	f7ff ff63 	bl	8000cd0 <RGB_choose_white>
 8000e0a:	e008      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 5:RGB_choose_yellow();break;
 8000e0c:	f7ff ff78 	bl	8000d00 <RGB_choose_yellow>
 8000e10:	e005      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 6:RGB_choose_blue_green();break;
 8000e12:	f7ff ff8d 	bl	8000d30 <RGB_choose_blue_green>
 8000e16:	e002      	b.n	8000e1e <RGB_choose_colour+0x5e>
	case 7:RGB_choose_violet();break;
 8000e18:	f7ff ffa2 	bl	8000d60 <RGB_choose_violet>
 8000e1c:	bf00      	nop

	}
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop

08000e28 <RGB_choose_move_colour>:
void RGB_choose_move_colour(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	static u16 num = 0,i = 1;

	if(num++ >= 3000)
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <RGB_choose_move_colour+0x44>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	b291      	uxth	r1, r2
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <RGB_choose_move_colour+0x44>)
 8000e36:	8011      	strh	r1, [r2, #0]
 8000e38:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d913      	bls.n	8000e68 <RGB_choose_move_colour+0x40>
	{
	num = 0;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <RGB_choose_move_colour+0x44>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
	RGB_choose_colour(i);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <RGB_choose_move_colour+0x48>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffb7 	bl	8000dc0 <RGB_choose_colour>
		if(i++ > 7)i = 1;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <RGB_choose_move_colour+0x48>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	b291      	uxth	r1, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <RGB_choose_move_colour+0x48>)
 8000e5c:	8011      	strh	r1, [r2, #0]
 8000e5e:	2b07      	cmp	r3, #7
 8000e60:	d902      	bls.n	8000e68 <RGB_choose_move_colour+0x40>
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <RGB_choose_move_colour+0x48>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	801a      	strh	r2, [r3, #0]
	}
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000053c 	.word	0x2000053c
 8000e70:	20000000 	.word	0x20000000

08000e74 <RGB_choose_warning>:

void RGB_choose_warning(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	static u32 sum = 0;
	static u8 flag = 0;

	if(sum++ >= 100)
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <RGB_choose_warning+0x48>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	490f      	ldr	r1, [pc, #60]	; (8000ebc <RGB_choose_warning+0x48>)
 8000e80:	600a      	str	r2, [r1, #0]
 8000e82:	2b63      	cmp	r3, #99	; 0x63
 8000e84:	d917      	bls.n	8000eb6 <RGB_choose_warning+0x42>
	{
		sum = 0;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <RGB_choose_warning+0x48>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
		flag = !flag;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <RGB_choose_warning+0x4c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <RGB_choose_warning+0x4c>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		RGB_warning(flag);
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <RGB_choose_warning+0x4c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <RGB_choose_warning+0x3c>
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff ff89 	bl	8000dc0 <RGB_choose_colour>
 	}

}
 8000eae:	e002      	b.n	8000eb6 <RGB_choose_warning+0x42>
		RGB_warning(flag);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff ff85 	bl	8000dc0 <RGB_choose_colour>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000540 	.word	0x20000540
 8000ec0:	20000544 	.word	0x20000544

08000ec4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ed0:	f043 0320 	orr.w	r3, r3, #32
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0xdc>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

//  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CLK_Pin|OLED_DIN_Pin|OLED_RES_Pin|OLED_CS_Pin|OLED_DC_Pin|SR602_input_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	217e      	movs	r1, #126	; 0x7e
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0xe0>)
 8000f18:	f001 f83f 	bl	8001f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */


  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_CLK_Pin|OLED_DIN_Pin|OLED_RES_Pin|OLED_CS_Pin|OLED_DC_Pin;
 8000f1c:	233e      	movs	r3, #62	; 0x3e
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0xe0>)
 8000f30:	f000 feb2 	bl	8001c98 <HAL_GPIO_Init>


  /*Configuration GPIO pins : SR602 Pin */
  GPIO_InitStruct.Pin = SR602_input_Pin;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR602_input_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0xe0>)
 8000f48:	f000 fea6 	bl	8001c98 <HAL_GPIO_Init>


  /* Configuration GPIO Pins : RGB Pin*/
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000f4c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0xe4>)
 8000f62:	f000 fe99 	bl	8001c98 <HAL_GPIO_Init>

  /*Configuration GPIO Pin : Key*/
  	GPIO_InitStruct.Pin = KEY1_GPIO_PIN;
 8000f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;;//GPIO_PULLDOWN
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY1_GPIO, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <MX_GPIO_Init+0xe0>)
 8000f7c:	f000 fe8c 	bl	8001c98 <HAL_GPIO_Init>

    /*Configuration GPIO Pin : Buzz*/
    GPIO_InitStruct.Pin = Buzz_GPIO_PIN;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzz_GPIO, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_GPIO_Init+0xe0>)
 8000f94:	f000 fe80 	bl	8001c98 <HAL_GPIO_Init>
}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40011000 	.word	0x40011000

08000fac <main>:


u8 warning_flag = 0;
u8 flag = 0;
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  System_Config();
 8000fb0:	f000 f8ce 	bl	8001150 <System_Config>

  RGB_choose_close();
 8000fb4:	f7ff feec 	bl	8000d90 <RGB_choose_close>
  Buzz_use(0);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <main+0x54>)
 8000fbe:	f000 ffec 	bl	8001f9a <HAL_GPIO_WritePin>
  while (1)
  {

	  OLED_display_status();
 8000fc2:	f000 f849 	bl	8001058 <OLED_display_status>

	  if(Scan_key() == 1)
 8000fc6:	f000 f821 	bl	800100c <Scan_key>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10c      	bne.n	8000fea <main+0x3e>
	  {
		  flag = !flag;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <main+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <main+0x58>)
 8000fe2:	701a      	strb	r2, [r3, #0]
		  warning_flag = 0;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <main+0x5c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag == 1)
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <main+0x58>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d1e7      	bne.n	8000fc2 <main+0x16>
		  Buzz_use(0);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	4802      	ldr	r0, [pc, #8]	; (8001000 <main+0x54>)
 8000ff8:	f000 ffcf 	bl	8001f9a <HAL_GPIO_WritePin>
	  OLED_display_status();
 8000ffc:	e7e1      	b.n	8000fc2 <main+0x16>
 8000ffe:	bf00      	nop
 8001000:	40010800 	.word	0x40010800
 8001004:	20000546 	.word	0x20000546
 8001008:	20000545 	.word	0x20000545

0800100c <Scan_key>:

  }
}

u8 Scan_key(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(KEY1_GPIO, KEY1_GPIO_PIN) == 0)
 8001010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <Scan_key+0x48>)
 8001016:	f000 ffa9 	bl	8001f6c <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d115      	bne.n	800104c <Scan_key+0x40>
		  {
				  HAL_Delay(5);
 8001020:	2005      	movs	r0, #5
 8001022:	f000 fd11 	bl	8001a48 <HAL_Delay>
				  if(HAL_GPIO_ReadPin(KEY1_GPIO, KEY1_GPIO_PIN) == 0)
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <Scan_key+0x48>)
 800102c:	f000 ff9e 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <Scan_key+0x40>
				  {
					  while(HAL_GPIO_ReadPin(KEY1_GPIO,KEY1_GPIO_PIN) == 0);
 8001036:	bf00      	nop
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <Scan_key+0x48>)
 800103e:	f000 ff95 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f7      	beq.n	8001038 <Scan_key+0x2c>
					  	 return 1;
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <Scan_key+0x42>
				  }
		  }
	  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010800 	.word	0x40010800

08001058 <OLED_display_status>:

//OLED显示状态
void OLED_display_status(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	  if( (HAL_GPIO_ReadPin(SR602_input_GPIO_Port,SR602_input_Pin) == 1)   )//OLED显示非法入侵
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	481f      	ldr	r0, [pc, #124]	; (80010dc <OLED_display_status+0x84>)
 8001060:	f000 ff84 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d114      	bne.n	8001094 <OLED_display_status+0x3c>
	  {
		  HAL_Delay(5);
 800106a:	2005      	movs	r0, #5
 800106c:	f000 fcec 	bl	8001a48 <HAL_Delay>
		  if( (HAL_GPIO_ReadPin(SR602_input_GPIO_Port,SR602_input_Pin) == 1)   )
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	481a      	ldr	r0, [pc, #104]	; (80010dc <OLED_display_status+0x84>)
 8001074:	f000 ff7a 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d12c      	bne.n	80010d8 <OLED_display_status+0x80>
		  {
			  OLED_ShowStatus_1();
 800107e:	f000 faf1 	bl	8001664 <OLED_ShowStatus_1>
			  warning_flag = 1;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <OLED_display_status+0x88>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
			  Buzz_use(1);
 8001088:	2200      	movs	r2, #0
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <OLED_display_status+0x84>)
 800108e:	f000 ff84 	bl	8001f9a <HAL_GPIO_WritePin>
			  OLED_Display_On();	//开启显示屏
			  OLED_ShowStatus_0();
			  Buzz_use(0);
		  }
	  }
}
 8001092:	e021      	b.n	80010d8 <OLED_display_status+0x80>
	  else if( (HAL_GPIO_ReadPin(SR602_input_GPIO_Port,SR602_input_Pin) == 0) && (warning_flag == 0))//OLED显示状态正常
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <OLED_display_status+0x84>)
 8001098:	f000 ff68 	bl	8001f6c <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d11a      	bne.n	80010d8 <OLED_display_status+0x80>
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <OLED_display_status+0x88>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <OLED_display_status+0x80>
		  HAL_Delay(5);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 fccc 	bl	8001a48 <HAL_Delay>
		  if( (HAL_GPIO_ReadPin(SR602_input_GPIO_Port,SR602_input_Pin) == 0) && (warning_flag == 0))
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <OLED_display_status+0x84>)
 80010b4:	f000 ff5a 	bl	8001f6c <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <OLED_display_status+0x80>
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <OLED_display_status+0x88>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <OLED_display_status+0x80>
			  OLED_Display_On();	//开启显示屏
 80010c6:	f000 f94b 	bl	8001360 <OLED_Display_On>
			  OLED_ShowStatus_0();
 80010ca:	f000 fafe 	bl	80016ca <OLED_ShowStatus_0>
			  Buzz_use(0);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4802      	ldr	r0, [pc, #8]	; (80010dc <OLED_display_status+0x84>)
 80010d4:	f000 ff61 	bl	8001f9a <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010800 	.word	0x40010800
 80010e0:	20000545 	.word	0x20000545

080010e4 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

	if(warning_flag == 1 )
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_SYSTICK_Callback+0x34>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d106      	bne.n	80010fe <HAL_SYSTICK_Callback+0x1a>
	{
		RGB_choose_warning();//RGB灯报警模式
 80010f0:	f7ff fec0 	bl	8000e74 <RGB_choose_warning>
		OLED_Show_flicker();//OLE屏闪烁
 80010f4:	f000 fb1c 	bl	8001730 <OLED_Show_flicker>
		warning_continue_time();//报警持续时间
 80010f8:	f000 f812 	bl	8001120 <warning_continue_time>
		RGB_choose_move_colour();//RGB灯正常颜色流转
		Buzz_use(0);
	}


}
 80010fc:	e00a      	b.n	8001114 <HAL_SYSTICK_Callback+0x30>
	else if(warning_flag == 0 )
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_SYSTICK_Callback+0x34>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_SYSTICK_Callback+0x30>
		RGB_choose_move_colour();//RGB灯正常颜色流转
 8001106:	f7ff fe8f 	bl	8000e28 <RGB_choose_move_colour>
		Buzz_use(0);
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <HAL_SYSTICK_Callback+0x38>)
 8001110:	f000 ff43 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000545 	.word	0x20000545
 800111c:	40010800 	.word	0x40010800

08001120 <warning_continue_time>:


//报警持续时间
void warning_continue_time(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	static u32 num = 0;
	if(num++ >= 8000)
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <warning_continue_time+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	4907      	ldr	r1, [pc, #28]	; (8001148 <warning_continue_time+0x28>)
 800112c:	600a      	str	r2, [r1, #0]
 800112e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001132:	d305      	bcc.n	8001140 <warning_continue_time+0x20>
	{
		num = 0;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <warning_continue_time+0x28>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
		warning_flag = 0; //回到正常模式
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <warning_continue_time+0x2c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	}
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000548 	.word	0x20000548
 800114c:	20000545 	.word	0x20000545

08001150 <System_Config>:

void System_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	  HAL_Init();
 8001154:	f000 fc16 	bl	8001984 <HAL_Init>
	  SystemClock_Config();
 8001158:	f000 f80a 	bl	8001170 <SystemClock_Config>
	  Systick_Config();	//Systick interrupt configuration
 800115c:	f000 f860 	bl	8001220 <Systick_Config>
	  MX_GPIO_Init();	/*Oled and RGB Pin configuration*/
 8001160:	f7ff feb0 	bl	8000ec4 <MX_GPIO_Init>
	  OLED_Init();
 8001164:	f000 f94a 	bl	80013fc <OLED_Init>
	  OLED_Clear();
 8001168:	f000 f91a 	bl	80013a0 <OLED_Clear>

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <SystemClock_Config>:
  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);

}

void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b096      	sub	sp, #88	; 0x58
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117a:	2228      	movs	r2, #40	; 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fd5c 	bl	8002c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011c4:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fefe 	bl	8001fcc <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c



  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2102      	movs	r1, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 f96d 	bl	80024cc <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f2:	2302      	movs	r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fa:	60fb      	str	r3, [r7, #12]

  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fad8 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>


}
 8001204:	bf00      	nop
 8001206:	3758      	adds	r7, #88	; 0x58
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){


	}

}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <Systick_Config>:

void Systick_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	/**Configure the Systick interrupt time*/
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);	//1ms intterupt
 8001224:	f001 fa9e 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <Systick_Config+0x30>)
 800122c:	fba3 2302 	umull	r2, r3, r3, r2
 8001230:	099b      	lsrs	r3, r3, #6
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd01 	bl	8001c3a <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001238:	2004      	movs	r0, #4
 800123a:	f000 fd0b 	bl	8001c54 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	f000 fcdc 	bl	8001c02 <HAL_NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	10624dd3 	.word	0x10624dd3

08001254 <my_delay_ms>:
#include "oledfont.h"  	 
#include "mxconstants.h"
//#include "sys.h"
#include "stdlib.h"	 
void my_delay_ms(int ms)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fbf2 	bl	8001a48 <HAL_Delay>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <OLED_WR_Byte>:
#else
//向SSD1106写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <OLED_WR_Byte+0x22>
	  OLED_DC_Set();
 8001282:	2201      	movs	r2, #1
 8001284:	2110      	movs	r1, #16
 8001286:	4820      	ldr	r0, [pc, #128]	; (8001308 <OLED_WR_Byte+0x9c>)
 8001288:	f000 fe87 	bl	8001f9a <HAL_GPIO_WritePin>
 800128c:	e004      	b.n	8001298 <OLED_WR_Byte+0x2c>
	else 
	  OLED_DC_Clr();		  
 800128e:	2200      	movs	r2, #0
 8001290:	2110      	movs	r1, #16
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <OLED_WR_Byte+0x9c>)
 8001294:	f000 fe81 	bl	8001f9a <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <OLED_WR_Byte+0x9c>)
 800129e:	f000 fe7c 	bl	8001f9a <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e01e      	b.n	80012e6 <OLED_WR_Byte+0x7a>
	{			  
		OLED_SCLK_Clr();
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012ae:	f000 fe74 	bl	8001f9a <HAL_GPIO_WritePin>
		if(dat&0x80)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da05      	bge.n	80012c6 <OLED_WR_Byte+0x5a>
		   OLED_SDIN_Set();
 80012ba:	2201      	movs	r2, #1
 80012bc:	2104      	movs	r1, #4
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012c0:	f000 fe6b 	bl	8001f9a <HAL_GPIO_WritePin>
 80012c4:	e004      	b.n	80012d0 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 80012c6:	2200      	movs	r2, #0
 80012c8:	2104      	movs	r1, #4
 80012ca:	480f      	ldr	r0, [pc, #60]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012cc:	f000 fe65 	bl	8001f9a <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80012d0:	2201      	movs	r2, #1
 80012d2:	2102      	movs	r1, #2
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012d6:	f000 fe60 	bl	8001f9a <HAL_GPIO_WritePin>
		dat<<=1;   
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d9dd      	bls.n	80012a8 <OLED_WR_Byte+0x3c>
	}				 		  
	OLED_CS_Set();
 80012ec:	2201      	movs	r2, #1
 80012ee:	2120      	movs	r1, #32
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012f2:	f000 fe52 	bl	8001f9a <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 80012f6:	2201      	movs	r2, #1
 80012f8:	2110      	movs	r1, #16
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <OLED_WR_Byte+0x9c>)
 80012fc:	f000 fe4d 	bl	8001f9a <HAL_GPIO_WritePin>
} 
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010800 	.word	0x40010800

0800130c <OLED_Set_Pos>:
#endif
	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	3b50      	subs	r3, #80	; 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa1 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff97 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	f003 030e 	and.w	r3, r3, #14
 8001346:	b25b      	sxtb	r3, r3
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff8a 	bl	800126c <OLED_WR_Byte>
}   	  
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <OLED_Display_On>:
//开启OLED显示    
void OLED_Display_On(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 8001364:	2100      	movs	r1, #0
 8001366:	208d      	movs	r0, #141	; 0x8d
 8001368:	f7ff ff80 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 800136c:	2100      	movs	r1, #0
 800136e:	2014      	movs	r0, #20
 8001370:	f7ff ff7c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8001374:	2100      	movs	r1, #0
 8001376:	20af      	movs	r0, #175	; 0xaf
 8001378:	f7ff ff78 	bl	800126c <OLED_WR_Byte>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <OLED_Display_Off>:
//关闭OLED显示     
void OLED_Display_Off(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 8001384:	2100      	movs	r1, #0
 8001386:	208d      	movs	r0, #141	; 0x8d
 8001388:	f7ff ff70 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 800138c:	2100      	movs	r1, #0
 800138e:	2010      	movs	r0, #16
 8001390:	f7ff ff6c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 8001394:	2100      	movs	r1, #0
 8001396:	20ae      	movs	r0, #174	; 0xae
 8001398:	f7ff ff68 	bl	800126c <OLED_WR_Byte>
}		   			 
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <OLED_Clear>:
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	u8 i,n;		    
	for(i=0;i<8;i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e01f      	b.n	80013ec <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3b50      	subs	r3, #80	; 0x50
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff59 	bl	800126c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80013ba:	2100      	movs	r1, #0
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff55 	bl	800126c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 80013c2:	2100      	movs	r1, #0
 80013c4:	2010      	movs	r0, #16
 80013c6:	f7ff ff51 	bl	800126c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 80013ca:	2300      	movs	r3, #0
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	e006      	b.n	80013de <OLED_Clear+0x3e>
 80013d0:	2101      	movs	r1, #1
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff4a 	bl	800126c <OLED_WR_Byte>
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	3301      	adds	r3, #1
 80013dc:	71bb      	strb	r3, [r7, #6]
 80013de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	daf4      	bge.n	80013d0 <OLED_Clear+0x30>
	for(i=0;i<8;i++)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3301      	adds	r3, #1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d9dc      	bls.n	80013ac <OLED_Clear+0xc>
	} //更新显示
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <OLED_Init>:
} 


//初始化SSD1306					    
void OLED_Init(void)
{ 	
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	OLED_RST_Set();
 8001400:	2201      	movs	r2, #1
 8001402:	2108      	movs	r1, #8
 8001404:	4846      	ldr	r0, [pc, #280]	; (8001520 <OLED_Init+0x124>)
 8001406:	f000 fdc8 	bl	8001f9a <HAL_GPIO_WritePin>
	my_delay_ms(100);
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	f7ff ff22 	bl	8001254 <my_delay_ms>
	OLED_RST_Clr();
 8001410:	2200      	movs	r2, #0
 8001412:	2108      	movs	r1, #8
 8001414:	4842      	ldr	r0, [pc, #264]	; (8001520 <OLED_Init+0x124>)
 8001416:	f000 fdc0 	bl	8001f9a <HAL_GPIO_WritePin>
	my_delay_ms(200);
 800141a:	20c8      	movs	r0, #200	; 0xc8
 800141c:	f7ff ff1a 	bl	8001254 <my_delay_ms>
	OLED_RST_Set(); 
 8001420:	2201      	movs	r2, #1
 8001422:	2108      	movs	r1, #8
 8001424:	483e      	ldr	r0, [pc, #248]	; (8001520 <OLED_Init+0x124>)
 8001426:	f000 fdb8 	bl	8001f9a <HAL_GPIO_WritePin>

	OLED_Clear();//关键 初始化前进行清屏操作
 800142a:	f7ff ffb9 	bl	80013a0 <OLED_Clear>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800142e:	2100      	movs	r1, #0
 8001430:	20ae      	movs	r0, #174	; 0xae
 8001432:	f7ff ff1b 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8001436:	2100      	movs	r1, #0
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff17 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800143e:	2100      	movs	r1, #0
 8001440:	2010      	movs	r0, #16
 8001442:	f7ff ff13 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8001446:	2100      	movs	r1, #0
 8001448:	2040      	movs	r0, #64	; 0x40
 800144a:	f7ff ff0f 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800144e:	2100      	movs	r1, #0
 8001450:	2081      	movs	r0, #129	; 0x81
 8001452:	f7ff ff0b 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8001456:	2100      	movs	r1, #0
 8001458:	20cf      	movs	r0, #207	; 0xcf
 800145a:	f7ff ff07 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800145e:	2100      	movs	r1, #0
 8001460:	20a1      	movs	r0, #161	; 0xa1
 8001462:	f7ff ff03 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8001466:	2100      	movs	r1, #0
 8001468:	20c8      	movs	r0, #200	; 0xc8
 800146a:	f7ff feff 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800146e:	2100      	movs	r1, #0
 8001470:	20a6      	movs	r0, #166	; 0xa6
 8001472:	f7ff fefb 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001476:	2100      	movs	r1, #0
 8001478:	20a8      	movs	r0, #168	; 0xa8
 800147a:	f7ff fef7 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800147e:	2100      	movs	r1, #0
 8001480:	203f      	movs	r0, #63	; 0x3f
 8001482:	f7ff fef3 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8001486:	2100      	movs	r1, #0
 8001488:	20d3      	movs	r0, #211	; 0xd3
 800148a:	f7ff feef 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800148e:	2100      	movs	r1, #0
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff feeb 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8001496:	2100      	movs	r1, #0
 8001498:	20d5      	movs	r0, #213	; 0xd5
 800149a:	f7ff fee7 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800149e:	2100      	movs	r1, #0
 80014a0:	2080      	movs	r0, #128	; 0x80
 80014a2:	f7ff fee3 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80014a6:	2100      	movs	r1, #0
 80014a8:	20d9      	movs	r0, #217	; 0xd9
 80014aa:	f7ff fedf 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80014ae:	2100      	movs	r1, #0
 80014b0:	20f1      	movs	r0, #241	; 0xf1
 80014b2:	f7ff fedb 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 80014b6:	2100      	movs	r1, #0
 80014b8:	20da      	movs	r0, #218	; 0xda
 80014ba:	f7ff fed7 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80014be:	2100      	movs	r1, #0
 80014c0:	2012      	movs	r0, #18
 80014c2:	f7ff fed3 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80014c6:	2100      	movs	r1, #0
 80014c8:	20db      	movs	r0, #219	; 0xdb
 80014ca:	f7ff fecf 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80014ce:	2100      	movs	r1, #0
 80014d0:	2040      	movs	r0, #64	; 0x40
 80014d2:	f7ff fecb 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80014d6:	2100      	movs	r1, #0
 80014d8:	2020      	movs	r0, #32
 80014da:	f7ff fec7 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80014de:	2100      	movs	r1, #0
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff fec3 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 80014e6:	2100      	movs	r1, #0
 80014e8:	208d      	movs	r0, #141	; 0x8d
 80014ea:	f7ff febf 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 80014ee:	2100      	movs	r1, #0
 80014f0:	2014      	movs	r0, #20
 80014f2:	f7ff febb 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 80014f6:	2100      	movs	r1, #0
 80014f8:	20a4      	movs	r0, #164	; 0xa4
 80014fa:	f7ff feb7 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 80014fe:	2100      	movs	r1, #0
 8001500:	20a6      	movs	r0, #166	; 0xa6
 8001502:	f7ff feb3 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8001506:	2100      	movs	r1, #0
 8001508:	20af      	movs	r0, #175	; 0xaf
 800150a:	f7ff feaf 	bl	800126c <OLED_WR_Byte>
	

	OLED_Clear();
 800150e:	f7ff ff47 	bl	80013a0 <OLED_Clear>
	OLED_Set_Pos(0,0);
 8001512:	2100      	movs	r1, #0
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fef9 	bl	800130c <OLED_Set_Pos>
}  
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40010800 	.word	0x40010800

08001524 <OLED_ShowCHinese_1>:


/*******************************功能描述：屏幕显示非法入侵或一切正常*********************/

void OLED_ShowCHinese_1(u8 x,u8 y,u8 no)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	460b      	mov	r3, r1
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	717b      	strb	r3, [r7, #5]
	u8 t,adder=0;
 8001536:	2300      	movs	r3, #0
 8001538:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);
 800153a:	79ba      	ldrb	r2, [r7, #6]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fee3 	bl	800130c <OLED_Set_Pos>
    for(t=0;t<20;t++)//16
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e011      	b.n	8001570 <OLED_ShowCHinese_1+0x4c>
		{
				OLED_WR_Byte(Hzk_1[2*no][t],OLED_DATA);
 800154c:	797b      	ldrb	r3, [r7, #5]
 800154e:	005a      	lsls	r2, r3, #1
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	491b      	ldr	r1, [pc, #108]	; (80015c0 <OLED_ShowCHinese_1+0x9c>)
 8001554:	0152      	lsls	r2, r2, #5
 8001556:	440a      	add	r2, r1
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe84 	bl	800126c <OLED_WR_Byte>
				adder+=1;
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	3301      	adds	r3, #1
 8001568:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<20;t++)//16
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b13      	cmp	r3, #19
 8001574:	d9ea      	bls.n	800154c <OLED_ShowCHinese_1+0x28>
     }
		OLED_Set_Pos(x,y+1);
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	3301      	adds	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fec3 	bl	800130c <OLED_Set_Pos>
    for(t=0;t<20;t++)//16
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e012      	b.n	80015b2 <OLED_ShowCHinese_1+0x8e>
			{
				OLED_WR_Byte(Hzk_1[2*no+1][t],OLED_DATA);
 800158c:	797b      	ldrb	r3, [r7, #5]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	490a      	ldr	r1, [pc, #40]	; (80015c0 <OLED_ShowCHinese_1+0x9c>)
 8001596:	0152      	lsls	r2, r2, #5
 8001598:	440a      	add	r2, r1
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe63 	bl	800126c <OLED_WR_Byte>
				adder+=1;
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<20;t++)//16
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b13      	cmp	r3, #19
 80015b6:	d9e9      	bls.n	800158c <OLED_ShowCHinese_1+0x68>
      }
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000004 	.word	0x20000004

080015c4 <OLED_ShowCHinese_0>:

void OLED_ShowCHinese_0(u8 x,u8 y,u8 no)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	460b      	mov	r3, r1
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	717b      	strb	r3, [r7, #5]
	u8 t,adder=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe93 	bl	800130c <OLED_Set_Pos>
    for(t=0;t<16;t++)//16
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e011      	b.n	8001610 <OLED_ShowCHinese_0+0x4c>
		{
				OLED_WR_Byte(Hzk_0[2*no][t],OLED_DATA);
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	005a      	lsls	r2, r3, #1
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <OLED_ShowCHinese_0+0x9c>)
 80015f4:	0152      	lsls	r2, r2, #5
 80015f6:	440a      	add	r2, r1
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe34 	bl	800126c <OLED_WR_Byte>
				adder+=1;
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	3301      	adds	r3, #1
 8001608:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)//16
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	d9ea      	bls.n	80015ec <OLED_ShowCHinese_0+0x28>
     }
		OLED_Set_Pos(x,y+1);
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	3301      	adds	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe73 	bl	800130c <OLED_Set_Pos>
    for(t=0;t<16;t++)//16
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e012      	b.n	8001652 <OLED_ShowCHinese_0+0x8e>
			{
				OLED_WR_Byte(Hzk_0[2*no+1][t],OLED_DATA);
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	490a      	ldr	r1, [pc, #40]	; (8001660 <OLED_ShowCHinese_0+0x9c>)
 8001636:	0152      	lsls	r2, r2, #5
 8001638:	440a      	add	r2, r1
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe13 	bl	800126c <OLED_WR_Byte>
				adder+=1;
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	3301      	adds	r3, #1
 800164a:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)//16
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d9e9      	bls.n	800162c <OLED_ShowCHinese_0+0x68>
      }
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001c4 	.word	0x200001c4

08001664 <OLED_ShowStatus_1>:

//显示非法入侵
void OLED_ShowStatus_1(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	u8  i = 2;
 800166a:	2302      	movs	r3, #2
 800166c:	71fb      	strb	r3, [r7, #7]
	OLED_ShowCHinese_1(0,i,0);		//x轴显示列 	 y轴显示行
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff ff55 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(18,i,1);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2201      	movs	r2, #1
 800167e:	4619      	mov	r1, r3
 8001680:	2012      	movs	r0, #18
 8001682:	f7ff ff4f 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(36,i,2);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2202      	movs	r2, #2
 800168a:	4619      	mov	r1, r3
 800168c:	2024      	movs	r0, #36	; 0x24
 800168e:	f7ff ff49 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(54,i,3);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2203      	movs	r2, #3
 8001696:	4619      	mov	r1, r3
 8001698:	2036      	movs	r0, #54	; 0x36
 800169a:	f7ff ff43 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(72,i,4);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	2048      	movs	r0, #72	; 0x48
 80016a6:	f7ff ff3d 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(90,i,5);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2205      	movs	r2, #5
 80016ae:	4619      	mov	r1, r3
 80016b0:	205a      	movs	r0, #90	; 0x5a
 80016b2:	f7ff ff37 	bl	8001524 <OLED_ShowCHinese_1>
	OLED_ShowCHinese_1(108,i,6);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2206      	movs	r2, #6
 80016ba:	4619      	mov	r1, r3
 80016bc:	206c      	movs	r0, #108	; 0x6c
 80016be:	f7ff ff31 	bl	8001524 <OLED_ShowCHinese_1>


}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <OLED_ShowStatus_0>:

//显示一切正常
void OLED_ShowStatus_0(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
		u8  i = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	71fb      	strb	r3, [r7, #7]
		OLED_ShowCHinese_0(0,i,9);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2209      	movs	r2, #9
 80016d8:	4619      	mov	r1, r3
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ff72 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(18,i,0);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	2012      	movs	r0, #18
 80016e8:	f7ff ff6c 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(36,i,1);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	2024      	movs	r0, #36	; 0x24
 80016f4:	f7ff ff66 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(54,i,2);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2202      	movs	r2, #2
 80016fc:	4619      	mov	r1, r3
 80016fe:	2036      	movs	r0, #54	; 0x36
 8001700:	f7ff ff60 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(72,i,3);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2203      	movs	r2, #3
 8001708:	4619      	mov	r1, r3
 800170a:	2048      	movs	r0, #72	; 0x48
 800170c:	f7ff ff5a 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(90,i,4);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2204      	movs	r2, #4
 8001714:	4619      	mov	r1, r3
 8001716:	205a      	movs	r0, #90	; 0x5a
 8001718:	f7ff ff54 	bl	80015c4 <OLED_ShowCHinese_0>
		OLED_ShowCHinese_0(108,i,5);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2205      	movs	r2, #5
 8001720:	4619      	mov	r1, r3
 8001722:	206c      	movs	r0, #108	; 0x6c
 8001724:	f7ff ff4e 	bl	80015c4 <OLED_ShowCHinese_0>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <OLED_Show_flicker>:
//OLED屏闪烁
void OLED_Show_flicker(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	static u8 flag = 0;
	static u16 num = 0;

	if(num++ >= 300)
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <OLED_Show_flicker+0x48>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	b291      	uxth	r1, r2
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <OLED_Show_flicker+0x48>)
 800173e:	8011      	strh	r1, [r2, #0]
 8001740:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001744:	d315      	bcc.n	8001772 <OLED_Show_flicker+0x42>
	{
		num = 0;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <OLED_Show_flicker+0x48>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
		flag = !flag;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <OLED_Show_flicker+0x4c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <OLED_Show_flicker+0x4c>)
 800175e:	701a      	strb	r2, [r3, #0]
		OLED_flicker(flag);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <OLED_Show_flicker+0x4c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <OLED_Show_flicker+0x3e>
 8001768:	f7ff fdfa 	bl	8001360 <OLED_Display_On>
	}
}
 800176c:	e001      	b.n	8001772 <OLED_Show_flicker+0x42>
		OLED_flicker(flag);
 800176e:	f7ff fe07 	bl	8001380 <OLED_Display_Off>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000054c 	.word	0x2000054c
 800177c:	2000054e 	.word	0x2000054e

08001780 <HAL_MspInit>:

#include "main.h"
 
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_MspInit+0x60>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_MspInit+0x60>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_MspInit+0x60>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x60>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x60>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x60>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_MspInit+0x64>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_MspInit+0x64>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6053      	str	r3, [r2, #4]

  Systick_Interrupt_Config();
 80017d2:	f000 f809 	bl	80017e8 <Systick_Interrupt_Config>


}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <Systick_Interrupt_Config>:
void Systick_Interrupt_Config()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	  /* System interrupt init*/
	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f9fd 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	f06f 000b 	mvn.w	r0, #11
 80017fa:	f000 fa02 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	f06f 000a 	mvn.w	r0, #10
 8001806:	f000 f9fc 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	f06f 0009 	mvn.w	r0, #9
 8001812:	f000 f9f6 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	f06f 0004 	mvn.w	r0, #4
 800181e:	f000 f9f0 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	f06f 0003 	mvn.w	r0, #3
 800182a:	f000 f9ea 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	f06f 0001 	mvn.w	r0, #1
 8001836:	f000 f9e4 	bl	8001c02 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f000 f9de 	bl	8001c02 <HAL_NVIC_SetPriority>

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
	...

08001894 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles System tick timer.
  */
void TIM1_UP_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM1_UP_IRQHandler+0x10>)
 800189a:	f001 f841 	bl	8002920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000055c 	.word	0x2000055c

080018a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

	  HAL_IncTick();
 80018ac:	f000 f8b0 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	  HAL_SYSTICK_IRQHandler();
 80018b0:	f000 f9ec 	bl	8001c8c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x50>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x16>
		heap_end = &end;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <_sbrk+0x50>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <_sbrk+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <_sbrk+0x50>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_sbrk+0x50>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	466a      	mov	r2, sp
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d907      	bls.n	80018fe <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018ee:	f001 f97b 	bl	8002be8 <__errno>
 80018f2:	4602      	mov	r2, r0
 80018f4:	230c      	movs	r3, #12
 80018f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	e006      	b.n	800190c <_sbrk+0x48>
	}

	heap_end += incr;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <_sbrk+0x50>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <_sbrk+0x50>)
 8001908:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000550 	.word	0x20000550
 8001918:	200005a8 	.word	0x200005a8

0800191c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <SystemInit+0x5c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SystemInit+0x5c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x5c>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4911      	ldr	r1, [pc, #68]	; (8001978 <SystemInit+0x5c>)
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <SystemInit+0x60>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <SystemInit+0x5c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <SystemInit+0x5c>)
 800193e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SystemInit+0x5c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SystemInit+0x5c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <SystemInit+0x5c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <SystemInit+0x5c>)
 800195a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800195e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SystemInit+0x5c>)
 8001962:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001966:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SystemInit+0x64>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	f8ff0000 	.word	0xf8ff0000
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x28>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f929 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff feee 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f933 	bl	8001c3a <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f909 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000344 	.word	0x20000344
 8001a08:	2000034c 	.word	0x2000034c
 8001a0c:	20000348 	.word	0x20000348

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x1c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x20>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_IncTick+0x20>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	2000034c 	.word	0x2000034c
 8001a30:	2000059c 	.word	0x2000059c

08001a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <HAL_GetTick+0x10>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	2000059c 	.word	0x2000059c

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fff0 	bl	8001a34 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_Delay+0x40>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffe0 	bl	8001a34 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000034c 	.word	0x2000034c

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff90 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff49 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff5e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff90 	bl	8001b44 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5f 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffb0 	bl	8001ba8 <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d106      	bne.n	8001c70 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001c6e:	e005      	b.n	8001c7c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c76:	f023 0304 	bic.w	r3, r3, #4
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c90:	f7ff fa28 	bl	80010e4 <HAL_SYSTICK_Callback>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b08b      	sub	sp, #44	; 0x2c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001caa:	e133      	b.n	8001f14 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cac:	2201      	movs	r2, #1
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8122 	bne.w	8001f0e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d034      	beq.n	8001d3c <HAL_GPIO_Init+0xa4>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d80d      	bhi.n	8001cf2 <HAL_GPIO_Init+0x5a>
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_GPIO_Init+0x9a>
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d804      	bhi.n	8001ce8 <HAL_GPIO_Init+0x50>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d031      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d01c      	beq.n	8001d20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ce6:	e048      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d043      	beq.n	8001d74 <HAL_GPIO_Init+0xdc>
 8001cec:	2b11      	cmp	r3, #17
 8001cee:	d01b      	beq.n	8001d28 <HAL_GPIO_Init+0x90>
          break;
 8001cf0:	e043      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cf2:	4a8f      	ldr	r2, [pc, #572]	; (8001f30 <HAL_GPIO_Init+0x298>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d026      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
 8001cf8:	4a8d      	ldr	r2, [pc, #564]	; (8001f30 <HAL_GPIO_Init+0x298>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d806      	bhi.n	8001d0c <HAL_GPIO_Init+0x74>
 8001cfe:	4a8d      	ldr	r2, [pc, #564]	; (8001f34 <HAL_GPIO_Init+0x29c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d020      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
 8001d04:	4a8c      	ldr	r2, [pc, #560]	; (8001f38 <HAL_GPIO_Init+0x2a0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01d      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
          break;
 8001d0a:	e036      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d0c:	4a8b      	ldr	r2, [pc, #556]	; (8001f3c <HAL_GPIO_Init+0x2a4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
 8001d12:	4a8b      	ldr	r2, [pc, #556]	; (8001f40 <HAL_GPIO_Init+0x2a8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d016      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
 8001d18:	4a8a      	ldr	r2, [pc, #552]	; (8001f44 <HAL_GPIO_Init+0x2ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0xae>
          break;
 8001d1e:	e02c      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e028      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e023      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e01e      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e019      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e012      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	611a      	str	r2, [r3, #16]
          break;
 8001d66:	e008      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	615a      	str	r2, [r3, #20]
          break;
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2bff      	cmp	r3, #255	; 0xff
 8001d7e:	d801      	bhi.n	8001d84 <HAL_GPIO_Init+0xec>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	e001      	b.n	8001d88 <HAL_GPIO_Init+0xf0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d802      	bhi.n	8001d96 <HAL_GPIO_Init+0xfe>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x104>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	3b08      	subs	r3, #8
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	210f      	movs	r1, #15
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	6a39      	ldr	r1, [r7, #32]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a2 	beq.w	8001f0e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6193      	str	r3, [r2, #24]
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de2:	4a5a      	ldr	r2, [pc, #360]	; (8001f4c <HAL_GPIO_Init+0x2b4>)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01f      	beq.n	8001e4e <HAL_GPIO_Init+0x1b6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_GPIO_Init+0x2bc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x1b2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_GPIO_Init+0x2c0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1ae>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_GPIO_Init+0x2c4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1aa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_GPIO_Init+0x2c8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1a6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x2cc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1a2>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x1b8>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e60:	493a      	ldr	r1, [pc, #232]	; (8001f4c <HAL_GPIO_Init+0x2b4>)
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	493a      	ldr	r1, [pc, #232]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4930      	ldr	r1, [pc, #192]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	492b      	ldr	r1, [pc, #172]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4926      	ldr	r1, [pc, #152]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4921      	ldr	r1, [pc, #132]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	491c      	ldr	r1, [pc, #112]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4917      	ldr	r1, [pc, #92]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f47f aec4 	bne.w	8001cac <HAL_GPIO_Init+0x14>
  }
}
 8001f24:	bf00      	nop
 8001f26:	372c      	adds	r7, #44	; 0x2c
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	10210000 	.word	0x10210000
 8001f34:	10110000 	.word	0x10110000
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	10310000 	.word	0x10310000
 8001f40:	10320000 	.word	0x10320000
 8001f44:	10220000 	.word	0x10220000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	40011800 	.word	0x40011800
 8001f64:	40011c00 	.word	0x40011c00
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	807b      	strh	r3, [r7, #2]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001faa:	787b      	ldrb	r3, [r7, #1]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb6:	e003      	b.n	8001fc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	611a      	str	r2, [r3, #16]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e26c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b92      	ldr	r3, [pc, #584]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d112      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x12c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d168      	bne.n	80020f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e246      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x76>
 8002034:	4b80      	ldr	r3, [pc, #512]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7f      	ldr	r2, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e02e      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x98>
 800204a:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7a      	ldr	r2, [pc, #488]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b78      	ldr	r3, [pc, #480]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a77      	ldr	r2, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xbc>
 800206e:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a71      	ldr	r2, [pc, #452]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fcc4 	bl	8001a34 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fcc0 	bl	8001a34 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1fa      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xe4>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fcb0 	bl	8001a34 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fcac 	bl	8001a34 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1e6      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x10c>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002112:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1ba      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4939      	ldr	r1, [pc, #228]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x270>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fc65 	bl	8001a34 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff fc61 	bl	8001a34 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e19b      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4927      	ldr	r1, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_OscConfig+0x270>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fc44 	bl	8001a34 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7ff fc40 	bl	8001a34 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e17a      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03a      	beq.n	8002250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fc24 	bl	8001a34 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fc20 	bl	8001a34 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e15a      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220e:	2001      	movs	r0, #1
 8002210:	f000 fab2 	bl	8002778 <RCC_Delay>
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7ff fc0a 	bl	8001a34 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002222:	e00f      	b.n	8002244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff fc06 	bl	8001a34 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d908      	bls.n	8002244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e140      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	42420000 	.word	0x42420000
 8002240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b9e      	ldr	r3, [pc, #632]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e9      	bne.n	8002224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a6 	beq.w	80023aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b97      	ldr	r3, [pc, #604]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b94      	ldr	r3, [pc, #592]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a93      	ldr	r2, [pc, #588]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b91      	ldr	r3, [pc, #580]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b8e      	ldr	r3, [pc, #568]	; (80024c4 <HAL_RCC_OscConfig+0x4f8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a8a      	ldr	r2, [pc, #552]	; (80024c4 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fbc7 	bl	8001a34 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7ff fbc3 	bl	8001a34 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0fd      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCC_OscConfig+0x4f8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x312>
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e02d      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x334>
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a72      	ldr	r2, [pc, #456]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x356>
 8002308:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a6c      	ldr	r2, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a66      	ldr	r2, [pc, #408]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b64      	ldr	r3, [pc, #400]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a63      	ldr	r2, [pc, #396]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff fb77 	bl	8001a34 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff fb73 	bl	8001a34 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0ab      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x37e>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb61 	bl	8001a34 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fb5d 	bl	8001a34 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e095      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8081 	beq.w	80024b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d061      	beq.n	8002484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d146      	bne.n	8002456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x4fc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb31 	bl	8001a34 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fb2d 	bl	8001a34 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e067      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	492d      	ldr	r1, [pc, #180]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a19      	ldr	r1, [r3, #32]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	430b      	orrs	r3, r1
 8002422:	4927      	ldr	r1, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x4fc>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fb01 	bl	8001a34 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fafd 	bl	8001a34 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e037      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x46a>
 8002454:	e02f      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_RCC_OscConfig+0x4fc>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff faea 	bl	8001a34 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff fae6 	bl	8001a34 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e020      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x498>
 8002482:	e018      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e013      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42420060 	.word	0x42420060

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800254a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff fa3a 	bl	8001a34 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff fa36 	bl	8001a34 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	fa21 f303 	lsr.w	r3, r1, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f998 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	080066f4 	.word	0x080066f4
 8002698:	20000344 	.word	0x20000344
 800269c:	20000348 	.word	0x20000348

080026a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b490      	push	{r4, r7}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026a8:	1d3c      	adds	r4, r7, #4
 80026aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x46>
 80026de:	e02d      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e2:	623b      	str	r3, [r7, #32]
      break;
 80026e4:	e02d      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026f2:	4413      	add	r3, r2
 80026f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c5b      	lsrs	r3, r3, #17
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002712:	4413      	add	r3, r2
 8002714:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002718:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_RCC_GetSysClockFreq+0xbc>)
 800271e:	fb02 f203 	mul.w	r2, r2, r3
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	e004      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	623b      	str	r3, [r7, #32]
      break;
 800273a:	e002      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_RCC_GetSysClockFreq+0xbc>)
 800273e:	623b      	str	r3, [r7, #32]
      break;
 8002740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002742:	6a3b      	ldr	r3, [r7, #32]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bc90      	pop	{r4, r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	080066e0 	.word	0x080066e0
 8002754:	080066f0 	.word	0x080066f0
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000344 	.word	0x20000344

08002778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <RCC_Delay+0x34>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <RCC_Delay+0x38>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0a5b      	lsrs	r3, r3, #9
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002794:	bf00      	nop
  }
  while (Delay --);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	60fa      	str	r2, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <RCC_Delay+0x1c>
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000344 	.word	0x20000344
 80027b0:	10624dd3 	.word	0x10624dd3

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d07d      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	61d3      	str	r3, [r2, #28]
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002814:	f7ff f90e 	bl	8001a34 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	e008      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281c:	f7ff f90a 	bl	8001a34 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e06d      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d02e      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d027      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002868:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800286e:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d014      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff f8d9 	bl	8001a34 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f8d5 	bl	8001a34 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e036      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4917      	ldr	r1, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	490b      	ldr	r1, [pc, #44]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4904      	ldr	r1, [pc, #16]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	42420440 	.word	0x42420440

08002920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0202 	mvn.w	r2, #2
 800294c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8ed 	bl	8002b42 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8e0 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f8ef 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8c3 	bl	8002b42 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8b6 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8c5 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0208 	mvn.w	r2, #8
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f899 	bl	8002b42 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f88c 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f89b 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f86f 	bl	8002b42 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f862 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f871 	bl	8002b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fbb4 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f85d 	bl	8002b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f835 	bl	8002b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d10e      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d107      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0220 	mvn.w	r2, #32
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f828 	bl	8002b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b9e:	e003      	b.n	8002ba8 <LoopCopyDataInit>

08002ba0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ba2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ba4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ba6:	3104      	adds	r1, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ba8:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002bac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bb0:	d3f6      	bcc.n	8002ba0 <CopyDataInit>
  ldr r2, =_sbss
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bb4:	e002      	b.n	8002bbc <LoopFillZerobss>

08002bb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bb8:	f842 3b04 	str.w	r3, [r2], #4

08002bbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bc0:	d3f9      	bcc.n	8002bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bc2:	f7fe feab 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f000 f815 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bca:	f7fe f9ef 	bl	8000fac <main>
  bx lr
 8002bce:	4770      	bx	lr
  ldr r3, =_sidata
 8002bd0:	080069c0 	.word	0x080069c0
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bd8:	20000520 	.word	0x20000520
  ldr r2, =_sbss
 8002bdc:	20000520 	.word	0x20000520
  ldr r3, = _ebss
 8002be0:	200005a4 	.word	0x200005a4

08002be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC1_2_IRQHandler>
	...

08002be8 <__errno>:
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <__errno+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000350 	.word	0x20000350

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2500      	movs	r5, #0
 8002bf8:	4e0c      	ldr	r6, [pc, #48]	; (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1ba4      	subs	r4, r4, r6
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	f003 fd5e 	bl	80066c4 <_init>
 8002c08:	2500      	movs	r5, #0
 8002c0a:	4e0a      	ldr	r6, [pc, #40]	; (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1ba4      	subs	r4, r4, r6
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a5      	cmp	r5, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c1c:	4798      	blx	r3
 8002c1e:	3501      	adds	r5, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c26:	4798      	blx	r3
 8002c28:	3501      	adds	r5, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	080069b8 	.word	0x080069b8
 8002c30:	080069b8 	.word	0x080069b8
 8002c34:	080069b8 	.word	0x080069b8
 8002c38:	080069bc 	.word	0x080069bc

08002c3c <memset>:
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4402      	add	r2, r0
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <__cvt>:
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c52:	461e      	mov	r6, r3
 8002c54:	bfbb      	ittet	lt
 8002c56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002c5a:	461e      	movlt	r6, r3
 8002c5c:	2300      	movge	r3, #0
 8002c5e:	232d      	movlt	r3, #45	; 0x2d
 8002c60:	b088      	sub	sp, #32
 8002c62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002c64:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002c68:	f027 0720 	bic.w	r7, r7, #32
 8002c6c:	2f46      	cmp	r7, #70	; 0x46
 8002c6e:	4614      	mov	r4, r2
 8002c70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002c72:	700b      	strb	r3, [r1, #0]
 8002c74:	d004      	beq.n	8002c80 <__cvt+0x34>
 8002c76:	2f45      	cmp	r7, #69	; 0x45
 8002c78:	d100      	bne.n	8002c7c <__cvt+0x30>
 8002c7a:	3501      	adds	r5, #1
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e000      	b.n	8002c82 <__cvt+0x36>
 8002c80:	2303      	movs	r3, #3
 8002c82:	aa07      	add	r2, sp, #28
 8002c84:	9204      	str	r2, [sp, #16]
 8002c86:	aa06      	add	r2, sp, #24
 8002c88:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002c8c:	e9cd 3500 	strd	r3, r5, [sp]
 8002c90:	4622      	mov	r2, r4
 8002c92:	4633      	mov	r3, r6
 8002c94:	f001 fd7c 	bl	8004790 <_dtoa_r>
 8002c98:	2f47      	cmp	r7, #71	; 0x47
 8002c9a:	4680      	mov	r8, r0
 8002c9c:	d102      	bne.n	8002ca4 <__cvt+0x58>
 8002c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ca0:	07db      	lsls	r3, r3, #31
 8002ca2:	d526      	bpl.n	8002cf2 <__cvt+0xa6>
 8002ca4:	2f46      	cmp	r7, #70	; 0x46
 8002ca6:	eb08 0905 	add.w	r9, r8, r5
 8002caa:	d111      	bne.n	8002cd0 <__cvt+0x84>
 8002cac:	f898 3000 	ldrb.w	r3, [r8]
 8002cb0:	2b30      	cmp	r3, #48	; 0x30
 8002cb2:	d10a      	bne.n	8002cca <__cvt+0x7e>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4631      	mov	r1, r6
 8002cbc:	f7fd fee0 	bl	8000a80 <__aeabi_dcmpeq>
 8002cc0:	b918      	cbnz	r0, 8002cca <__cvt+0x7e>
 8002cc2:	f1c5 0501 	rsb	r5, r5, #1
 8002cc6:	f8ca 5000 	str.w	r5, [sl]
 8002cca:	f8da 3000 	ldr.w	r3, [sl]
 8002cce:	4499      	add	r9, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	f7fd fed2 	bl	8000a80 <__aeabi_dcmpeq>
 8002cdc:	b938      	cbnz	r0, 8002cee <__cvt+0xa2>
 8002cde:	2230      	movs	r2, #48	; 0x30
 8002ce0:	9b07      	ldr	r3, [sp, #28]
 8002ce2:	454b      	cmp	r3, r9
 8002ce4:	d205      	bcs.n	8002cf2 <__cvt+0xa6>
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	9107      	str	r1, [sp, #28]
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e7f8      	b.n	8002ce0 <__cvt+0x94>
 8002cee:	f8cd 901c 	str.w	r9, [sp, #28]
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	9b07      	ldr	r3, [sp, #28]
 8002cf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002cf8:	eba3 0308 	sub.w	r3, r3, r8
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	b008      	add	sp, #32
 8002d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d04 <__exponent>:
 8002d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d06:	2900      	cmp	r1, #0
 8002d08:	bfb4      	ite	lt
 8002d0a:	232d      	movlt	r3, #45	; 0x2d
 8002d0c:	232b      	movge	r3, #43	; 0x2b
 8002d0e:	4604      	mov	r4, r0
 8002d10:	bfb8      	it	lt
 8002d12:	4249      	neglt	r1, r1
 8002d14:	2909      	cmp	r1, #9
 8002d16:	f804 2b02 	strb.w	r2, [r4], #2
 8002d1a:	7043      	strb	r3, [r0, #1]
 8002d1c:	dd21      	ble.n	8002d62 <__exponent+0x5e>
 8002d1e:	f10d 0307 	add.w	r3, sp, #7
 8002d22:	461f      	mov	r7, r3
 8002d24:	260a      	movs	r6, #10
 8002d26:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d2a:	fb06 1115 	mls	r1, r6, r5, r1
 8002d2e:	2d09      	cmp	r5, #9
 8002d30:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002d34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d38:	f103 32ff 	add.w	r2, r3, #4294967295
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	dc09      	bgt.n	8002d54 <__exponent+0x50>
 8002d40:	3130      	adds	r1, #48	; 0x30
 8002d42:	3b02      	subs	r3, #2
 8002d44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002d48:	42bb      	cmp	r3, r7
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	d304      	bcc.n	8002d58 <__exponent+0x54>
 8002d4e:	1a10      	subs	r0, r2, r0
 8002d50:	b003      	add	sp, #12
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d54:	4613      	mov	r3, r2
 8002d56:	e7e6      	b.n	8002d26 <__exponent+0x22>
 8002d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d5c:	f804 2b01 	strb.w	r2, [r4], #1
 8002d60:	e7f2      	b.n	8002d48 <__exponent+0x44>
 8002d62:	2330      	movs	r3, #48	; 0x30
 8002d64:	4419      	add	r1, r3
 8002d66:	7083      	strb	r3, [r0, #2]
 8002d68:	1d02      	adds	r2, r0, #4
 8002d6a:	70c1      	strb	r1, [r0, #3]
 8002d6c:	e7ef      	b.n	8002d4e <__exponent+0x4a>
	...

08002d70 <_printf_float>:
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	b091      	sub	sp, #68	; 0x44
 8002d76:	460c      	mov	r4, r1
 8002d78:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002d7a:	4693      	mov	fp, r2
 8002d7c:	461e      	mov	r6, r3
 8002d7e:	4605      	mov	r5, r0
 8002d80:	f002 fde8 	bl	8005954 <_localeconv_r>
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8a:	f7fd fa4d 	bl	8000228 <strlen>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	930e      	str	r3, [sp, #56]	; 0x38
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	900a      	str	r0, [sp, #40]	; 0x28
 8002d96:	3307      	adds	r3, #7
 8002d98:	f023 0307 	bic.w	r3, r3, #7
 8002d9c:	f103 0208 	add.w	r2, r3, #8
 8002da0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002da4:	f8d4 a000 	ldr.w	sl, [r4]
 8002da8:	603a      	str	r2, [r7, #0]
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002db2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002db6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	4ba6      	ldr	r3, [pc, #664]	; (800305c <_printf_float+0x2ec>)
 8002dc2:	4638      	mov	r0, r7
 8002dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dc6:	f7fd fe8d 	bl	8000ae4 <__aeabi_dcmpun>
 8002dca:	bb68      	cbnz	r0, 8002e28 <_printf_float+0xb8>
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	4ba2      	ldr	r3, [pc, #648]	; (800305c <_printf_float+0x2ec>)
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dd6:	f7fd fe67 	bl	8000aa8 <__aeabi_dcmple>
 8002dda:	bb28      	cbnz	r0, 8002e28 <_printf_float+0xb8>
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2300      	movs	r3, #0
 8002de0:	4638      	mov	r0, r7
 8002de2:	4649      	mov	r1, r9
 8002de4:	f7fd fe56 	bl	8000a94 <__aeabi_dcmplt>
 8002de8:	b110      	cbz	r0, 8002df0 <_printf_float+0x80>
 8002dea:	232d      	movs	r3, #45	; 0x2d
 8002dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df0:	4f9b      	ldr	r7, [pc, #620]	; (8003060 <_printf_float+0x2f0>)
 8002df2:	4b9c      	ldr	r3, [pc, #624]	; (8003064 <_printf_float+0x2f4>)
 8002df4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002df8:	bf98      	it	ls
 8002dfa:	461f      	movls	r7, r3
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	f04f 0900 	mov.w	r9, #0
 8002e02:	6123      	str	r3, [r4, #16]
 8002e04:	f02a 0304 	bic.w	r3, sl, #4
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	9600      	str	r6, [sp, #0]
 8002e0c:	465b      	mov	r3, fp
 8002e0e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002e10:	4621      	mov	r1, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f9e2 	bl	80031dc <_printf_common>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	f040 8090 	bne.w	8002f3e <_printf_float+0x1ce>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	b011      	add	sp, #68	; 0x44
 8002e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e28:	463a      	mov	r2, r7
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	4649      	mov	r1, r9
 8002e30:	f7fd fe58 	bl	8000ae4 <__aeabi_dcmpun>
 8002e34:	b110      	cbz	r0, 8002e3c <_printf_float+0xcc>
 8002e36:	4f8c      	ldr	r7, [pc, #560]	; (8003068 <_printf_float+0x2f8>)
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <_printf_float+0x2fc>)
 8002e3a:	e7db      	b.n	8002df4 <_printf_float+0x84>
 8002e3c:	6863      	ldr	r3, [r4, #4]
 8002e3e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	a80d      	add	r0, sp, #52	; 0x34
 8002e46:	a90e      	add	r1, sp, #56	; 0x38
 8002e48:	d140      	bne.n	8002ecc <_printf_float+0x15c>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	6063      	str	r3, [r4, #4]
 8002e4e:	f04f 0c00 	mov.w	ip, #0
 8002e52:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002e56:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002e5a:	6863      	ldr	r3, [r4, #4]
 8002e5c:	6022      	str	r2, [r4, #0]
 8002e5e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	463a      	mov	r2, r7
 8002e66:	464b      	mov	r3, r9
 8002e68:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f7ff feed 	bl	8002c4c <__cvt>
 8002e72:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002e76:	2b47      	cmp	r3, #71	; 0x47
 8002e78:	4607      	mov	r7, r0
 8002e7a:	d109      	bne.n	8002e90 <_printf_float+0x120>
 8002e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e7e:	1cd8      	adds	r0, r3, #3
 8002e80:	db02      	blt.n	8002e88 <_printf_float+0x118>
 8002e82:	6862      	ldr	r2, [r4, #4]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	dd47      	ble.n	8002f18 <_printf_float+0x1a8>
 8002e88:	f1a8 0802 	sub.w	r8, r8, #2
 8002e8c:	fa5f f888 	uxtb.w	r8, r8
 8002e90:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002e94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e96:	d824      	bhi.n	8002ee2 <_printf_float+0x172>
 8002e98:	3901      	subs	r1, #1
 8002e9a:	4642      	mov	r2, r8
 8002e9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002ea0:	910d      	str	r1, [sp, #52]	; 0x34
 8002ea2:	f7ff ff2f 	bl	8002d04 <__exponent>
 8002ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ea8:	4681      	mov	r9, r0
 8002eaa:	1813      	adds	r3, r2, r0
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	6123      	str	r3, [r4, #16]
 8002eb0:	dc02      	bgt.n	8002eb8 <_printf_float+0x148>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	07d1      	lsls	r1, r2, #31
 8002eb6:	d501      	bpl.n	8002ebc <_printf_float+0x14c>
 8002eb8:	3301      	adds	r3, #1
 8002eba:	6123      	str	r3, [r4, #16]
 8002ebc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0a2      	beq.n	8002e0a <_printf_float+0x9a>
 8002ec4:	232d      	movs	r3, #45	; 0x2d
 8002ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eca:	e79e      	b.n	8002e0a <_printf_float+0x9a>
 8002ecc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002ed0:	f000 816e 	beq.w	80031b0 <_printf_float+0x440>
 8002ed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ed8:	d1b9      	bne.n	8002e4e <_printf_float+0xde>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1b7      	bne.n	8002e4e <_printf_float+0xde>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e7b4      	b.n	8002e4c <_printf_float+0xdc>
 8002ee2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002ee6:	d119      	bne.n	8002f1c <_printf_float+0x1ac>
 8002ee8:	2900      	cmp	r1, #0
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	dd0c      	ble.n	8002f08 <_printf_float+0x198>
 8002eee:	6121      	str	r1, [r4, #16]
 8002ef0:	b913      	cbnz	r3, 8002ef8 <_printf_float+0x188>
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	07d2      	lsls	r2, r2, #31
 8002ef6:	d502      	bpl.n	8002efe <_printf_float+0x18e>
 8002ef8:	3301      	adds	r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	6123      	str	r3, [r4, #16]
 8002efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f00:	f04f 0900 	mov.w	r9, #0
 8002f04:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f06:	e7d9      	b.n	8002ebc <_printf_float+0x14c>
 8002f08:	b913      	cbnz	r3, 8002f10 <_printf_float+0x1a0>
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	07d0      	lsls	r0, r2, #31
 8002f0e:	d501      	bpl.n	8002f14 <_printf_float+0x1a4>
 8002f10:	3302      	adds	r3, #2
 8002f12:	e7f3      	b.n	8002efc <_printf_float+0x18c>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e7f1      	b.n	8002efc <_printf_float+0x18c>
 8002f18:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002f1c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002f20:	4293      	cmp	r3, r2
 8002f22:	db05      	blt.n	8002f30 <_printf_float+0x1c0>
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	6123      	str	r3, [r4, #16]
 8002f28:	07d1      	lsls	r1, r2, #31
 8002f2a:	d5e8      	bpl.n	8002efe <_printf_float+0x18e>
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	e7e5      	b.n	8002efc <_printf_float+0x18c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bfcc      	ite	gt
 8002f34:	2301      	movgt	r3, #1
 8002f36:	f1c3 0302 	rsble	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	e7de      	b.n	8002efc <_printf_float+0x18c>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	055a      	lsls	r2, r3, #21
 8002f42:	d407      	bmi.n	8002f54 <_printf_float+0x1e4>
 8002f44:	6923      	ldr	r3, [r4, #16]
 8002f46:	463a      	mov	r2, r7
 8002f48:	4659      	mov	r1, fp
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	47b0      	blx	r6
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d129      	bne.n	8002fa6 <_printf_float+0x236>
 8002f52:	e764      	b.n	8002e1e <_printf_float+0xae>
 8002f54:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002f58:	f240 80d7 	bls.w	800310a <_printf_float+0x39a>
 8002f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f60:	2200      	movs	r2, #0
 8002f62:	2300      	movs	r3, #0
 8002f64:	f7fd fd8c 	bl	8000a80 <__aeabi_dcmpeq>
 8002f68:	b388      	cbz	r0, 8002fce <_printf_float+0x25e>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <_printf_float+0x300>)
 8002f6e:	4659      	mov	r1, fp
 8002f70:	4628      	mov	r0, r5
 8002f72:	47b0      	blx	r6
 8002f74:	3001      	adds	r0, #1
 8002f76:	f43f af52 	beq.w	8002e1e <_printf_float+0xae>
 8002f7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	db02      	blt.n	8002f88 <_printf_float+0x218>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	07d8      	lsls	r0, r3, #31
 8002f86:	d50e      	bpl.n	8002fa6 <_printf_float+0x236>
 8002f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	4628      	mov	r0, r5
 8002f90:	47b0      	blx	r6
 8002f92:	3001      	adds	r0, #1
 8002f94:	f43f af43 	beq.w	8002e1e <_printf_float+0xae>
 8002f98:	2700      	movs	r7, #0
 8002f9a:	f104 081a 	add.w	r8, r4, #26
 8002f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	42bb      	cmp	r3, r7
 8002fa4:	dc09      	bgt.n	8002fba <_printf_float+0x24a>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	079f      	lsls	r7, r3, #30
 8002faa:	f100 80fd 	bmi.w	80031a8 <_printf_float+0x438>
 8002fae:	68e0      	ldr	r0, [r4, #12]
 8002fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fb2:	4298      	cmp	r0, r3
 8002fb4:	bfb8      	it	lt
 8002fb6:	4618      	movlt	r0, r3
 8002fb8:	e733      	b.n	8002e22 <_printf_float+0xb2>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	4659      	mov	r1, fp
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b0      	blx	r6
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f43f af2a 	beq.w	8002e1e <_printf_float+0xae>
 8002fca:	3701      	adds	r7, #1
 8002fcc:	e7e7      	b.n	8002f9e <_printf_float+0x22e>
 8002fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dc2b      	bgt.n	800302c <_printf_float+0x2bc>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4a26      	ldr	r2, [pc, #152]	; (8003070 <_printf_float+0x300>)
 8002fd8:	4659      	mov	r1, fp
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b0      	blx	r6
 8002fde:	3001      	adds	r0, #1
 8002fe0:	f43f af1d 	beq.w	8002e1e <_printf_float+0xae>
 8002fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe6:	b923      	cbnz	r3, 8002ff2 <_printf_float+0x282>
 8002fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fea:	b913      	cbnz	r3, 8002ff2 <_printf_float+0x282>
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	07d9      	lsls	r1, r3, #31
 8002ff0:	d5d9      	bpl.n	8002fa6 <_printf_float+0x236>
 8002ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ff6:	4659      	mov	r1, fp
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	47b0      	blx	r6
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	f43f af0e 	beq.w	8002e1e <_printf_float+0xae>
 8003002:	f04f 0800 	mov.w	r8, #0
 8003006:	f104 091a 	add.w	r9, r4, #26
 800300a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800300c:	425b      	negs	r3, r3
 800300e:	4543      	cmp	r3, r8
 8003010:	dc01      	bgt.n	8003016 <_printf_float+0x2a6>
 8003012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003014:	e797      	b.n	8002f46 <_printf_float+0x1d6>
 8003016:	2301      	movs	r3, #1
 8003018:	464a      	mov	r2, r9
 800301a:	4659      	mov	r1, fp
 800301c:	4628      	mov	r0, r5
 800301e:	47b0      	blx	r6
 8003020:	3001      	adds	r0, #1
 8003022:	f43f aefc 	beq.w	8002e1e <_printf_float+0xae>
 8003026:	f108 0801 	add.w	r8, r8, #1
 800302a:	e7ee      	b.n	800300a <_printf_float+0x29a>
 800302c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800302e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003030:	429a      	cmp	r2, r3
 8003032:	bfa8      	it	ge
 8003034:	461a      	movge	r2, r3
 8003036:	2a00      	cmp	r2, #0
 8003038:	4690      	mov	r8, r2
 800303a:	dd07      	ble.n	800304c <_printf_float+0x2dc>
 800303c:	4613      	mov	r3, r2
 800303e:	4659      	mov	r1, fp
 8003040:	463a      	mov	r2, r7
 8003042:	4628      	mov	r0, r5
 8003044:	47b0      	blx	r6
 8003046:	3001      	adds	r0, #1
 8003048:	f43f aee9 	beq.w	8002e1e <_printf_float+0xae>
 800304c:	f104 031a 	add.w	r3, r4, #26
 8003050:	f04f 0a00 	mov.w	sl, #0
 8003054:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003058:	930b      	str	r3, [sp, #44]	; 0x2c
 800305a:	e015      	b.n	8003088 <_printf_float+0x318>
 800305c:	7fefffff 	.word	0x7fefffff
 8003060:	08006708 	.word	0x08006708
 8003064:	08006704 	.word	0x08006704
 8003068:	08006710 	.word	0x08006710
 800306c:	0800670c 	.word	0x0800670c
 8003070:	08006714 	.word	0x08006714
 8003074:	2301      	movs	r3, #1
 8003076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003078:	4659      	mov	r1, fp
 800307a:	4628      	mov	r0, r5
 800307c:	47b0      	blx	r6
 800307e:	3001      	adds	r0, #1
 8003080:	f43f aecd 	beq.w	8002e1e <_printf_float+0xae>
 8003084:	f10a 0a01 	add.w	sl, sl, #1
 8003088:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800308c:	eba9 0308 	sub.w	r3, r9, r8
 8003090:	4553      	cmp	r3, sl
 8003092:	dcef      	bgt.n	8003074 <_printf_float+0x304>
 8003094:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003098:	429a      	cmp	r2, r3
 800309a:	444f      	add	r7, r9
 800309c:	db14      	blt.n	80030c8 <_printf_float+0x358>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	07da      	lsls	r2, r3, #31
 80030a2:	d411      	bmi.n	80030c8 <_printf_float+0x358>
 80030a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030a8:	eba3 0209 	sub.w	r2, r3, r9
 80030ac:	eba3 0901 	sub.w	r9, r3, r1
 80030b0:	4591      	cmp	r9, r2
 80030b2:	bfa8      	it	ge
 80030b4:	4691      	movge	r9, r2
 80030b6:	f1b9 0f00 	cmp.w	r9, #0
 80030ba:	dc0d      	bgt.n	80030d8 <_printf_float+0x368>
 80030bc:	2700      	movs	r7, #0
 80030be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030c2:	f104 081a 	add.w	r8, r4, #26
 80030c6:	e018      	b.n	80030fa <_printf_float+0x38a>
 80030c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030cc:	4659      	mov	r1, fp
 80030ce:	4628      	mov	r0, r5
 80030d0:	47b0      	blx	r6
 80030d2:	3001      	adds	r0, #1
 80030d4:	d1e6      	bne.n	80030a4 <_printf_float+0x334>
 80030d6:	e6a2      	b.n	8002e1e <_printf_float+0xae>
 80030d8:	464b      	mov	r3, r9
 80030da:	463a      	mov	r2, r7
 80030dc:	4659      	mov	r1, fp
 80030de:	4628      	mov	r0, r5
 80030e0:	47b0      	blx	r6
 80030e2:	3001      	adds	r0, #1
 80030e4:	d1ea      	bne.n	80030bc <_printf_float+0x34c>
 80030e6:	e69a      	b.n	8002e1e <_printf_float+0xae>
 80030e8:	2301      	movs	r3, #1
 80030ea:	4642      	mov	r2, r8
 80030ec:	4659      	mov	r1, fp
 80030ee:	4628      	mov	r0, r5
 80030f0:	47b0      	blx	r6
 80030f2:	3001      	adds	r0, #1
 80030f4:	f43f ae93 	beq.w	8002e1e <_printf_float+0xae>
 80030f8:	3701      	adds	r7, #1
 80030fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	eba3 0309 	sub.w	r3, r3, r9
 8003104:	42bb      	cmp	r3, r7
 8003106:	dcef      	bgt.n	80030e8 <_printf_float+0x378>
 8003108:	e74d      	b.n	8002fa6 <_printf_float+0x236>
 800310a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800310c:	2a01      	cmp	r2, #1
 800310e:	dc01      	bgt.n	8003114 <_printf_float+0x3a4>
 8003110:	07db      	lsls	r3, r3, #31
 8003112:	d538      	bpl.n	8003186 <_printf_float+0x416>
 8003114:	2301      	movs	r3, #1
 8003116:	463a      	mov	r2, r7
 8003118:	4659      	mov	r1, fp
 800311a:	4628      	mov	r0, r5
 800311c:	47b0      	blx	r6
 800311e:	3001      	adds	r0, #1
 8003120:	f43f ae7d 	beq.w	8002e1e <_printf_float+0xae>
 8003124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003128:	4659      	mov	r1, fp
 800312a:	4628      	mov	r0, r5
 800312c:	47b0      	blx	r6
 800312e:	3001      	adds	r0, #1
 8003130:	f107 0701 	add.w	r7, r7, #1
 8003134:	f43f ae73 	beq.w	8002e1e <_printf_float+0xae>
 8003138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800313c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800313e:	2200      	movs	r2, #0
 8003140:	f103 38ff 	add.w	r8, r3, #4294967295
 8003144:	2300      	movs	r3, #0
 8003146:	f7fd fc9b 	bl	8000a80 <__aeabi_dcmpeq>
 800314a:	b9c0      	cbnz	r0, 800317e <_printf_float+0x40e>
 800314c:	4643      	mov	r3, r8
 800314e:	463a      	mov	r2, r7
 8003150:	4659      	mov	r1, fp
 8003152:	4628      	mov	r0, r5
 8003154:	47b0      	blx	r6
 8003156:	3001      	adds	r0, #1
 8003158:	d10d      	bne.n	8003176 <_printf_float+0x406>
 800315a:	e660      	b.n	8002e1e <_printf_float+0xae>
 800315c:	2301      	movs	r3, #1
 800315e:	4642      	mov	r2, r8
 8003160:	4659      	mov	r1, fp
 8003162:	4628      	mov	r0, r5
 8003164:	47b0      	blx	r6
 8003166:	3001      	adds	r0, #1
 8003168:	f43f ae59 	beq.w	8002e1e <_printf_float+0xae>
 800316c:	3701      	adds	r7, #1
 800316e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003170:	3b01      	subs	r3, #1
 8003172:	42bb      	cmp	r3, r7
 8003174:	dcf2      	bgt.n	800315c <_printf_float+0x3ec>
 8003176:	464b      	mov	r3, r9
 8003178:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800317c:	e6e4      	b.n	8002f48 <_printf_float+0x1d8>
 800317e:	2700      	movs	r7, #0
 8003180:	f104 081a 	add.w	r8, r4, #26
 8003184:	e7f3      	b.n	800316e <_printf_float+0x3fe>
 8003186:	2301      	movs	r3, #1
 8003188:	e7e1      	b.n	800314e <_printf_float+0x3de>
 800318a:	2301      	movs	r3, #1
 800318c:	4642      	mov	r2, r8
 800318e:	4659      	mov	r1, fp
 8003190:	4628      	mov	r0, r5
 8003192:	47b0      	blx	r6
 8003194:	3001      	adds	r0, #1
 8003196:	f43f ae42 	beq.w	8002e1e <_printf_float+0xae>
 800319a:	3701      	adds	r7, #1
 800319c:	68e3      	ldr	r3, [r4, #12]
 800319e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	42bb      	cmp	r3, r7
 80031a4:	dcf1      	bgt.n	800318a <_printf_float+0x41a>
 80031a6:	e702      	b.n	8002fae <_printf_float+0x23e>
 80031a8:	2700      	movs	r7, #0
 80031aa:	f104 0819 	add.w	r8, r4, #25
 80031ae:	e7f5      	b.n	800319c <_printf_float+0x42c>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f43f ae94 	beq.w	8002ede <_printf_float+0x16e>
 80031b6:	f04f 0c00 	mov.w	ip, #0
 80031ba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80031be:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80031c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	463a      	mov	r2, r7
 80031d0:	464b      	mov	r3, r9
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff fd3a 	bl	8002c4c <__cvt>
 80031d8:	4607      	mov	r7, r0
 80031da:	e64f      	b.n	8002e7c <_printf_float+0x10c>

080031dc <_printf_common>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	4691      	mov	r9, r2
 80031e2:	461f      	mov	r7, r3
 80031e4:	688a      	ldr	r2, [r1, #8]
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	4606      	mov	r6, r0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	bfb8      	it	lt
 80031ee:	4613      	movlt	r3, r2
 80031f0:	f8c9 3000 	str.w	r3, [r9]
 80031f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031f8:	460c      	mov	r4, r1
 80031fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031fe:	b112      	cbz	r2, 8003206 <_printf_common+0x2a>
 8003200:	3301      	adds	r3, #1
 8003202:	f8c9 3000 	str.w	r3, [r9]
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	0699      	lsls	r1, r3, #26
 800320a:	bf42      	ittt	mi
 800320c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003210:	3302      	addmi	r3, #2
 8003212:	f8c9 3000 	strmi.w	r3, [r9]
 8003216:	6825      	ldr	r5, [r4, #0]
 8003218:	f015 0506 	ands.w	r5, r5, #6
 800321c:	d107      	bne.n	800322e <_printf_common+0x52>
 800321e:	f104 0a19 	add.w	sl, r4, #25
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	f8d9 2000 	ldr.w	r2, [r9]
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	42ab      	cmp	r3, r5
 800322c:	dc29      	bgt.n	8003282 <_printf_common+0xa6>
 800322e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	3300      	adds	r3, #0
 8003236:	bf18      	it	ne
 8003238:	2301      	movne	r3, #1
 800323a:	0692      	lsls	r2, r2, #26
 800323c:	d42e      	bmi.n	800329c <_printf_common+0xc0>
 800323e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003242:	4639      	mov	r1, r7
 8003244:	4630      	mov	r0, r6
 8003246:	47c0      	blx	r8
 8003248:	3001      	adds	r0, #1
 800324a:	d021      	beq.n	8003290 <_printf_common+0xb4>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	68e5      	ldr	r5, [r4, #12]
 8003250:	f003 0306 	and.w	r3, r3, #6
 8003254:	2b04      	cmp	r3, #4
 8003256:	bf18      	it	ne
 8003258:	2500      	movne	r5, #0
 800325a:	f8d9 2000 	ldr.w	r2, [r9]
 800325e:	f04f 0900 	mov.w	r9, #0
 8003262:	bf08      	it	eq
 8003264:	1aad      	subeq	r5, r5, r2
 8003266:	68a3      	ldr	r3, [r4, #8]
 8003268:	6922      	ldr	r2, [r4, #16]
 800326a:	bf08      	it	eq
 800326c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003270:	4293      	cmp	r3, r2
 8003272:	bfc4      	itt	gt
 8003274:	1a9b      	subgt	r3, r3, r2
 8003276:	18ed      	addgt	r5, r5, r3
 8003278:	341a      	adds	r4, #26
 800327a:	454d      	cmp	r5, r9
 800327c:	d11a      	bne.n	80032b4 <_printf_common+0xd8>
 800327e:	2000      	movs	r0, #0
 8003280:	e008      	b.n	8003294 <_printf_common+0xb8>
 8003282:	2301      	movs	r3, #1
 8003284:	4652      	mov	r2, sl
 8003286:	4639      	mov	r1, r7
 8003288:	4630      	mov	r0, r6
 800328a:	47c0      	blx	r8
 800328c:	3001      	adds	r0, #1
 800328e:	d103      	bne.n	8003298 <_printf_common+0xbc>
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003298:	3501      	adds	r5, #1
 800329a:	e7c2      	b.n	8003222 <_printf_common+0x46>
 800329c:	2030      	movs	r0, #48	; 0x30
 800329e:	18e1      	adds	r1, r4, r3
 80032a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032aa:	4422      	add	r2, r4
 80032ac:	3302      	adds	r3, #2
 80032ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032b2:	e7c4      	b.n	800323e <_printf_common+0x62>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4622      	mov	r2, r4
 80032b8:	4639      	mov	r1, r7
 80032ba:	4630      	mov	r0, r6
 80032bc:	47c0      	blx	r8
 80032be:	3001      	adds	r0, #1
 80032c0:	d0e6      	beq.n	8003290 <_printf_common+0xb4>
 80032c2:	f109 0901 	add.w	r9, r9, #1
 80032c6:	e7d8      	b.n	800327a <_printf_common+0x9e>

080032c8 <_printf_i>:
 80032c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032d0:	460c      	mov	r4, r1
 80032d2:	7e09      	ldrb	r1, [r1, #24]
 80032d4:	b085      	sub	sp, #20
 80032d6:	296e      	cmp	r1, #110	; 0x6e
 80032d8:	4617      	mov	r7, r2
 80032da:	4606      	mov	r6, r0
 80032dc:	4698      	mov	r8, r3
 80032de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032e0:	f000 80b3 	beq.w	800344a <_printf_i+0x182>
 80032e4:	d822      	bhi.n	800332c <_printf_i+0x64>
 80032e6:	2963      	cmp	r1, #99	; 0x63
 80032e8:	d036      	beq.n	8003358 <_printf_i+0x90>
 80032ea:	d80a      	bhi.n	8003302 <_printf_i+0x3a>
 80032ec:	2900      	cmp	r1, #0
 80032ee:	f000 80b9 	beq.w	8003464 <_printf_i+0x19c>
 80032f2:	2958      	cmp	r1, #88	; 0x58
 80032f4:	f000 8083 	beq.w	80033fe <_printf_i+0x136>
 80032f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003300:	e032      	b.n	8003368 <_printf_i+0xa0>
 8003302:	2964      	cmp	r1, #100	; 0x64
 8003304:	d001      	beq.n	800330a <_printf_i+0x42>
 8003306:	2969      	cmp	r1, #105	; 0x69
 8003308:	d1f6      	bne.n	80032f8 <_printf_i+0x30>
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	0605      	lsls	r5, r0, #24
 8003310:	f103 0104 	add.w	r1, r3, #4
 8003314:	d52a      	bpl.n	800336c <_printf_i+0xa4>
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da03      	bge.n	8003326 <_printf_i+0x5e>
 800331e:	222d      	movs	r2, #45	; 0x2d
 8003320:	425b      	negs	r3, r3
 8003322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003326:	486f      	ldr	r0, [pc, #444]	; (80034e4 <_printf_i+0x21c>)
 8003328:	220a      	movs	r2, #10
 800332a:	e039      	b.n	80033a0 <_printf_i+0xd8>
 800332c:	2973      	cmp	r1, #115	; 0x73
 800332e:	f000 809d 	beq.w	800346c <_printf_i+0x1a4>
 8003332:	d808      	bhi.n	8003346 <_printf_i+0x7e>
 8003334:	296f      	cmp	r1, #111	; 0x6f
 8003336:	d020      	beq.n	800337a <_printf_i+0xb2>
 8003338:	2970      	cmp	r1, #112	; 0x70
 800333a:	d1dd      	bne.n	80032f8 <_printf_i+0x30>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	e003      	b.n	800334e <_printf_i+0x86>
 8003346:	2975      	cmp	r1, #117	; 0x75
 8003348:	d017      	beq.n	800337a <_printf_i+0xb2>
 800334a:	2978      	cmp	r1, #120	; 0x78
 800334c:	d1d4      	bne.n	80032f8 <_printf_i+0x30>
 800334e:	2378      	movs	r3, #120	; 0x78
 8003350:	4865      	ldr	r0, [pc, #404]	; (80034e8 <_printf_i+0x220>)
 8003352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003356:	e055      	b.n	8003404 <_printf_i+0x13c>
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800335e:	1d19      	adds	r1, r3, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6011      	str	r1, [r2, #0]
 8003364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003368:	2301      	movs	r3, #1
 800336a:	e08c      	b.n	8003486 <_printf_i+0x1be>
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003372:	6011      	str	r1, [r2, #0]
 8003374:	bf18      	it	ne
 8003376:	b21b      	sxthne	r3, r3
 8003378:	e7cf      	b.n	800331a <_printf_i+0x52>
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	1d18      	adds	r0, r3, #4
 8003380:	6010      	str	r0, [r2, #0]
 8003382:	0628      	lsls	r0, r5, #24
 8003384:	d501      	bpl.n	800338a <_printf_i+0xc2>
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0xc8>
 800338a:	0668      	lsls	r0, r5, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0xbe>
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	296f      	cmp	r1, #111	; 0x6f
 8003392:	bf14      	ite	ne
 8003394:	220a      	movne	r2, #10
 8003396:	2208      	moveq	r2, #8
 8003398:	4852      	ldr	r0, [pc, #328]	; (80034e4 <_printf_i+0x21c>)
 800339a:	2100      	movs	r1, #0
 800339c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033a0:	6865      	ldr	r5, [r4, #4]
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	60a5      	str	r5, [r4, #8]
 80033a6:	f2c0 8095 	blt.w	80034d4 <_printf_i+0x20c>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	f021 0104 	bic.w	r1, r1, #4
 80033b0:	6021      	str	r1, [r4, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d13d      	bne.n	8003432 <_printf_i+0x16a>
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	f040 808e 	bne.w	80034d8 <_printf_i+0x210>
 80033bc:	4665      	mov	r5, ip
 80033be:	2a08      	cmp	r2, #8
 80033c0:	d10b      	bne.n	80033da <_printf_i+0x112>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	07db      	lsls	r3, r3, #31
 80033c6:	d508      	bpl.n	80033da <_printf_i+0x112>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	bfde      	ittt	le
 80033d0:	2330      	movle	r3, #48	; 0x30
 80033d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033da:	ebac 0305 	sub.w	r3, ip, r5
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	f8cd 8000 	str.w	r8, [sp]
 80033e4:	463b      	mov	r3, r7
 80033e6:	aa03      	add	r2, sp, #12
 80033e8:	4621      	mov	r1, r4
 80033ea:	4630      	mov	r0, r6
 80033ec:	f7ff fef6 	bl	80031dc <_printf_common>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d14d      	bne.n	8003490 <_printf_i+0x1c8>
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	b005      	add	sp, #20
 80033fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033fe:	4839      	ldr	r0, [pc, #228]	; (80034e4 <_printf_i+0x21c>)
 8003400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	6821      	ldr	r1, [r4, #0]
 8003408:	1d1d      	adds	r5, r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6015      	str	r5, [r2, #0]
 800340e:	060a      	lsls	r2, r1, #24
 8003410:	d50b      	bpl.n	800342a <_printf_i+0x162>
 8003412:	07ca      	lsls	r2, r1, #31
 8003414:	bf44      	itt	mi
 8003416:	f041 0120 	orrmi.w	r1, r1, #32
 800341a:	6021      	strmi	r1, [r4, #0]
 800341c:	b91b      	cbnz	r3, 8003426 <_printf_i+0x15e>
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	f022 0220 	bic.w	r2, r2, #32
 8003424:	6022      	str	r2, [r4, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	e7b7      	b.n	800339a <_printf_i+0xd2>
 800342a:	064d      	lsls	r5, r1, #25
 800342c:	bf48      	it	mi
 800342e:	b29b      	uxthmi	r3, r3
 8003430:	e7ef      	b.n	8003412 <_printf_i+0x14a>
 8003432:	4665      	mov	r5, ip
 8003434:	fbb3 f1f2 	udiv	r1, r3, r2
 8003438:	fb02 3311 	mls	r3, r2, r1, r3
 800343c:	5cc3      	ldrb	r3, [r0, r3]
 800343e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003442:	460b      	mov	r3, r1
 8003444:	2900      	cmp	r1, #0
 8003446:	d1f5      	bne.n	8003434 <_printf_i+0x16c>
 8003448:	e7b9      	b.n	80033be <_printf_i+0xf6>
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	6825      	ldr	r5, [r4, #0]
 800344e:	1d18      	adds	r0, r3, #4
 8003450:	6961      	ldr	r1, [r4, #20]
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	0628      	lsls	r0, r5, #24
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0x196>
 800345a:	6019      	str	r1, [r3, #0]
 800345c:	e002      	b.n	8003464 <_printf_i+0x19c>
 800345e:	066a      	lsls	r2, r5, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0x192>
 8003462:	8019      	strh	r1, [r3, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	4665      	mov	r5, ip
 8003468:	6123      	str	r3, [r4, #16]
 800346a:	e7b9      	b.n	80033e0 <_printf_i+0x118>
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	1d19      	adds	r1, r3, #4
 8003470:	6011      	str	r1, [r2, #0]
 8003472:	681d      	ldr	r5, [r3, #0]
 8003474:	6862      	ldr	r2, [r4, #4]
 8003476:	2100      	movs	r1, #0
 8003478:	4628      	mov	r0, r5
 800347a:	f002 fa93 	bl	80059a4 <memchr>
 800347e:	b108      	cbz	r0, 8003484 <_printf_i+0x1bc>
 8003480:	1b40      	subs	r0, r0, r5
 8003482:	6060      	str	r0, [r4, #4]
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	6123      	str	r3, [r4, #16]
 8003488:	2300      	movs	r3, #0
 800348a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348e:	e7a7      	b.n	80033e0 <_printf_i+0x118>
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	462a      	mov	r2, r5
 8003494:	4639      	mov	r1, r7
 8003496:	4630      	mov	r0, r6
 8003498:	47c0      	blx	r8
 800349a:	3001      	adds	r0, #1
 800349c:	d0aa      	beq.n	80033f4 <_printf_i+0x12c>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	079b      	lsls	r3, r3, #30
 80034a2:	d413      	bmi.n	80034cc <_printf_i+0x204>
 80034a4:	68e0      	ldr	r0, [r4, #12]
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	4298      	cmp	r0, r3
 80034aa:	bfb8      	it	lt
 80034ac:	4618      	movlt	r0, r3
 80034ae:	e7a3      	b.n	80033f8 <_printf_i+0x130>
 80034b0:	2301      	movs	r3, #1
 80034b2:	464a      	mov	r2, r9
 80034b4:	4639      	mov	r1, r7
 80034b6:	4630      	mov	r0, r6
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d09a      	beq.n	80033f4 <_printf_i+0x12c>
 80034be:	3501      	adds	r5, #1
 80034c0:	68e3      	ldr	r3, [r4, #12]
 80034c2:	9a03      	ldr	r2, [sp, #12]
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	42ab      	cmp	r3, r5
 80034c8:	dcf2      	bgt.n	80034b0 <_printf_i+0x1e8>
 80034ca:	e7eb      	b.n	80034a4 <_printf_i+0x1dc>
 80034cc:	2500      	movs	r5, #0
 80034ce:	f104 0919 	add.w	r9, r4, #25
 80034d2:	e7f5      	b.n	80034c0 <_printf_i+0x1f8>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ac      	bne.n	8003432 <_printf_i+0x16a>
 80034d8:	7803      	ldrb	r3, [r0, #0]
 80034da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e2:	e76c      	b.n	80033be <_printf_i+0xf6>
 80034e4:	08006716 	.word	0x08006716
 80034e8:	08006727 	.word	0x08006727

080034ec <_scanf_float>:
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	469a      	mov	sl, r3
 80034f2:	688b      	ldr	r3, [r1, #8]
 80034f4:	4616      	mov	r6, r2
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80034fc:	bf88      	it	hi
 80034fe:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003502:	b087      	sub	sp, #28
 8003504:	bf85      	ittet	hi
 8003506:	189b      	addhi	r3, r3, r2
 8003508:	9301      	strhi	r3, [sp, #4]
 800350a:	2300      	movls	r3, #0
 800350c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003510:	4688      	mov	r8, r1
 8003512:	f04f 0b00 	mov.w	fp, #0
 8003516:	bf8c      	ite	hi
 8003518:	608b      	strhi	r3, [r1, #8]
 800351a:	9301      	strls	r3, [sp, #4]
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	4607      	mov	r7, r0
 8003520:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003524:	f848 3b1c 	str.w	r3, [r8], #28
 8003528:	460c      	mov	r4, r1
 800352a:	4645      	mov	r5, r8
 800352c:	465a      	mov	r2, fp
 800352e:	46d9      	mov	r9, fp
 8003530:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003534:	f8cd b008 	str.w	fp, [sp, #8]
 8003538:	68a1      	ldr	r1, [r4, #8]
 800353a:	b181      	cbz	r1, 800355e <_scanf_float+0x72>
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b49      	cmp	r3, #73	; 0x49
 8003542:	d071      	beq.n	8003628 <_scanf_float+0x13c>
 8003544:	d84d      	bhi.n	80035e2 <_scanf_float+0xf6>
 8003546:	2b39      	cmp	r3, #57	; 0x39
 8003548:	d840      	bhi.n	80035cc <_scanf_float+0xe0>
 800354a:	2b31      	cmp	r3, #49	; 0x31
 800354c:	f080 8088 	bcs.w	8003660 <_scanf_float+0x174>
 8003550:	2b2d      	cmp	r3, #45	; 0x2d
 8003552:	f000 8090 	beq.w	8003676 <_scanf_float+0x18a>
 8003556:	d815      	bhi.n	8003584 <_scanf_float+0x98>
 8003558:	2b2b      	cmp	r3, #43	; 0x2b
 800355a:	f000 808c 	beq.w	8003676 <_scanf_float+0x18a>
 800355e:	f1b9 0f00 	cmp.w	r9, #0
 8003562:	d003      	beq.n	800356c <_scanf_float+0x80>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800356a:	6023      	str	r3, [r4, #0]
 800356c:	3a01      	subs	r2, #1
 800356e:	2a01      	cmp	r2, #1
 8003570:	f200 80ea 	bhi.w	8003748 <_scanf_float+0x25c>
 8003574:	4545      	cmp	r5, r8
 8003576:	f200 80dc 	bhi.w	8003732 <_scanf_float+0x246>
 800357a:	2601      	movs	r6, #1
 800357c:	4630      	mov	r0, r6
 800357e:	b007      	add	sp, #28
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	2b2e      	cmp	r3, #46	; 0x2e
 8003586:	f000 809f 	beq.w	80036c8 <_scanf_float+0x1dc>
 800358a:	2b30      	cmp	r3, #48	; 0x30
 800358c:	d1e7      	bne.n	800355e <_scanf_float+0x72>
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003594:	d064      	beq.n	8003660 <_scanf_float+0x174>
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800359c:	6020      	str	r0, [r4, #0]
 800359e:	f109 0901 	add.w	r9, r9, #1
 80035a2:	b11b      	cbz	r3, 80035ac <_scanf_float+0xc0>
 80035a4:	3b01      	subs	r3, #1
 80035a6:	3101      	adds	r1, #1
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	60a1      	str	r1, [r4, #8]
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	3301      	adds	r3, #1
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	6873      	ldr	r3, [r6, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	6073      	str	r3, [r6, #4]
 80035c0:	f340 80ac 	ble.w	800371c <_scanf_float+0x230>
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	e7b5      	b.n	8003538 <_scanf_float+0x4c>
 80035cc:	2b45      	cmp	r3, #69	; 0x45
 80035ce:	f000 8085 	beq.w	80036dc <_scanf_float+0x1f0>
 80035d2:	2b46      	cmp	r3, #70	; 0x46
 80035d4:	d06a      	beq.n	80036ac <_scanf_float+0x1c0>
 80035d6:	2b41      	cmp	r3, #65	; 0x41
 80035d8:	d1c1      	bne.n	800355e <_scanf_float+0x72>
 80035da:	2a01      	cmp	r2, #1
 80035dc:	d1bf      	bne.n	800355e <_scanf_float+0x72>
 80035de:	2202      	movs	r2, #2
 80035e0:	e046      	b.n	8003670 <_scanf_float+0x184>
 80035e2:	2b65      	cmp	r3, #101	; 0x65
 80035e4:	d07a      	beq.n	80036dc <_scanf_float+0x1f0>
 80035e6:	d818      	bhi.n	800361a <_scanf_float+0x12e>
 80035e8:	2b54      	cmp	r3, #84	; 0x54
 80035ea:	d066      	beq.n	80036ba <_scanf_float+0x1ce>
 80035ec:	d811      	bhi.n	8003612 <_scanf_float+0x126>
 80035ee:	2b4e      	cmp	r3, #78	; 0x4e
 80035f0:	d1b5      	bne.n	800355e <_scanf_float+0x72>
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d146      	bne.n	8003684 <_scanf_float+0x198>
 80035f6:	f1b9 0f00 	cmp.w	r9, #0
 80035fa:	d145      	bne.n	8003688 <_scanf_float+0x19c>
 80035fc:	6821      	ldr	r1, [r4, #0]
 80035fe:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003602:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003606:	d13f      	bne.n	8003688 <_scanf_float+0x19c>
 8003608:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800360c:	6021      	str	r1, [r4, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	e02e      	b.n	8003670 <_scanf_float+0x184>
 8003612:	2b59      	cmp	r3, #89	; 0x59
 8003614:	d01e      	beq.n	8003654 <_scanf_float+0x168>
 8003616:	2b61      	cmp	r3, #97	; 0x61
 8003618:	e7de      	b.n	80035d8 <_scanf_float+0xec>
 800361a:	2b6e      	cmp	r3, #110	; 0x6e
 800361c:	d0e9      	beq.n	80035f2 <_scanf_float+0x106>
 800361e:	d815      	bhi.n	800364c <_scanf_float+0x160>
 8003620:	2b66      	cmp	r3, #102	; 0x66
 8003622:	d043      	beq.n	80036ac <_scanf_float+0x1c0>
 8003624:	2b69      	cmp	r3, #105	; 0x69
 8003626:	d19a      	bne.n	800355e <_scanf_float+0x72>
 8003628:	f1bb 0f00 	cmp.w	fp, #0
 800362c:	d138      	bne.n	80036a0 <_scanf_float+0x1b4>
 800362e:	f1b9 0f00 	cmp.w	r9, #0
 8003632:	d197      	bne.n	8003564 <_scanf_float+0x78>
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800363a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800363e:	d195      	bne.n	800356c <_scanf_float+0x80>
 8003640:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003644:	6021      	str	r1, [r4, #0]
 8003646:	f04f 0b01 	mov.w	fp, #1
 800364a:	e011      	b.n	8003670 <_scanf_float+0x184>
 800364c:	2b74      	cmp	r3, #116	; 0x74
 800364e:	d034      	beq.n	80036ba <_scanf_float+0x1ce>
 8003650:	2b79      	cmp	r3, #121	; 0x79
 8003652:	d184      	bne.n	800355e <_scanf_float+0x72>
 8003654:	f1bb 0f07 	cmp.w	fp, #7
 8003658:	d181      	bne.n	800355e <_scanf_float+0x72>
 800365a:	f04f 0b08 	mov.w	fp, #8
 800365e:	e007      	b.n	8003670 <_scanf_float+0x184>
 8003660:	eb12 0f0b 	cmn.w	r2, fp
 8003664:	f47f af7b 	bne.w	800355e <_scanf_float+0x72>
 8003668:	6821      	ldr	r1, [r4, #0]
 800366a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800366e:	6021      	str	r1, [r4, #0]
 8003670:	702b      	strb	r3, [r5, #0]
 8003672:	3501      	adds	r5, #1
 8003674:	e79a      	b.n	80035ac <_scanf_float+0xc0>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	0608      	lsls	r0, r1, #24
 800367a:	f57f af70 	bpl.w	800355e <_scanf_float+0x72>
 800367e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003682:	e7f4      	b.n	800366e <_scanf_float+0x182>
 8003684:	2a02      	cmp	r2, #2
 8003686:	d047      	beq.n	8003718 <_scanf_float+0x22c>
 8003688:	f1bb 0f01 	cmp.w	fp, #1
 800368c:	d003      	beq.n	8003696 <_scanf_float+0x1aa>
 800368e:	f1bb 0f04 	cmp.w	fp, #4
 8003692:	f47f af64 	bne.w	800355e <_scanf_float+0x72>
 8003696:	f10b 0b01 	add.w	fp, fp, #1
 800369a:	fa5f fb8b 	uxtb.w	fp, fp
 800369e:	e7e7      	b.n	8003670 <_scanf_float+0x184>
 80036a0:	f1bb 0f03 	cmp.w	fp, #3
 80036a4:	d0f7      	beq.n	8003696 <_scanf_float+0x1aa>
 80036a6:	f1bb 0f05 	cmp.w	fp, #5
 80036aa:	e7f2      	b.n	8003692 <_scanf_float+0x1a6>
 80036ac:	f1bb 0f02 	cmp.w	fp, #2
 80036b0:	f47f af55 	bne.w	800355e <_scanf_float+0x72>
 80036b4:	f04f 0b03 	mov.w	fp, #3
 80036b8:	e7da      	b.n	8003670 <_scanf_float+0x184>
 80036ba:	f1bb 0f06 	cmp.w	fp, #6
 80036be:	f47f af4e 	bne.w	800355e <_scanf_float+0x72>
 80036c2:	f04f 0b07 	mov.w	fp, #7
 80036c6:	e7d3      	b.n	8003670 <_scanf_float+0x184>
 80036c8:	6821      	ldr	r1, [r4, #0]
 80036ca:	0588      	lsls	r0, r1, #22
 80036cc:	f57f af47 	bpl.w	800355e <_scanf_float+0x72>
 80036d0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80036d4:	6021      	str	r1, [r4, #0]
 80036d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80036da:	e7c9      	b.n	8003670 <_scanf_float+0x184>
 80036dc:	6821      	ldr	r1, [r4, #0]
 80036de:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80036e2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80036e6:	d006      	beq.n	80036f6 <_scanf_float+0x20a>
 80036e8:	0548      	lsls	r0, r1, #21
 80036ea:	f57f af38 	bpl.w	800355e <_scanf_float+0x72>
 80036ee:	f1b9 0f00 	cmp.w	r9, #0
 80036f2:	f43f af3b 	beq.w	800356c <_scanf_float+0x80>
 80036f6:	0588      	lsls	r0, r1, #22
 80036f8:	bf58      	it	pl
 80036fa:	9802      	ldrpl	r0, [sp, #8]
 80036fc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003700:	bf58      	it	pl
 8003702:	eba9 0000 	subpl.w	r0, r9, r0
 8003706:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800370a:	bf58      	it	pl
 800370c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003710:	6021      	str	r1, [r4, #0]
 8003712:	f04f 0900 	mov.w	r9, #0
 8003716:	e7ab      	b.n	8003670 <_scanf_float+0x184>
 8003718:	2203      	movs	r2, #3
 800371a:	e7a9      	b.n	8003670 <_scanf_float+0x184>
 800371c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003720:	4631      	mov	r1, r6
 8003722:	4638      	mov	r0, r7
 8003724:	9205      	str	r2, [sp, #20]
 8003726:	4798      	blx	r3
 8003728:	9a05      	ldr	r2, [sp, #20]
 800372a:	2800      	cmp	r0, #0
 800372c:	f43f af04 	beq.w	8003538 <_scanf_float+0x4c>
 8003730:	e715      	b.n	800355e <_scanf_float+0x72>
 8003732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003736:	4632      	mov	r2, r6
 8003738:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800373c:	4638      	mov	r0, r7
 800373e:	4798      	blx	r3
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	3b01      	subs	r3, #1
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	e715      	b.n	8003574 <_scanf_float+0x88>
 8003748:	f10b 33ff 	add.w	r3, fp, #4294967295
 800374c:	2b06      	cmp	r3, #6
 800374e:	d80a      	bhi.n	8003766 <_scanf_float+0x27a>
 8003750:	f1bb 0f02 	cmp.w	fp, #2
 8003754:	d967      	bls.n	8003826 <_scanf_float+0x33a>
 8003756:	f1ab 0b03 	sub.w	fp, fp, #3
 800375a:	fa5f fb8b 	uxtb.w	fp, fp
 800375e:	eba5 0b0b 	sub.w	fp, r5, fp
 8003762:	455d      	cmp	r5, fp
 8003764:	d14a      	bne.n	80037fc <_scanf_float+0x310>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	05da      	lsls	r2, r3, #23
 800376a:	d51f      	bpl.n	80037ac <_scanf_float+0x2c0>
 800376c:	055b      	lsls	r3, r3, #21
 800376e:	d467      	bmi.n	8003840 <_scanf_float+0x354>
 8003770:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	2965      	cmp	r1, #101	; 0x65
 8003778:	f103 33ff 	add.w	r3, r3, #4294967295
 800377c:	f105 3bff 	add.w	fp, r5, #4294967295
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	d00d      	beq.n	80037a0 <_scanf_float+0x2b4>
 8003784:	2945      	cmp	r1, #69	; 0x45
 8003786:	d00b      	beq.n	80037a0 <_scanf_float+0x2b4>
 8003788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800378c:	4632      	mov	r2, r6
 800378e:	4638      	mov	r0, r7
 8003790:	4798      	blx	r3
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003798:	3b01      	subs	r3, #1
 800379a:	f1a5 0b02 	sub.w	fp, r5, #2
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037a4:	4632      	mov	r2, r6
 80037a6:	4638      	mov	r0, r7
 80037a8:	4798      	blx	r3
 80037aa:	465d      	mov	r5, fp
 80037ac:	6826      	ldr	r6, [r4, #0]
 80037ae:	f016 0610 	ands.w	r6, r6, #16
 80037b2:	d176      	bne.n	80038a2 <_scanf_float+0x3b6>
 80037b4:	702e      	strb	r6, [r5, #0]
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d141      	bne.n	8003846 <_scanf_float+0x35a>
 80037c2:	9b02      	ldr	r3, [sp, #8]
 80037c4:	eba9 0303 	sub.w	r3, r9, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d148      	bne.n	8003860 <_scanf_float+0x374>
 80037ce:	4641      	mov	r1, r8
 80037d0:	2200      	movs	r2, #0
 80037d2:	4638      	mov	r0, r7
 80037d4:	f000 feb0 	bl	8004538 <_strtod_r>
 80037d8:	6825      	ldr	r5, [r4, #0]
 80037da:	4680      	mov	r8, r0
 80037dc:	f015 0f02 	tst.w	r5, #2
 80037e0:	4689      	mov	r9, r1
 80037e2:	f8da 3000 	ldr.w	r3, [sl]
 80037e6:	d046      	beq.n	8003876 <_scanf_float+0x38a>
 80037e8:	1d1a      	adds	r2, r3, #4
 80037ea:	f8ca 2000 	str.w	r2, [sl]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e9c3 8900 	strd	r8, r9, [r3]
 80037f4:	68e3      	ldr	r3, [r4, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60e3      	str	r3, [r4, #12]
 80037fa:	e6bf      	b.n	800357c <_scanf_float+0x90>
 80037fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003800:	4632      	mov	r2, r6
 8003802:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003806:	4638      	mov	r0, r7
 8003808:	4798      	blx	r3
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	3b01      	subs	r3, #1
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	e7a7      	b.n	8003762 <_scanf_float+0x276>
 8003812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003816:	4632      	mov	r2, r6
 8003818:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800381c:	4638      	mov	r0, r7
 800381e:	4798      	blx	r3
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	3b01      	subs	r3, #1
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	4545      	cmp	r5, r8
 8003828:	d8f3      	bhi.n	8003812 <_scanf_float+0x326>
 800382a:	e6a6      	b.n	800357a <_scanf_float+0x8e>
 800382c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003830:	4632      	mov	r2, r6
 8003832:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003836:	4638      	mov	r0, r7
 8003838:	4798      	blx	r3
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	3b01      	subs	r3, #1
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	4545      	cmp	r5, r8
 8003842:	d8f3      	bhi.n	800382c <_scanf_float+0x340>
 8003844:	e699      	b.n	800357a <_scanf_float+0x8e>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0c0      	beq.n	80037ce <_scanf_float+0x2e2>
 800384c:	9904      	ldr	r1, [sp, #16]
 800384e:	230a      	movs	r3, #10
 8003850:	4632      	mov	r2, r6
 8003852:	3101      	adds	r1, #1
 8003854:	4638      	mov	r0, r7
 8003856:	f000 fefb 	bl	8004650 <_strtol_r>
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	9d04      	ldr	r5, [sp, #16]
 800385e:	1ac2      	subs	r2, r0, r3
 8003860:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003864:	429d      	cmp	r5, r3
 8003866:	bf28      	it	cs
 8003868:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <_scanf_float+0x3bc>)
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f820 	bl	80038b4 <siprintf>
 8003874:	e7ab      	b.n	80037ce <_scanf_float+0x2e2>
 8003876:	1d1f      	adds	r7, r3, #4
 8003878:	f015 0504 	ands.w	r5, r5, #4
 800387c:	f8ca 7000 	str.w	r7, [sl]
 8003880:	d1b5      	bne.n	80037ee <_scanf_float+0x302>
 8003882:	681f      	ldr	r7, [r3, #0]
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	f7fd f92c 	bl	8000ae4 <__aeabi_dcmpun>
 800388c:	b120      	cbz	r0, 8003898 <_scanf_float+0x3ac>
 800388e:	4628      	mov	r0, r5
 8003890:	f000 f80c 	bl	80038ac <nanf>
 8003894:	6038      	str	r0, [r7, #0]
 8003896:	e7ad      	b.n	80037f4 <_scanf_float+0x308>
 8003898:	4640      	mov	r0, r8
 800389a:	4649      	mov	r1, r9
 800389c:	f7fd f980 	bl	8000ba0 <__aeabi_d2f>
 80038a0:	e7f8      	b.n	8003894 <_scanf_float+0x3a8>
 80038a2:	2600      	movs	r6, #0
 80038a4:	e66a      	b.n	800357c <_scanf_float+0x90>
 80038a6:	bf00      	nop
 80038a8:	08006738 	.word	0x08006738

080038ac <nanf>:
 80038ac:	4800      	ldr	r0, [pc, #0]	; (80038b0 <nanf+0x4>)
 80038ae:	4770      	bx	lr
 80038b0:	7fc00000 	.word	0x7fc00000

080038b4 <siprintf>:
 80038b4:	b40e      	push	{r1, r2, r3}
 80038b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ba:	b500      	push	{lr}
 80038bc:	b09c      	sub	sp, #112	; 0x70
 80038be:	ab1d      	add	r3, sp, #116	; 0x74
 80038c0:	9002      	str	r0, [sp, #8]
 80038c2:	9006      	str	r0, [sp, #24]
 80038c4:	9107      	str	r1, [sp, #28]
 80038c6:	9104      	str	r1, [sp, #16]
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <siprintf+0x38>)
 80038ca:	4909      	ldr	r1, [pc, #36]	; (80038f0 <siprintf+0x3c>)
 80038cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d0:	9105      	str	r1, [sp, #20]
 80038d2:	6800      	ldr	r0, [r0, #0]
 80038d4:	a902      	add	r1, sp, #8
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	f002 fd84 	bl	80063e4 <_svfiprintf_r>
 80038dc:	2200      	movs	r2, #0
 80038de:	9b02      	ldr	r3, [sp, #8]
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	b01c      	add	sp, #112	; 0x70
 80038e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e8:	b003      	add	sp, #12
 80038ea:	4770      	bx	lr
 80038ec:	20000350 	.word	0x20000350
 80038f0:	ffff0208 	.word	0xffff0208

080038f4 <sulp>:
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	460f      	mov	r7, r1
 80038fa:	4690      	mov	r8, r2
 80038fc:	f002 fb36 	bl	8005f6c <__ulp>
 8003900:	4604      	mov	r4, r0
 8003902:	460d      	mov	r5, r1
 8003904:	f1b8 0f00 	cmp.w	r8, #0
 8003908:	d011      	beq.n	800392e <sulp+0x3a>
 800390a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800390e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003912:	2b00      	cmp	r3, #0
 8003914:	dd0b      	ble.n	800392e <sulp+0x3a>
 8003916:	2400      	movs	r4, #0
 8003918:	051b      	lsls	r3, r3, #20
 800391a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800391e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	f7fc fe43 	bl	80005b0 <__aeabi_dmul>
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003938 <_strtod_l>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	461f      	mov	r7, r3
 800393e:	2300      	movs	r3, #0
 8003940:	b0a1      	sub	sp, #132	; 0x84
 8003942:	4683      	mov	fp, r0
 8003944:	4638      	mov	r0, r7
 8003946:	460e      	mov	r6, r1
 8003948:	9217      	str	r2, [sp, #92]	; 0x5c
 800394a:	931c      	str	r3, [sp, #112]	; 0x70
 800394c:	f001 ffff 	bl	800594e <__localeconv_l>
 8003950:	4680      	mov	r8, r0
 8003952:	6800      	ldr	r0, [r0, #0]
 8003954:	f7fc fc68 	bl	8000228 <strlen>
 8003958:	f04f 0900 	mov.w	r9, #0
 800395c:	4604      	mov	r4, r0
 800395e:	f04f 0a00 	mov.w	sl, #0
 8003962:	961b      	str	r6, [sp, #108]	; 0x6c
 8003964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	2a0d      	cmp	r2, #13
 800396a:	d832      	bhi.n	80039d2 <_strtod_l+0x9a>
 800396c:	2a09      	cmp	r2, #9
 800396e:	d236      	bcs.n	80039de <_strtod_l+0xa6>
 8003970:	2a00      	cmp	r2, #0
 8003972:	d03e      	beq.n	80039f2 <_strtod_l+0xba>
 8003974:	2300      	movs	r3, #0
 8003976:	930d      	str	r3, [sp, #52]	; 0x34
 8003978:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800397a:	782b      	ldrb	r3, [r5, #0]
 800397c:	2b30      	cmp	r3, #48	; 0x30
 800397e:	f040 80ac 	bne.w	8003ada <_strtod_l+0x1a2>
 8003982:	786b      	ldrb	r3, [r5, #1]
 8003984:	2b58      	cmp	r3, #88	; 0x58
 8003986:	d001      	beq.n	800398c <_strtod_l+0x54>
 8003988:	2b78      	cmp	r3, #120	; 0x78
 800398a:	d167      	bne.n	8003a5c <_strtod_l+0x124>
 800398c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800398e:	9702      	str	r7, [sp, #8]
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	ab1c      	add	r3, sp, #112	; 0x70
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4a89      	ldr	r2, [pc, #548]	; (8003bbc <_strtod_l+0x284>)
 8003998:	ab1d      	add	r3, sp, #116	; 0x74
 800399a:	a91b      	add	r1, sp, #108	; 0x6c
 800399c:	4658      	mov	r0, fp
 800399e:	f001 fcfb 	bl	8005398 <__gethex>
 80039a2:	f010 0407 	ands.w	r4, r0, #7
 80039a6:	4606      	mov	r6, r0
 80039a8:	d005      	beq.n	80039b6 <_strtod_l+0x7e>
 80039aa:	2c06      	cmp	r4, #6
 80039ac:	d12b      	bne.n	8003a06 <_strtod_l+0xce>
 80039ae:	2300      	movs	r3, #0
 80039b0:	3501      	adds	r5, #1
 80039b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80039b4:	930d      	str	r3, [sp, #52]	; 0x34
 80039b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 85a6 	bne.w	800450a <_strtod_l+0xbd2>
 80039be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039c0:	b1e3      	cbz	r3, 80039fc <_strtod_l+0xc4>
 80039c2:	464a      	mov	r2, r9
 80039c4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	b021      	add	sp, #132	; 0x84
 80039ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d2:	2a2b      	cmp	r2, #43	; 0x2b
 80039d4:	d015      	beq.n	8003a02 <_strtod_l+0xca>
 80039d6:	2a2d      	cmp	r2, #45	; 0x2d
 80039d8:	d004      	beq.n	80039e4 <_strtod_l+0xac>
 80039da:	2a20      	cmp	r2, #32
 80039dc:	d1ca      	bne.n	8003974 <_strtod_l+0x3c>
 80039de:	3301      	adds	r3, #1
 80039e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80039e2:	e7bf      	b.n	8003964 <_strtod_l+0x2c>
 80039e4:	2201      	movs	r2, #1
 80039e6:	920d      	str	r2, [sp, #52]	; 0x34
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1c2      	bne.n	8003978 <_strtod_l+0x40>
 80039f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 8585 	bne.w	8004506 <_strtod_l+0xbce>
 80039fc:	464a      	mov	r2, r9
 80039fe:	4653      	mov	r3, sl
 8003a00:	e7e2      	b.n	80039c8 <_strtod_l+0x90>
 8003a02:	2200      	movs	r2, #0
 8003a04:	e7ef      	b.n	80039e6 <_strtod_l+0xae>
 8003a06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a08:	b13a      	cbz	r2, 8003a1a <_strtod_l+0xe2>
 8003a0a:	2135      	movs	r1, #53	; 0x35
 8003a0c:	a81e      	add	r0, sp, #120	; 0x78
 8003a0e:	f002 fba0 	bl	8006152 <__copybits>
 8003a12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a14:	4658      	mov	r0, fp
 8003a16:	f002 f812 	bl	8005a3e <_Bfree>
 8003a1a:	3c01      	subs	r4, #1
 8003a1c:	2c04      	cmp	r4, #4
 8003a1e:	d806      	bhi.n	8003a2e <_strtod_l+0xf6>
 8003a20:	e8df f004 	tbb	[pc, r4]
 8003a24:	1714030a 	.word	0x1714030a
 8003a28:	0a          	.byte	0x0a
 8003a29:	00          	.byte	0x00
 8003a2a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003a2e:	0731      	lsls	r1, r6, #28
 8003a30:	d5c1      	bpl.n	80039b6 <_strtod_l+0x7e>
 8003a32:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003a36:	e7be      	b.n	80039b6 <_strtod_l+0x7e>
 8003a38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003a3a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003a3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a46:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003a4a:	e7f0      	b.n	8003a2e <_strtod_l+0xf6>
 8003a4c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003bc0 <_strtod_l+0x288>
 8003a50:	e7ed      	b.n	8003a2e <_strtod_l+0xf6>
 8003a52:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003a56:	f04f 39ff 	mov.w	r9, #4294967295
 8003a5a:	e7e8      	b.n	8003a2e <_strtod_l+0xf6>
 8003a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b30      	cmp	r3, #48	; 0x30
 8003a66:	d0f9      	beq.n	8003a5c <_strtod_l+0x124>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0a4      	beq.n	80039b6 <_strtod_l+0x7e>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	2500      	movs	r5, #0
 8003a70:	220a      	movs	r2, #10
 8003a72:	9307      	str	r3, [sp, #28]
 8003a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a76:	9506      	str	r5, [sp, #24]
 8003a78:	9308      	str	r3, [sp, #32]
 8003a7a:	9504      	str	r5, [sp, #16]
 8003a7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003a7e:	7807      	ldrb	r7, [r0, #0]
 8003a80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003a84:	b2d9      	uxtb	r1, r3
 8003a86:	2909      	cmp	r1, #9
 8003a88:	d929      	bls.n	8003ade <_strtod_l+0x1a6>
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	f8d8 1000 	ldr.w	r1, [r8]
 8003a90:	f002 fdb0 	bl	80065f4 <strncmp>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d031      	beq.n	8003afc <_strtod_l+0x1c4>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	9c04      	ldr	r4, [sp, #16]
 8003aa0:	9005      	str	r0, [sp, #20]
 8003aa2:	2b65      	cmp	r3, #101	; 0x65
 8003aa4:	d001      	beq.n	8003aaa <_strtod_l+0x172>
 8003aa6:	2b45      	cmp	r3, #69	; 0x45
 8003aa8:	d114      	bne.n	8003ad4 <_strtod_l+0x19c>
 8003aaa:	b924      	cbnz	r4, 8003ab6 <_strtod_l+0x17e>
 8003aac:	b910      	cbnz	r0, 8003ab4 <_strtod_l+0x17c>
 8003aae:	9b07      	ldr	r3, [sp, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d09e      	beq.n	80039f2 <_strtod_l+0xba>
 8003ab4:	2400      	movs	r4, #0
 8003ab6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003ab8:	1c73      	adds	r3, r6, #1
 8003aba:	931b      	str	r3, [sp, #108]	; 0x6c
 8003abc:	7873      	ldrb	r3, [r6, #1]
 8003abe:	2b2b      	cmp	r3, #43	; 0x2b
 8003ac0:	d078      	beq.n	8003bb4 <_strtod_l+0x27c>
 8003ac2:	2b2d      	cmp	r3, #45	; 0x2d
 8003ac4:	d070      	beq.n	8003ba8 <_strtod_l+0x270>
 8003ac6:	f04f 0c00 	mov.w	ip, #0
 8003aca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003ace:	2f09      	cmp	r7, #9
 8003ad0:	d97c      	bls.n	8003bcc <_strtod_l+0x294>
 8003ad2:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ad4:	f04f 0e00 	mov.w	lr, #0
 8003ad8:	e09a      	b.n	8003c10 <_strtod_l+0x2d8>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e7c7      	b.n	8003a6e <_strtod_l+0x136>
 8003ade:	9904      	ldr	r1, [sp, #16]
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	2908      	cmp	r1, #8
 8003ae4:	bfd7      	itett	le
 8003ae6:	9906      	ldrle	r1, [sp, #24]
 8003ae8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003aec:	fb02 3301 	mlale	r3, r2, r1, r3
 8003af0:	9306      	strle	r3, [sp, #24]
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	901b      	str	r0, [sp, #108]	; 0x6c
 8003af6:	3301      	adds	r3, #1
 8003af8:	9304      	str	r3, [sp, #16]
 8003afa:	e7bf      	b.n	8003a7c <_strtod_l+0x144>
 8003afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003afe:	191a      	adds	r2, r3, r4
 8003b00:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	5d1b      	ldrb	r3, [r3, r4]
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d037      	beq.n	8003b7a <_strtod_l+0x242>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	9c04      	ldr	r4, [sp, #16]
 8003b0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003b12:	2909      	cmp	r1, #9
 8003b14:	d913      	bls.n	8003b3e <_strtod_l+0x206>
 8003b16:	2101      	movs	r1, #1
 8003b18:	9105      	str	r1, [sp, #20]
 8003b1a:	e7c2      	b.n	8003aa2 <_strtod_l+0x16a>
 8003b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b1e:	3001      	adds	r0, #1
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d0f8      	beq.n	8003b1c <_strtod_l+0x1e4>
 8003b2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003b2e:	2a08      	cmp	r2, #8
 8003b30:	f200 84f0 	bhi.w	8004514 <_strtod_l+0xbdc>
 8003b34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b36:	9208      	str	r2, [sp, #32]
 8003b38:	4602      	mov	r2, r0
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003b42:	f100 0101 	add.w	r1, r0, #1
 8003b46:	d012      	beq.n	8003b6e <_strtod_l+0x236>
 8003b48:	440a      	add	r2, r1
 8003b4a:	270a      	movs	r7, #10
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	eb00 0c04 	add.w	ip, r0, r4
 8003b52:	458c      	cmp	ip, r1
 8003b54:	d113      	bne.n	8003b7e <_strtod_l+0x246>
 8003b56:	1821      	adds	r1, r4, r0
 8003b58:	2908      	cmp	r1, #8
 8003b5a:	f104 0401 	add.w	r4, r4, #1
 8003b5e:	4404      	add	r4, r0
 8003b60:	dc19      	bgt.n	8003b96 <_strtod_l+0x25e>
 8003b62:	210a      	movs	r1, #10
 8003b64:	9b06      	ldr	r3, [sp, #24]
 8003b66:	fb01 e303 	mla	r3, r1, r3, lr
 8003b6a:	9306      	str	r3, [sp, #24]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b70:	1c58      	adds	r0, r3, #1
 8003b72:	901b      	str	r0, [sp, #108]	; 0x6c
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	4608      	mov	r0, r1
 8003b78:	e7c9      	b.n	8003b0e <_strtod_l+0x1d6>
 8003b7a:	9804      	ldr	r0, [sp, #16]
 8003b7c:	e7d3      	b.n	8003b26 <_strtod_l+0x1ee>
 8003b7e:	2908      	cmp	r1, #8
 8003b80:	f101 0101 	add.w	r1, r1, #1
 8003b84:	dc03      	bgt.n	8003b8e <_strtod_l+0x256>
 8003b86:	9b06      	ldr	r3, [sp, #24]
 8003b88:	437b      	muls	r3, r7
 8003b8a:	9306      	str	r3, [sp, #24]
 8003b8c:	e7e1      	b.n	8003b52 <_strtod_l+0x21a>
 8003b8e:	2910      	cmp	r1, #16
 8003b90:	bfd8      	it	le
 8003b92:	437d      	mulle	r5, r7
 8003b94:	e7dd      	b.n	8003b52 <_strtod_l+0x21a>
 8003b96:	2c10      	cmp	r4, #16
 8003b98:	bfdc      	itt	le
 8003b9a:	210a      	movle	r1, #10
 8003b9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8003ba0:	e7e4      	b.n	8003b6c <_strtod_l+0x234>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9305      	str	r3, [sp, #20]
 8003ba6:	e781      	b.n	8003aac <_strtod_l+0x174>
 8003ba8:	f04f 0c01 	mov.w	ip, #1
 8003bac:	1cb3      	adds	r3, r6, #2
 8003bae:	931b      	str	r3, [sp, #108]	; 0x6c
 8003bb0:	78b3      	ldrb	r3, [r6, #2]
 8003bb2:	e78a      	b.n	8003aca <_strtod_l+0x192>
 8003bb4:	f04f 0c00 	mov.w	ip, #0
 8003bb8:	e7f8      	b.n	8003bac <_strtod_l+0x274>
 8003bba:	bf00      	nop
 8003bbc:	08006740 	.word	0x08006740
 8003bc0:	7ff00000 	.word	0x7ff00000
 8003bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bc6:	1c5f      	adds	r7, r3, #1
 8003bc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d0f9      	beq.n	8003bc4 <_strtod_l+0x28c>
 8003bd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8003bd4:	2f08      	cmp	r7, #8
 8003bd6:	f63f af7d 	bhi.w	8003ad4 <_strtod_l+0x19c>
 8003bda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003be0:	9309      	str	r3, [sp, #36]	; 0x24
 8003be2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003be4:	1c5f      	adds	r7, r3, #1
 8003be6:	971b      	str	r7, [sp, #108]	; 0x6c
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003bee:	f1b8 0f09 	cmp.w	r8, #9
 8003bf2:	d937      	bls.n	8003c64 <_strtod_l+0x32c>
 8003bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bf6:	1a7f      	subs	r7, r7, r1
 8003bf8:	2f08      	cmp	r7, #8
 8003bfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003bfe:	dc37      	bgt.n	8003c70 <_strtod_l+0x338>
 8003c00:	45be      	cmp	lr, r7
 8003c02:	bfa8      	it	ge
 8003c04:	46be      	movge	lr, r7
 8003c06:	f1bc 0f00 	cmp.w	ip, #0
 8003c0a:	d001      	beq.n	8003c10 <_strtod_l+0x2d8>
 8003c0c:	f1ce 0e00 	rsb	lr, lr, #0
 8003c10:	2c00      	cmp	r4, #0
 8003c12:	d151      	bne.n	8003cb8 <_strtod_l+0x380>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	f47f aece 	bne.w	80039b6 <_strtod_l+0x7e>
 8003c1a:	9a07      	ldr	r2, [sp, #28]
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	f47f aeca 	bne.w	80039b6 <_strtod_l+0x7e>
 8003c22:	9a05      	ldr	r2, [sp, #20]
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	f47f aee4 	bne.w	80039f2 <_strtod_l+0xba>
 8003c2a:	2b4e      	cmp	r3, #78	; 0x4e
 8003c2c:	d027      	beq.n	8003c7e <_strtod_l+0x346>
 8003c2e:	dc21      	bgt.n	8003c74 <_strtod_l+0x33c>
 8003c30:	2b49      	cmp	r3, #73	; 0x49
 8003c32:	f47f aede 	bne.w	80039f2 <_strtod_l+0xba>
 8003c36:	49a4      	ldr	r1, [pc, #656]	; (8003ec8 <_strtod_l+0x590>)
 8003c38:	a81b      	add	r0, sp, #108	; 0x6c
 8003c3a:	f001 fde1 	bl	8005800 <__match>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	f43f aed7 	beq.w	80039f2 <_strtod_l+0xba>
 8003c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c46:	49a1      	ldr	r1, [pc, #644]	; (8003ecc <_strtod_l+0x594>)
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	a81b      	add	r0, sp, #108	; 0x6c
 8003c4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c4e:	f001 fdd7 	bl	8005800 <__match>
 8003c52:	b910      	cbnz	r0, 8003c5a <_strtod_l+0x322>
 8003c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c56:	3301      	adds	r3, #1
 8003c58:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c5a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003ee0 <_strtod_l+0x5a8>
 8003c5e:	f04f 0900 	mov.w	r9, #0
 8003c62:	e6a8      	b.n	80039b6 <_strtod_l+0x7e>
 8003c64:	210a      	movs	r1, #10
 8003c66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003c6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003c6e:	e7b8      	b.n	8003be2 <_strtod_l+0x2aa>
 8003c70:	46be      	mov	lr, r7
 8003c72:	e7c8      	b.n	8003c06 <_strtod_l+0x2ce>
 8003c74:	2b69      	cmp	r3, #105	; 0x69
 8003c76:	d0de      	beq.n	8003c36 <_strtod_l+0x2fe>
 8003c78:	2b6e      	cmp	r3, #110	; 0x6e
 8003c7a:	f47f aeba 	bne.w	80039f2 <_strtod_l+0xba>
 8003c7e:	4994      	ldr	r1, [pc, #592]	; (8003ed0 <_strtod_l+0x598>)
 8003c80:	a81b      	add	r0, sp, #108	; 0x6c
 8003c82:	f001 fdbd 	bl	8005800 <__match>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f43f aeb3 	beq.w	80039f2 <_strtod_l+0xba>
 8003c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b28      	cmp	r3, #40	; 0x28
 8003c92:	d10e      	bne.n	8003cb2 <_strtod_l+0x37a>
 8003c94:	aa1e      	add	r2, sp, #120	; 0x78
 8003c96:	498f      	ldr	r1, [pc, #572]	; (8003ed4 <_strtod_l+0x59c>)
 8003c98:	a81b      	add	r0, sp, #108	; 0x6c
 8003c9a:	f001 fdc5 	bl	8005828 <__hexnan>
 8003c9e:	2805      	cmp	r0, #5
 8003ca0:	d107      	bne.n	8003cb2 <_strtod_l+0x37a>
 8003ca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ca4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8003ca8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8003cac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8003cb0:	e681      	b.n	80039b6 <_strtod_l+0x7e>
 8003cb2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003ee8 <_strtod_l+0x5b0>
 8003cb6:	e7d2      	b.n	8003c5e <_strtod_l+0x326>
 8003cb8:	ebae 0302 	sub.w	r3, lr, r2
 8003cbc:	9307      	str	r3, [sp, #28]
 8003cbe:	9b04      	ldr	r3, [sp, #16]
 8003cc0:	9806      	ldr	r0, [sp, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf08      	it	eq
 8003cc6:	4623      	moveq	r3, r4
 8003cc8:	2c10      	cmp	r4, #16
 8003cca:	9304      	str	r3, [sp, #16]
 8003ccc:	46a0      	mov	r8, r4
 8003cce:	bfa8      	it	ge
 8003cd0:	f04f 0810 	movge.w	r8, #16
 8003cd4:	f7fc fbf2 	bl	80004bc <__aeabi_ui2d>
 8003cd8:	2c09      	cmp	r4, #9
 8003cda:	4681      	mov	r9, r0
 8003cdc:	468a      	mov	sl, r1
 8003cde:	dc13      	bgt.n	8003d08 <_strtod_l+0x3d0>
 8003ce0:	9b07      	ldr	r3, [sp, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f43f ae67 	beq.w	80039b6 <_strtod_l+0x7e>
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	dd7e      	ble.n	8003dea <_strtod_l+0x4b2>
 8003cec:	2b16      	cmp	r3, #22
 8003cee:	dc65      	bgt.n	8003dbc <_strtod_l+0x484>
 8003cf0:	4a79      	ldr	r2, [pc, #484]	; (8003ed8 <_strtod_l+0x5a0>)
 8003cf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8003cf6:	464a      	mov	r2, r9
 8003cf8:	e9de 0100 	ldrd	r0, r1, [lr]
 8003cfc:	4653      	mov	r3, sl
 8003cfe:	f7fc fc57 	bl	80005b0 <__aeabi_dmul>
 8003d02:	4681      	mov	r9, r0
 8003d04:	468a      	mov	sl, r1
 8003d06:	e656      	b.n	80039b6 <_strtod_l+0x7e>
 8003d08:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <_strtod_l+0x5a0>)
 8003d0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d12:	f7fc fc4d 	bl	80005b0 <__aeabi_dmul>
 8003d16:	4606      	mov	r6, r0
 8003d18:	4628      	mov	r0, r5
 8003d1a:	460f      	mov	r7, r1
 8003d1c:	f7fc fbce 	bl	80004bc <__aeabi_ui2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4630      	mov	r0, r6
 8003d26:	4639      	mov	r1, r7
 8003d28:	f7fc fa8c 	bl	8000244 <__adddf3>
 8003d2c:	2c0f      	cmp	r4, #15
 8003d2e:	4681      	mov	r9, r0
 8003d30:	468a      	mov	sl, r1
 8003d32:	ddd5      	ble.n	8003ce0 <_strtod_l+0x3a8>
 8003d34:	9b07      	ldr	r3, [sp, #28]
 8003d36:	eba4 0808 	sub.w	r8, r4, r8
 8003d3a:	4498      	add	r8, r3
 8003d3c:	f1b8 0f00 	cmp.w	r8, #0
 8003d40:	f340 809a 	ble.w	8003e78 <_strtod_l+0x540>
 8003d44:	f018 030f 	ands.w	r3, r8, #15
 8003d48:	d00a      	beq.n	8003d60 <_strtod_l+0x428>
 8003d4a:	4963      	ldr	r1, [pc, #396]	; (8003ed8 <_strtod_l+0x5a0>)
 8003d4c:	464a      	mov	r2, r9
 8003d4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d56:	4653      	mov	r3, sl
 8003d58:	f7fc fc2a 	bl	80005b0 <__aeabi_dmul>
 8003d5c:	4681      	mov	r9, r0
 8003d5e:	468a      	mov	sl, r1
 8003d60:	f038 080f 	bics.w	r8, r8, #15
 8003d64:	d077      	beq.n	8003e56 <_strtod_l+0x51e>
 8003d66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003d6a:	dd4b      	ble.n	8003e04 <_strtod_l+0x4cc>
 8003d6c:	f04f 0800 	mov.w	r8, #0
 8003d70:	f8cd 8010 	str.w	r8, [sp, #16]
 8003d74:	f8cd 8020 	str.w	r8, [sp, #32]
 8003d78:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d7c:	2322      	movs	r3, #34	; 0x22
 8003d7e:	f04f 0900 	mov.w	r9, #0
 8003d82:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003ee0 <_strtod_l+0x5a8>
 8003d86:	f8cb 3000 	str.w	r3, [fp]
 8003d8a:	9b08      	ldr	r3, [sp, #32]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f43f ae12 	beq.w	80039b6 <_strtod_l+0x7e>
 8003d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003d94:	4658      	mov	r0, fp
 8003d96:	f001 fe52 	bl	8005a3e <_Bfree>
 8003d9a:	9906      	ldr	r1, [sp, #24]
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	f001 fe4e 	bl	8005a3e <_Bfree>
 8003da2:	9904      	ldr	r1, [sp, #16]
 8003da4:	4658      	mov	r0, fp
 8003da6:	f001 fe4a 	bl	8005a3e <_Bfree>
 8003daa:	9908      	ldr	r1, [sp, #32]
 8003dac:	4658      	mov	r0, fp
 8003dae:	f001 fe46 	bl	8005a3e <_Bfree>
 8003db2:	4641      	mov	r1, r8
 8003db4:	4658      	mov	r0, fp
 8003db6:	f001 fe42 	bl	8005a3e <_Bfree>
 8003dba:	e5fc      	b.n	80039b6 <_strtod_l+0x7e>
 8003dbc:	9a07      	ldr	r2, [sp, #28]
 8003dbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	dbb6      	blt.n	8003d34 <_strtod_l+0x3fc>
 8003dc6:	4d44      	ldr	r5, [pc, #272]	; (8003ed8 <_strtod_l+0x5a0>)
 8003dc8:	f1c4 040f 	rsb	r4, r4, #15
 8003dcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003dd0:	464a      	mov	r2, r9
 8003dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dd6:	4653      	mov	r3, sl
 8003dd8:	f7fc fbea 	bl	80005b0 <__aeabi_dmul>
 8003ddc:	9b07      	ldr	r3, [sp, #28]
 8003dde:	1b1c      	subs	r4, r3, r4
 8003de0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003de4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003de8:	e789      	b.n	8003cfe <_strtod_l+0x3c6>
 8003dea:	f113 0f16 	cmn.w	r3, #22
 8003dee:	dba1      	blt.n	8003d34 <_strtod_l+0x3fc>
 8003df0:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <_strtod_l+0x5a0>)
 8003df2:	4648      	mov	r0, r9
 8003df4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003df8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	f7fc fd01 	bl	8000804 <__aeabi_ddiv>
 8003e02:	e77e      	b.n	8003d02 <_strtod_l+0x3ca>
 8003e04:	2300      	movs	r3, #0
 8003e06:	4648      	mov	r0, r9
 8003e08:	4651      	mov	r1, sl
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	4e33      	ldr	r6, [pc, #204]	; (8003edc <_strtod_l+0x5a4>)
 8003e0e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003e12:	f1b8 0f01 	cmp.w	r8, #1
 8003e16:	dc21      	bgt.n	8003e5c <_strtod_l+0x524>
 8003e18:	b10b      	cbz	r3, 8003e1e <_strtod_l+0x4e6>
 8003e1a:	4681      	mov	r9, r0
 8003e1c:	468a      	mov	sl, r1
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <_strtod_l+0x5a4>)
 8003e20:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8003e24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003e28:	464a      	mov	r2, r9
 8003e2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003e2e:	4653      	mov	r3, sl
 8003e30:	f7fc fbbe 	bl	80005b0 <__aeabi_dmul>
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <_strtod_l+0x5a8>)
 8003e36:	460a      	mov	r2, r1
 8003e38:	400b      	ands	r3, r1
 8003e3a:	492a      	ldr	r1, [pc, #168]	; (8003ee4 <_strtod_l+0x5ac>)
 8003e3c:	4681      	mov	r9, r0
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d894      	bhi.n	8003d6c <_strtod_l+0x434>
 8003e42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003e46:	428b      	cmp	r3, r1
 8003e48:	bf86      	itte	hi
 8003e4a:	f04f 39ff 	movhi.w	r9, #4294967295
 8003e4e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8003eec <_strtod_l+0x5b4>
 8003e52:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8003e56:	2300      	movs	r3, #0
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	e07b      	b.n	8003f54 <_strtod_l+0x61c>
 8003e5c:	f018 0f01 	tst.w	r8, #1
 8003e60:	d006      	beq.n	8003e70 <_strtod_l+0x538>
 8003e62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f7fc fba1 	bl	80005b0 <__aeabi_dmul>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	3501      	adds	r5, #1
 8003e72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003e76:	e7cc      	b.n	8003e12 <_strtod_l+0x4da>
 8003e78:	d0ed      	beq.n	8003e56 <_strtod_l+0x51e>
 8003e7a:	f1c8 0800 	rsb	r8, r8, #0
 8003e7e:	f018 020f 	ands.w	r2, r8, #15
 8003e82:	d00a      	beq.n	8003e9a <_strtod_l+0x562>
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <_strtod_l+0x5a0>)
 8003e86:	4648      	mov	r0, r9
 8003e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f7fc fcb7 	bl	8000804 <__aeabi_ddiv>
 8003e96:	4681      	mov	r9, r0
 8003e98:	468a      	mov	sl, r1
 8003e9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003e9e:	d0da      	beq.n	8003e56 <_strtod_l+0x51e>
 8003ea0:	f1b8 0f1f 	cmp.w	r8, #31
 8003ea4:	dd24      	ble.n	8003ef0 <_strtod_l+0x5b8>
 8003ea6:	f04f 0800 	mov.w	r8, #0
 8003eaa:	f8cd 8010 	str.w	r8, [sp, #16]
 8003eae:	f8cd 8020 	str.w	r8, [sp, #32]
 8003eb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003eb6:	2322      	movs	r3, #34	; 0x22
 8003eb8:	f04f 0900 	mov.w	r9, #0
 8003ebc:	f04f 0a00 	mov.w	sl, #0
 8003ec0:	f8cb 3000 	str.w	r3, [fp]
 8003ec4:	e761      	b.n	8003d8a <_strtod_l+0x452>
 8003ec6:	bf00      	nop
 8003ec8:	08006709 	.word	0x08006709
 8003ecc:	08006793 	.word	0x08006793
 8003ed0:	08006711 	.word	0x08006711
 8003ed4:	08006754 	.word	0x08006754
 8003ed8:	080067d0 	.word	0x080067d0
 8003edc:	080067a8 	.word	0x080067a8
 8003ee0:	7ff00000 	.word	0x7ff00000
 8003ee4:	7ca00000 	.word	0x7ca00000
 8003ee8:	fff80000 	.word	0xfff80000
 8003eec:	7fefffff 	.word	0x7fefffff
 8003ef0:	f018 0310 	ands.w	r3, r8, #16
 8003ef4:	bf18      	it	ne
 8003ef6:	236a      	movne	r3, #106	; 0x6a
 8003ef8:	4648      	mov	r0, r9
 8003efa:	9305      	str	r3, [sp, #20]
 8003efc:	4651      	mov	r1, sl
 8003efe:	2300      	movs	r3, #0
 8003f00:	4da1      	ldr	r5, [pc, #644]	; (8004188 <_strtod_l+0x850>)
 8003f02:	f1b8 0f00 	cmp.w	r8, #0
 8003f06:	f300 8113 	bgt.w	8004130 <_strtod_l+0x7f8>
 8003f0a:	b10b      	cbz	r3, 8003f10 <_strtod_l+0x5d8>
 8003f0c:	4681      	mov	r9, r0
 8003f0e:	468a      	mov	sl, r1
 8003f10:	9b05      	ldr	r3, [sp, #20]
 8003f12:	b1bb      	cbz	r3, 8003f44 <_strtod_l+0x60c>
 8003f14:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003f18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	4651      	mov	r1, sl
 8003f20:	dd10      	ble.n	8003f44 <_strtod_l+0x60c>
 8003f22:	2b1f      	cmp	r3, #31
 8003f24:	f340 8110 	ble.w	8004148 <_strtod_l+0x810>
 8003f28:	2b34      	cmp	r3, #52	; 0x34
 8003f2a:	bfd8      	it	le
 8003f2c:	f04f 32ff 	movle.w	r2, #4294967295
 8003f30:	f04f 0900 	mov.w	r9, #0
 8003f34:	bfcf      	iteee	gt
 8003f36:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8003f3a:	3b20      	suble	r3, #32
 8003f3c:	fa02 f303 	lslle.w	r3, r2, r3
 8003f40:	ea03 0a01 	andle.w	sl, r3, r1
 8003f44:	2200      	movs	r2, #0
 8003f46:	2300      	movs	r3, #0
 8003f48:	4648      	mov	r0, r9
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	f7fc fd98 	bl	8000a80 <__aeabi_dcmpeq>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d1a8      	bne.n	8003ea6 <_strtod_l+0x56e>
 8003f54:	9b06      	ldr	r3, [sp, #24]
 8003f56:	9a04      	ldr	r2, [sp, #16]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	9908      	ldr	r1, [sp, #32]
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	4658      	mov	r0, fp
 8003f60:	f001 fdbf 	bl	8005ae2 <__s2b>
 8003f64:	9008      	str	r0, [sp, #32]
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f43f af00 	beq.w	8003d6c <_strtod_l+0x434>
 8003f6c:	9a07      	ldr	r2, [sp, #28]
 8003f6e:	9b07      	ldr	r3, [sp, #28]
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	f1c3 0300 	rsb	r3, r3, #0
 8003f76:	bfa8      	it	ge
 8003f78:	2300      	movge	r3, #0
 8003f7a:	f04f 0800 	mov.w	r8, #0
 8003f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8003f80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003f84:	9316      	str	r3, [sp, #88]	; 0x58
 8003f86:	f8cd 8010 	str.w	r8, [sp, #16]
 8003f8a:	9b08      	ldr	r3, [sp, #32]
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	f001 fd21 	bl	80059d6 <_Balloc>
 8003f94:	9006      	str	r0, [sp, #24]
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f43f aef0 	beq.w	8003d7c <_strtod_l+0x444>
 8003f9c:	9b08      	ldr	r3, [sp, #32]
 8003f9e:	300c      	adds	r0, #12
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	f103 010c 	add.w	r1, r3, #12
 8003fa6:	3202      	adds	r2, #2
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	f001 fd09 	bl	80059c0 <memcpy>
 8003fae:	ab1e      	add	r3, sp, #120	; 0x78
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	464a      	mov	r2, r9
 8003fb8:	4653      	mov	r3, sl
 8003fba:	4658      	mov	r0, fp
 8003fbc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8003fc0:	f002 f84a 	bl	8006058 <__d2b>
 8003fc4:	901c      	str	r0, [sp, #112]	; 0x70
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f43f aed8 	beq.w	8003d7c <_strtod_l+0x444>
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f001 fe13 	bl	8005bfa <__i2b>
 8003fd4:	9004      	str	r0, [sp, #16]
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f43f aecf 	beq.w	8003d7c <_strtod_l+0x444>
 8003fde:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	bfab      	itete	ge
 8003fe6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003fe8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003fea:	18ee      	addge	r6, r5, r3
 8003fec:	1b5c      	sublt	r4, r3, r5
 8003fee:	9b05      	ldr	r3, [sp, #20]
 8003ff0:	bfa8      	it	ge
 8003ff2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003ff4:	eba5 0503 	sub.w	r5, r5, r3
 8003ff8:	4415      	add	r5, r2
 8003ffa:	4b64      	ldr	r3, [pc, #400]	; (800418c <_strtod_l+0x854>)
 8003ffc:	f105 35ff 	add.w	r5, r5, #4294967295
 8004000:	bfb8      	it	lt
 8004002:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004004:	429d      	cmp	r5, r3
 8004006:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800400a:	f280 80af 	bge.w	800416c <_strtod_l+0x834>
 800400e:	1b5b      	subs	r3, r3, r5
 8004010:	2b1f      	cmp	r3, #31
 8004012:	eba2 0203 	sub.w	r2, r2, r3
 8004016:	f04f 0701 	mov.w	r7, #1
 800401a:	f300 809c 	bgt.w	8004156 <_strtod_l+0x81e>
 800401e:	2500      	movs	r5, #0
 8004020:	fa07 f303 	lsl.w	r3, r7, r3
 8004024:	930f      	str	r3, [sp, #60]	; 0x3c
 8004026:	18b7      	adds	r7, r6, r2
 8004028:	9b05      	ldr	r3, [sp, #20]
 800402a:	42be      	cmp	r6, r7
 800402c:	4414      	add	r4, r2
 800402e:	441c      	add	r4, r3
 8004030:	4633      	mov	r3, r6
 8004032:	bfa8      	it	ge
 8004034:	463b      	movge	r3, r7
 8004036:	42a3      	cmp	r3, r4
 8004038:	bfa8      	it	ge
 800403a:	4623      	movge	r3, r4
 800403c:	2b00      	cmp	r3, #0
 800403e:	bfc2      	ittt	gt
 8004040:	1aff      	subgt	r7, r7, r3
 8004042:	1ae4      	subgt	r4, r4, r3
 8004044:	1af6      	subgt	r6, r6, r3
 8004046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004048:	b1bb      	cbz	r3, 800407a <_strtod_l+0x742>
 800404a:	461a      	mov	r2, r3
 800404c:	9904      	ldr	r1, [sp, #16]
 800404e:	4658      	mov	r0, fp
 8004050:	f001 fe72 	bl	8005d38 <__pow5mult>
 8004054:	9004      	str	r0, [sp, #16]
 8004056:	2800      	cmp	r0, #0
 8004058:	f43f ae90 	beq.w	8003d7c <_strtod_l+0x444>
 800405c:	4601      	mov	r1, r0
 800405e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004060:	4658      	mov	r0, fp
 8004062:	f001 fdd3 	bl	8005c0c <__multiply>
 8004066:	9009      	str	r0, [sp, #36]	; 0x24
 8004068:	2800      	cmp	r0, #0
 800406a:	f43f ae87 	beq.w	8003d7c <_strtod_l+0x444>
 800406e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004070:	4658      	mov	r0, fp
 8004072:	f001 fce4 	bl	8005a3e <_Bfree>
 8004076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004078:	931c      	str	r3, [sp, #112]	; 0x70
 800407a:	2f00      	cmp	r7, #0
 800407c:	dc7a      	bgt.n	8004174 <_strtod_l+0x83c>
 800407e:	9b07      	ldr	r3, [sp, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	dd08      	ble.n	8004096 <_strtod_l+0x75e>
 8004084:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004086:	9906      	ldr	r1, [sp, #24]
 8004088:	4658      	mov	r0, fp
 800408a:	f001 fe55 	bl	8005d38 <__pow5mult>
 800408e:	9006      	str	r0, [sp, #24]
 8004090:	2800      	cmp	r0, #0
 8004092:	f43f ae73 	beq.w	8003d7c <_strtod_l+0x444>
 8004096:	2c00      	cmp	r4, #0
 8004098:	dd08      	ble.n	80040ac <_strtod_l+0x774>
 800409a:	4622      	mov	r2, r4
 800409c:	9906      	ldr	r1, [sp, #24]
 800409e:	4658      	mov	r0, fp
 80040a0:	f001 fe98 	bl	8005dd4 <__lshift>
 80040a4:	9006      	str	r0, [sp, #24]
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f43f ae68 	beq.w	8003d7c <_strtod_l+0x444>
 80040ac:	2e00      	cmp	r6, #0
 80040ae:	dd08      	ble.n	80040c2 <_strtod_l+0x78a>
 80040b0:	4632      	mov	r2, r6
 80040b2:	9904      	ldr	r1, [sp, #16]
 80040b4:	4658      	mov	r0, fp
 80040b6:	f001 fe8d 	bl	8005dd4 <__lshift>
 80040ba:	9004      	str	r0, [sp, #16]
 80040bc:	2800      	cmp	r0, #0
 80040be:	f43f ae5d 	beq.w	8003d7c <_strtod_l+0x444>
 80040c2:	9a06      	ldr	r2, [sp, #24]
 80040c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040c6:	4658      	mov	r0, fp
 80040c8:	f001 fef2 	bl	8005eb0 <__mdiff>
 80040cc:	4680      	mov	r8, r0
 80040ce:	2800      	cmp	r0, #0
 80040d0:	f43f ae54 	beq.w	8003d7c <_strtod_l+0x444>
 80040d4:	2400      	movs	r4, #0
 80040d6:	68c3      	ldr	r3, [r0, #12]
 80040d8:	9904      	ldr	r1, [sp, #16]
 80040da:	60c4      	str	r4, [r0, #12]
 80040dc:	930c      	str	r3, [sp, #48]	; 0x30
 80040de:	f001 fecd 	bl	8005e7c <__mcmp>
 80040e2:	42a0      	cmp	r0, r4
 80040e4:	da54      	bge.n	8004190 <_strtod_l+0x858>
 80040e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040e8:	b9f3      	cbnz	r3, 8004128 <_strtod_l+0x7f0>
 80040ea:	f1b9 0f00 	cmp.w	r9, #0
 80040ee:	d11b      	bne.n	8004128 <_strtod_l+0x7f0>
 80040f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80040f4:	b9c3      	cbnz	r3, 8004128 <_strtod_l+0x7f0>
 80040f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040fa:	0d1b      	lsrs	r3, r3, #20
 80040fc:	051b      	lsls	r3, r3, #20
 80040fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004102:	d911      	bls.n	8004128 <_strtod_l+0x7f0>
 8004104:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004108:	b91b      	cbnz	r3, 8004112 <_strtod_l+0x7da>
 800410a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800410e:	2b01      	cmp	r3, #1
 8004110:	dd0a      	ble.n	8004128 <_strtod_l+0x7f0>
 8004112:	4641      	mov	r1, r8
 8004114:	2201      	movs	r2, #1
 8004116:	4658      	mov	r0, fp
 8004118:	f001 fe5c 	bl	8005dd4 <__lshift>
 800411c:	9904      	ldr	r1, [sp, #16]
 800411e:	4680      	mov	r8, r0
 8004120:	f001 feac 	bl	8005e7c <__mcmp>
 8004124:	2800      	cmp	r0, #0
 8004126:	dc68      	bgt.n	80041fa <_strtod_l+0x8c2>
 8004128:	9b05      	ldr	r3, [sp, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d172      	bne.n	8004214 <_strtod_l+0x8dc>
 800412e:	e630      	b.n	8003d92 <_strtod_l+0x45a>
 8004130:	f018 0f01 	tst.w	r8, #1
 8004134:	d004      	beq.n	8004140 <_strtod_l+0x808>
 8004136:	e9d5 2300 	ldrd	r2, r3, [r5]
 800413a:	f7fc fa39 	bl	80005b0 <__aeabi_dmul>
 800413e:	2301      	movs	r3, #1
 8004140:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004144:	3508      	adds	r5, #8
 8004146:	e6dc      	b.n	8003f02 <_strtod_l+0x5ca>
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	ea03 0909 	and.w	r9, r3, r9
 8004154:	e6f6      	b.n	8003f44 <_strtod_l+0x60c>
 8004156:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800415a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800415e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004162:	35e2      	adds	r5, #226	; 0xe2
 8004164:	fa07 f505 	lsl.w	r5, r7, r5
 8004168:	970f      	str	r7, [sp, #60]	; 0x3c
 800416a:	e75c      	b.n	8004026 <_strtod_l+0x6ee>
 800416c:	2301      	movs	r3, #1
 800416e:	2500      	movs	r5, #0
 8004170:	930f      	str	r3, [sp, #60]	; 0x3c
 8004172:	e758      	b.n	8004026 <_strtod_l+0x6ee>
 8004174:	463a      	mov	r2, r7
 8004176:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004178:	4658      	mov	r0, fp
 800417a:	f001 fe2b 	bl	8005dd4 <__lshift>
 800417e:	901c      	str	r0, [sp, #112]	; 0x70
 8004180:	2800      	cmp	r0, #0
 8004182:	f47f af7c 	bne.w	800407e <_strtod_l+0x746>
 8004186:	e5f9      	b.n	8003d7c <_strtod_l+0x444>
 8004188:	08006768 	.word	0x08006768
 800418c:	fffffc02 	.word	0xfffffc02
 8004190:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004194:	f040 8089 	bne.w	80042aa <_strtod_l+0x972>
 8004198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800419a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800419e:	b342      	cbz	r2, 80041f2 <_strtod_l+0x8ba>
 80041a0:	4aaf      	ldr	r2, [pc, #700]	; (8004460 <_strtod_l+0xb28>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d156      	bne.n	8004254 <_strtod_l+0x91c>
 80041a6:	9b05      	ldr	r3, [sp, #20]
 80041a8:	4648      	mov	r0, r9
 80041aa:	b1eb      	cbz	r3, 80041e8 <_strtod_l+0x8b0>
 80041ac:	4653      	mov	r3, sl
 80041ae:	4aad      	ldr	r2, [pc, #692]	; (8004464 <_strtod_l+0xb2c>)
 80041b0:	f04f 31ff 	mov.w	r1, #4294967295
 80041b4:	401a      	ands	r2, r3
 80041b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80041ba:	d818      	bhi.n	80041ee <_strtod_l+0x8b6>
 80041bc:	0d12      	lsrs	r2, r2, #20
 80041be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	4298      	cmp	r0, r3
 80041c8:	d144      	bne.n	8004254 <_strtod_l+0x91c>
 80041ca:	4ba7      	ldr	r3, [pc, #668]	; (8004468 <_strtod_l+0xb30>)
 80041cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d102      	bne.n	80041d8 <_strtod_l+0x8a0>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f add2 	beq.w	8003d7c <_strtod_l+0x444>
 80041d8:	4ba2      	ldr	r3, [pc, #648]	; (8004464 <_strtod_l+0xb2c>)
 80041da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041dc:	f04f 0900 	mov.w	r9, #0
 80041e0:	401a      	ands	r2, r3
 80041e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80041e6:	e79f      	b.n	8004128 <_strtod_l+0x7f0>
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	e7eb      	b.n	80041c6 <_strtod_l+0x88e>
 80041ee:	460b      	mov	r3, r1
 80041f0:	e7e9      	b.n	80041c6 <_strtod_l+0x88e>
 80041f2:	bb7b      	cbnz	r3, 8004254 <_strtod_l+0x91c>
 80041f4:	f1b9 0f00 	cmp.w	r9, #0
 80041f8:	d12c      	bne.n	8004254 <_strtod_l+0x91c>
 80041fa:	9905      	ldr	r1, [sp, #20]
 80041fc:	4653      	mov	r3, sl
 80041fe:	4a99      	ldr	r2, [pc, #612]	; (8004464 <_strtod_l+0xb2c>)
 8004200:	b1f1      	cbz	r1, 8004240 <_strtod_l+0x908>
 8004202:	ea02 010a 	and.w	r1, r2, sl
 8004206:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800420a:	dc19      	bgt.n	8004240 <_strtod_l+0x908>
 800420c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004210:	f77f ae51 	ble.w	8003eb6 <_strtod_l+0x57e>
 8004214:	2300      	movs	r3, #0
 8004216:	4a95      	ldr	r2, [pc, #596]	; (800446c <_strtod_l+0xb34>)
 8004218:	4648      	mov	r0, r9
 800421a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800421e:	4651      	mov	r1, sl
 8004220:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004224:	f7fc f9c4 	bl	80005b0 <__aeabi_dmul>
 8004228:	4681      	mov	r9, r0
 800422a:	468a      	mov	sl, r1
 800422c:	2900      	cmp	r1, #0
 800422e:	f47f adb0 	bne.w	8003d92 <_strtod_l+0x45a>
 8004232:	2800      	cmp	r0, #0
 8004234:	f47f adad 	bne.w	8003d92 <_strtod_l+0x45a>
 8004238:	2322      	movs	r3, #34	; 0x22
 800423a:	f8cb 3000 	str.w	r3, [fp]
 800423e:	e5a8      	b.n	8003d92 <_strtod_l+0x45a>
 8004240:	4013      	ands	r3, r2
 8004242:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004246:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800424a:	f04f 39ff 	mov.w	r9, #4294967295
 800424e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004252:	e769      	b.n	8004128 <_strtod_l+0x7f0>
 8004254:	b19d      	cbz	r5, 800427e <_strtod_l+0x946>
 8004256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004258:	421d      	tst	r5, r3
 800425a:	f43f af65 	beq.w	8004128 <_strtod_l+0x7f0>
 800425e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004260:	9a05      	ldr	r2, [sp, #20]
 8004262:	4648      	mov	r0, r9
 8004264:	4651      	mov	r1, sl
 8004266:	b173      	cbz	r3, 8004286 <_strtod_l+0x94e>
 8004268:	f7ff fb44 	bl	80038f4 <sulp>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004274:	f7fb ffe6 	bl	8000244 <__adddf3>
 8004278:	4681      	mov	r9, r0
 800427a:	468a      	mov	sl, r1
 800427c:	e754      	b.n	8004128 <_strtod_l+0x7f0>
 800427e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004280:	ea13 0f09 	tst.w	r3, r9
 8004284:	e7e9      	b.n	800425a <_strtod_l+0x922>
 8004286:	f7ff fb35 	bl	80038f4 <sulp>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004292:	f7fb ffd5 	bl	8000240 <__aeabi_dsub>
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	4681      	mov	r9, r0
 800429c:	468a      	mov	sl, r1
 800429e:	f7fc fbef 	bl	8000a80 <__aeabi_dcmpeq>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f47f ae07 	bne.w	8003eb6 <_strtod_l+0x57e>
 80042a8:	e73e      	b.n	8004128 <_strtod_l+0x7f0>
 80042aa:	9904      	ldr	r1, [sp, #16]
 80042ac:	4640      	mov	r0, r8
 80042ae:	f001 ff22 	bl	80060f6 <__ratio>
 80042b2:	2200      	movs	r2, #0
 80042b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042b8:	4606      	mov	r6, r0
 80042ba:	460f      	mov	r7, r1
 80042bc:	f7fc fbf4 	bl	8000aa8 <__aeabi_dcmple>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d075      	beq.n	80043b0 <_strtod_l+0xa78>
 80042c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d047      	beq.n	800435a <_strtod_l+0xa22>
 80042ca:	2600      	movs	r6, #0
 80042cc:	4f68      	ldr	r7, [pc, #416]	; (8004470 <_strtod_l+0xb38>)
 80042ce:	4d68      	ldr	r5, [pc, #416]	; (8004470 <_strtod_l+0xb38>)
 80042d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	0d1b      	lsrs	r3, r3, #20
 80042d8:	051b      	lsls	r3, r3, #20
 80042da:	930f      	str	r3, [sp, #60]	; 0x3c
 80042dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042de:	4b65      	ldr	r3, [pc, #404]	; (8004474 <_strtod_l+0xb3c>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f040 80cf 	bne.w	8004484 <_strtod_l+0xb4c>
 80042e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80042ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f0:	4648      	mov	r0, r9
 80042f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80042f6:	4651      	mov	r1, sl
 80042f8:	f001 fe38 	bl	8005f6c <__ulp>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4630      	mov	r0, r6
 8004302:	4639      	mov	r1, r7
 8004304:	f7fc f954 	bl	80005b0 <__aeabi_dmul>
 8004308:	464a      	mov	r2, r9
 800430a:	4653      	mov	r3, sl
 800430c:	f7fb ff9a 	bl	8000244 <__adddf3>
 8004310:	460b      	mov	r3, r1
 8004312:	4954      	ldr	r1, [pc, #336]	; (8004464 <_strtod_l+0xb2c>)
 8004314:	4a58      	ldr	r2, [pc, #352]	; (8004478 <_strtod_l+0xb40>)
 8004316:	4019      	ands	r1, r3
 8004318:	4291      	cmp	r1, r2
 800431a:	4681      	mov	r9, r0
 800431c:	d95e      	bls.n	80043dc <_strtod_l+0xaa4>
 800431e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004320:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <_strtod_l+0x9f8>
 8004328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800432a:	3301      	adds	r3, #1
 800432c:	f43f ad26 	beq.w	8003d7c <_strtod_l+0x444>
 8004330:	f04f 39ff 	mov.w	r9, #4294967295
 8004334:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004468 <_strtod_l+0xb30>
 8004338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800433a:	4658      	mov	r0, fp
 800433c:	f001 fb7f 	bl	8005a3e <_Bfree>
 8004340:	9906      	ldr	r1, [sp, #24]
 8004342:	4658      	mov	r0, fp
 8004344:	f001 fb7b 	bl	8005a3e <_Bfree>
 8004348:	9904      	ldr	r1, [sp, #16]
 800434a:	4658      	mov	r0, fp
 800434c:	f001 fb77 	bl	8005a3e <_Bfree>
 8004350:	4641      	mov	r1, r8
 8004352:	4658      	mov	r0, fp
 8004354:	f001 fb73 	bl	8005a3e <_Bfree>
 8004358:	e617      	b.n	8003f8a <_strtod_l+0x652>
 800435a:	f1b9 0f00 	cmp.w	r9, #0
 800435e:	d119      	bne.n	8004394 <_strtod_l+0xa5c>
 8004360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004366:	b9e3      	cbnz	r3, 80043a2 <_strtod_l+0xa6a>
 8004368:	2200      	movs	r2, #0
 800436a:	4b41      	ldr	r3, [pc, #260]	; (8004470 <_strtod_l+0xb38>)
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fc fb90 	bl	8000a94 <__aeabi_dcmplt>
 8004374:	b9c8      	cbnz	r0, 80043aa <_strtod_l+0xa72>
 8004376:	2200      	movs	r2, #0
 8004378:	4b40      	ldr	r3, [pc, #256]	; (800447c <_strtod_l+0xb44>)
 800437a:	4630      	mov	r0, r6
 800437c:	4639      	mov	r1, r7
 800437e:	f7fc f917 	bl	80005b0 <__aeabi_dmul>
 8004382:	4604      	mov	r4, r0
 8004384:	460d      	mov	r5, r1
 8004386:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800438a:	9418      	str	r4, [sp, #96]	; 0x60
 800438c:	9319      	str	r3, [sp, #100]	; 0x64
 800438e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004392:	e79d      	b.n	80042d0 <_strtod_l+0x998>
 8004394:	f1b9 0f01 	cmp.w	r9, #1
 8004398:	d103      	bne.n	80043a2 <_strtod_l+0xa6a>
 800439a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	f43f ad8a 	beq.w	8003eb6 <_strtod_l+0x57e>
 80043a2:	2600      	movs	r6, #0
 80043a4:	4f36      	ldr	r7, [pc, #216]	; (8004480 <_strtod_l+0xb48>)
 80043a6:	2400      	movs	r4, #0
 80043a8:	e791      	b.n	80042ce <_strtod_l+0x996>
 80043aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80043ac:	4d33      	ldr	r5, [pc, #204]	; (800447c <_strtod_l+0xb44>)
 80043ae:	e7ea      	b.n	8004386 <_strtod_l+0xa4e>
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <_strtod_l+0xb44>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fc f8fa 	bl	80005b0 <__aeabi_dmul>
 80043bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	b933      	cbnz	r3, 80043d2 <_strtod_l+0xa9a>
 80043c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043c8:	9010      	str	r0, [sp, #64]	; 0x40
 80043ca:	9311      	str	r3, [sp, #68]	; 0x44
 80043cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80043d0:	e77e      	b.n	80042d0 <_strtod_l+0x998>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80043da:	e7f7      	b.n	80043cc <_strtod_l+0xa94>
 80043dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80043e0:	9b05      	ldr	r3, [sp, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1a8      	bne.n	8004338 <_strtod_l+0xa00>
 80043e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043ea:	0d1b      	lsrs	r3, r3, #20
 80043ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043ee:	051b      	lsls	r3, r3, #20
 80043f0:	429a      	cmp	r2, r3
 80043f2:	4656      	mov	r6, sl
 80043f4:	d1a0      	bne.n	8004338 <_strtod_l+0xa00>
 80043f6:	4629      	mov	r1, r5
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7fc fb89 	bl	8000b10 <__aeabi_d2iz>
 80043fe:	f7fc f86d 	bl	80004dc <__aeabi_i2d>
 8004402:	460b      	mov	r3, r1
 8004404:	4602      	mov	r2, r0
 8004406:	4629      	mov	r1, r5
 8004408:	4620      	mov	r0, r4
 800440a:	f7fb ff19 	bl	8000240 <__aeabi_dsub>
 800440e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004410:	4604      	mov	r4, r0
 8004412:	460d      	mov	r5, r1
 8004414:	b933      	cbnz	r3, 8004424 <_strtod_l+0xaec>
 8004416:	f1b9 0f00 	cmp.w	r9, #0
 800441a:	d103      	bne.n	8004424 <_strtod_l+0xaec>
 800441c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004420:	2e00      	cmp	r6, #0
 8004422:	d06a      	beq.n	80044fa <_strtod_l+0xbc2>
 8004424:	a30a      	add	r3, pc, #40	; (adr r3, 8004450 <_strtod_l+0xb18>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fc fb31 	bl	8000a94 <__aeabi_dcmplt>
 8004432:	2800      	cmp	r0, #0
 8004434:	f47f acad 	bne.w	8003d92 <_strtod_l+0x45a>
 8004438:	a307      	add	r3, pc, #28	; (adr r3, 8004458 <_strtod_l+0xb20>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc fb45 	bl	8000ad0 <__aeabi_dcmpgt>
 8004446:	2800      	cmp	r0, #0
 8004448:	f43f af76 	beq.w	8004338 <_strtod_l+0xa00>
 800444c:	e4a1      	b.n	8003d92 <_strtod_l+0x45a>
 800444e:	bf00      	nop
 8004450:	94a03595 	.word	0x94a03595
 8004454:	3fdfffff 	.word	0x3fdfffff
 8004458:	35afe535 	.word	0x35afe535
 800445c:	3fe00000 	.word	0x3fe00000
 8004460:	000fffff 	.word	0x000fffff
 8004464:	7ff00000 	.word	0x7ff00000
 8004468:	7fefffff 	.word	0x7fefffff
 800446c:	39500000 	.word	0x39500000
 8004470:	3ff00000 	.word	0x3ff00000
 8004474:	7fe00000 	.word	0x7fe00000
 8004478:	7c9fffff 	.word	0x7c9fffff
 800447c:	3fe00000 	.word	0x3fe00000
 8004480:	bff00000 	.word	0xbff00000
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	b313      	cbz	r3, 80044ce <_strtod_l+0xb96>
 8004488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800448a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800448e:	d81e      	bhi.n	80044ce <_strtod_l+0xb96>
 8004490:	a325      	add	r3, pc, #148	; (adr r3, 8004528 <_strtod_l+0xbf0>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	4620      	mov	r0, r4
 8004498:	4629      	mov	r1, r5
 800449a:	f7fc fb05 	bl	8000aa8 <__aeabi_dcmple>
 800449e:	b190      	cbz	r0, 80044c6 <_strtod_l+0xb8e>
 80044a0:	4629      	mov	r1, r5
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7fc fb5c 	bl	8000b60 <__aeabi_d2uiz>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	bf08      	it	eq
 80044ac:	2001      	moveq	r0, #1
 80044ae:	f7fc f805 	bl	80004bc <__aeabi_ui2d>
 80044b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044b4:	4604      	mov	r4, r0
 80044b6:	460d      	mov	r5, r1
 80044b8:	b9d3      	cbnz	r3, 80044f0 <_strtod_l+0xbb8>
 80044ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044be:	9012      	str	r0, [sp, #72]	; 0x48
 80044c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80044c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80044c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80044cc:	1a9f      	subs	r7, r3, r2
 80044ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044d2:	f001 fd4b 	bl	8005f6c <__ulp>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fc f867 	bl	80005b0 <__aeabi_dmul>
 80044e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044e6:	f7fb fead 	bl	8000244 <__adddf3>
 80044ea:	4681      	mov	r9, r0
 80044ec:	468a      	mov	sl, r1
 80044ee:	e777      	b.n	80043e0 <_strtod_l+0xaa8>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80044f8:	e7e3      	b.n	80044c2 <_strtod_l+0xb8a>
 80044fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004530 <_strtod_l+0xbf8>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc fac8 	bl	8000a94 <__aeabi_dcmplt>
 8004504:	e79f      	b.n	8004446 <_strtod_l+0xb0e>
 8004506:	2300      	movs	r3, #0
 8004508:	930d      	str	r3, [sp, #52]	; 0x34
 800450a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800450c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	f7ff ba55 	b.w	80039be <_strtod_l+0x86>
 8004514:	2b65      	cmp	r3, #101	; 0x65
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f43f ab42 	beq.w	8003ba2 <_strtod_l+0x26a>
 800451e:	2101      	movs	r1, #1
 8004520:	4614      	mov	r4, r2
 8004522:	9105      	str	r1, [sp, #20]
 8004524:	f7ff babf 	b.w	8003aa6 <_strtod_l+0x16e>
 8004528:	ffc00000 	.word	0xffc00000
 800452c:	41dfffff 	.word	0x41dfffff
 8004530:	94a03595 	.word	0x94a03595
 8004534:	3fcfffff 	.word	0x3fcfffff

08004538 <_strtod_r>:
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <_strtod_r+0x18>)
 800453a:	b410      	push	{r4}
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4c05      	ldr	r4, [pc, #20]	; (8004554 <_strtod_r+0x1c>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf08      	it	eq
 8004546:	4623      	moveq	r3, r4
 8004548:	bc10      	pop	{r4}
 800454a:	f7ff b9f5 	b.w	8003938 <_strtod_l>
 800454e:	bf00      	nop
 8004550:	20000350 	.word	0x20000350
 8004554:	200003b4 	.word	0x200003b4

08004558 <_strtol_l.isra.0>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	4680      	mov	r8, r0
 800455e:	4689      	mov	r9, r1
 8004560:	4692      	mov	sl, r2
 8004562:	461e      	mov	r6, r3
 8004564:	460f      	mov	r7, r1
 8004566:	463d      	mov	r5, r7
 8004568:	9808      	ldr	r0, [sp, #32]
 800456a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800456e:	f001 f9eb 	bl	8005948 <__locale_ctype_ptr_l>
 8004572:	4420      	add	r0, r4
 8004574:	7843      	ldrb	r3, [r0, #1]
 8004576:	f013 0308 	ands.w	r3, r3, #8
 800457a:	d132      	bne.n	80045e2 <_strtol_l.isra.0+0x8a>
 800457c:	2c2d      	cmp	r4, #45	; 0x2d
 800457e:	d132      	bne.n	80045e6 <_strtol_l.isra.0+0x8e>
 8004580:	2201      	movs	r2, #1
 8004582:	787c      	ldrb	r4, [r7, #1]
 8004584:	1cbd      	adds	r5, r7, #2
 8004586:	2e00      	cmp	r6, #0
 8004588:	d05d      	beq.n	8004646 <_strtol_l.isra.0+0xee>
 800458a:	2e10      	cmp	r6, #16
 800458c:	d109      	bne.n	80045a2 <_strtol_l.isra.0+0x4a>
 800458e:	2c30      	cmp	r4, #48	; 0x30
 8004590:	d107      	bne.n	80045a2 <_strtol_l.isra.0+0x4a>
 8004592:	782b      	ldrb	r3, [r5, #0]
 8004594:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004598:	2b58      	cmp	r3, #88	; 0x58
 800459a:	d14f      	bne.n	800463c <_strtol_l.isra.0+0xe4>
 800459c:	2610      	movs	r6, #16
 800459e:	786c      	ldrb	r4, [r5, #1]
 80045a0:	3502      	adds	r5, #2
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	bf14      	ite	ne
 80045a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80045aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80045ae:	2700      	movs	r7, #0
 80045b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80045b4:	4638      	mov	r0, r7
 80045b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80045ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80045be:	2b09      	cmp	r3, #9
 80045c0:	d817      	bhi.n	80045f2 <_strtol_l.isra.0+0x9a>
 80045c2:	461c      	mov	r4, r3
 80045c4:	42a6      	cmp	r6, r4
 80045c6:	dd23      	ble.n	8004610 <_strtol_l.isra.0+0xb8>
 80045c8:	1c7b      	adds	r3, r7, #1
 80045ca:	d007      	beq.n	80045dc <_strtol_l.isra.0+0x84>
 80045cc:	4584      	cmp	ip, r0
 80045ce:	d31c      	bcc.n	800460a <_strtol_l.isra.0+0xb2>
 80045d0:	d101      	bne.n	80045d6 <_strtol_l.isra.0+0x7e>
 80045d2:	45a6      	cmp	lr, r4
 80045d4:	db19      	blt.n	800460a <_strtol_l.isra.0+0xb2>
 80045d6:	2701      	movs	r7, #1
 80045d8:	fb00 4006 	mla	r0, r0, r6, r4
 80045dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045e0:	e7eb      	b.n	80045ba <_strtol_l.isra.0+0x62>
 80045e2:	462f      	mov	r7, r5
 80045e4:	e7bf      	b.n	8004566 <_strtol_l.isra.0+0xe>
 80045e6:	2c2b      	cmp	r4, #43	; 0x2b
 80045e8:	bf04      	itt	eq
 80045ea:	1cbd      	addeq	r5, r7, #2
 80045ec:	787c      	ldrbeq	r4, [r7, #1]
 80045ee:	461a      	mov	r2, r3
 80045f0:	e7c9      	b.n	8004586 <_strtol_l.isra.0+0x2e>
 80045f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80045f6:	2b19      	cmp	r3, #25
 80045f8:	d801      	bhi.n	80045fe <_strtol_l.isra.0+0xa6>
 80045fa:	3c37      	subs	r4, #55	; 0x37
 80045fc:	e7e2      	b.n	80045c4 <_strtol_l.isra.0+0x6c>
 80045fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004602:	2b19      	cmp	r3, #25
 8004604:	d804      	bhi.n	8004610 <_strtol_l.isra.0+0xb8>
 8004606:	3c57      	subs	r4, #87	; 0x57
 8004608:	e7dc      	b.n	80045c4 <_strtol_l.isra.0+0x6c>
 800460a:	f04f 37ff 	mov.w	r7, #4294967295
 800460e:	e7e5      	b.n	80045dc <_strtol_l.isra.0+0x84>
 8004610:	1c7b      	adds	r3, r7, #1
 8004612:	d108      	bne.n	8004626 <_strtol_l.isra.0+0xce>
 8004614:	2322      	movs	r3, #34	; 0x22
 8004616:	4608      	mov	r0, r1
 8004618:	f8c8 3000 	str.w	r3, [r8]
 800461c:	f1ba 0f00 	cmp.w	sl, #0
 8004620:	d107      	bne.n	8004632 <_strtol_l.isra.0+0xda>
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	b102      	cbz	r2, 800462a <_strtol_l.isra.0+0xd2>
 8004628:	4240      	negs	r0, r0
 800462a:	f1ba 0f00 	cmp.w	sl, #0
 800462e:	d0f8      	beq.n	8004622 <_strtol_l.isra.0+0xca>
 8004630:	b10f      	cbz	r7, 8004636 <_strtol_l.isra.0+0xde>
 8004632:	f105 39ff 	add.w	r9, r5, #4294967295
 8004636:	f8ca 9000 	str.w	r9, [sl]
 800463a:	e7f2      	b.n	8004622 <_strtol_l.isra.0+0xca>
 800463c:	2430      	movs	r4, #48	; 0x30
 800463e:	2e00      	cmp	r6, #0
 8004640:	d1af      	bne.n	80045a2 <_strtol_l.isra.0+0x4a>
 8004642:	2608      	movs	r6, #8
 8004644:	e7ad      	b.n	80045a2 <_strtol_l.isra.0+0x4a>
 8004646:	2c30      	cmp	r4, #48	; 0x30
 8004648:	d0a3      	beq.n	8004592 <_strtol_l.isra.0+0x3a>
 800464a:	260a      	movs	r6, #10
 800464c:	e7a9      	b.n	80045a2 <_strtol_l.isra.0+0x4a>
	...

08004650 <_strtol_r>:
 8004650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004652:	4c06      	ldr	r4, [pc, #24]	; (800466c <_strtol_r+0x1c>)
 8004654:	4d06      	ldr	r5, [pc, #24]	; (8004670 <_strtol_r+0x20>)
 8004656:	6824      	ldr	r4, [r4, #0]
 8004658:	6a24      	ldr	r4, [r4, #32]
 800465a:	2c00      	cmp	r4, #0
 800465c:	bf08      	it	eq
 800465e:	462c      	moveq	r4, r5
 8004660:	9400      	str	r4, [sp, #0]
 8004662:	f7ff ff79 	bl	8004558 <_strtol_l.isra.0>
 8004666:	b003      	add	sp, #12
 8004668:	bd30      	pop	{r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	20000350 	.word	0x20000350
 8004670:	200003b4 	.word	0x200003b4

08004674 <quorem>:
 8004674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	6903      	ldr	r3, [r0, #16]
 800467a:	690c      	ldr	r4, [r1, #16]
 800467c:	4680      	mov	r8, r0
 800467e:	42a3      	cmp	r3, r4
 8004680:	f2c0 8084 	blt.w	800478c <quorem+0x118>
 8004684:	3c01      	subs	r4, #1
 8004686:	f101 0714 	add.w	r7, r1, #20
 800468a:	f100 0614 	add.w	r6, r0, #20
 800468e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004696:	3501      	adds	r5, #1
 8004698:	fbb0 f5f5 	udiv	r5, r0, r5
 800469c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80046a0:	eb06 030c 	add.w	r3, r6, ip
 80046a4:	eb07 090c 	add.w	r9, r7, ip
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	b39d      	cbz	r5, 8004714 <quorem+0xa0>
 80046ac:	f04f 0a00 	mov.w	sl, #0
 80046b0:	4638      	mov	r0, r7
 80046b2:	46b6      	mov	lr, r6
 80046b4:	46d3      	mov	fp, sl
 80046b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80046ba:	b293      	uxth	r3, r2
 80046bc:	fb05 a303 	mla	r3, r5, r3, sl
 80046c0:	0c12      	lsrs	r2, r2, #16
 80046c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046c6:	fb05 a202 	mla	r2, r5, r2, sl
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	ebab 0303 	sub.w	r3, fp, r3
 80046d0:	f8de b000 	ldr.w	fp, [lr]
 80046d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80046d8:	fa1f fb8b 	uxth.w	fp, fp
 80046dc:	445b      	add	r3, fp
 80046de:	fa1f fb82 	uxth.w	fp, r2
 80046e2:	f8de 2000 	ldr.w	r2, [lr]
 80046e6:	4581      	cmp	r9, r0
 80046e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80046ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046f6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80046fa:	f84e 3b04 	str.w	r3, [lr], #4
 80046fe:	d2da      	bcs.n	80046b6 <quorem+0x42>
 8004700:	f856 300c 	ldr.w	r3, [r6, ip]
 8004704:	b933      	cbnz	r3, 8004714 <quorem+0xa0>
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	3b04      	subs	r3, #4
 800470a:	429e      	cmp	r6, r3
 800470c:	461a      	mov	r2, r3
 800470e:	d331      	bcc.n	8004774 <quorem+0x100>
 8004710:	f8c8 4010 	str.w	r4, [r8, #16]
 8004714:	4640      	mov	r0, r8
 8004716:	f001 fbb1 	bl	8005e7c <__mcmp>
 800471a:	2800      	cmp	r0, #0
 800471c:	db26      	blt.n	800476c <quorem+0xf8>
 800471e:	4630      	mov	r0, r6
 8004720:	f04f 0c00 	mov.w	ip, #0
 8004724:	3501      	adds	r5, #1
 8004726:	f857 1b04 	ldr.w	r1, [r7], #4
 800472a:	f8d0 e000 	ldr.w	lr, [r0]
 800472e:	b28b      	uxth	r3, r1
 8004730:	ebac 0303 	sub.w	r3, ip, r3
 8004734:	fa1f f28e 	uxth.w	r2, lr
 8004738:	4413      	add	r3, r2
 800473a:	0c0a      	lsrs	r2, r1, #16
 800473c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004744:	b29b      	uxth	r3, r3
 8004746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474a:	45b9      	cmp	r9, r7
 800474c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004750:	f840 3b04 	str.w	r3, [r0], #4
 8004754:	d2e7      	bcs.n	8004726 <quorem+0xb2>
 8004756:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800475a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800475e:	b92a      	cbnz	r2, 800476c <quorem+0xf8>
 8004760:	3b04      	subs	r3, #4
 8004762:	429e      	cmp	r6, r3
 8004764:	461a      	mov	r2, r3
 8004766:	d30b      	bcc.n	8004780 <quorem+0x10c>
 8004768:	f8c8 4010 	str.w	r4, [r8, #16]
 800476c:	4628      	mov	r0, r5
 800476e:	b003      	add	sp, #12
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	3b04      	subs	r3, #4
 8004778:	2a00      	cmp	r2, #0
 800477a:	d1c9      	bne.n	8004710 <quorem+0x9c>
 800477c:	3c01      	subs	r4, #1
 800477e:	e7c4      	b.n	800470a <quorem+0x96>
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	3b04      	subs	r3, #4
 8004784:	2a00      	cmp	r2, #0
 8004786:	d1ef      	bne.n	8004768 <quorem+0xf4>
 8004788:	3c01      	subs	r4, #1
 800478a:	e7ea      	b.n	8004762 <quorem+0xee>
 800478c:	2000      	movs	r0, #0
 800478e:	e7ee      	b.n	800476e <quorem+0xfa>

08004790 <_dtoa_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	461f      	mov	r7, r3
 8004798:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800479a:	b095      	sub	sp, #84	; 0x54
 800479c:	4604      	mov	r4, r0
 800479e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80047a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80047a6:	b93d      	cbnz	r5, 80047b8 <_dtoa_r+0x28>
 80047a8:	2010      	movs	r0, #16
 80047aa:	f001 f8e1 	bl	8005970 <malloc>
 80047ae:	6260      	str	r0, [r4, #36]	; 0x24
 80047b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047b4:	6005      	str	r5, [r0, #0]
 80047b6:	60c5      	str	r5, [r0, #12]
 80047b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	b151      	cbz	r1, 80047d4 <_dtoa_r+0x44>
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	2301      	movs	r3, #1
 80047c2:	4093      	lsls	r3, r2
 80047c4:	604a      	str	r2, [r1, #4]
 80047c6:	608b      	str	r3, [r1, #8]
 80047c8:	4620      	mov	r0, r4
 80047ca:	f001 f938 	bl	8005a3e <_Bfree>
 80047ce:	2200      	movs	r2, #0
 80047d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	1e3b      	subs	r3, r7, #0
 80047d6:	bfaf      	iteee	ge
 80047d8:	2300      	movge	r3, #0
 80047da:	2201      	movlt	r2, #1
 80047dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	9303      	strlt	r3, [sp, #12]
 80047e2:	bfac      	ite	ge
 80047e4:	f8c8 3000 	strge.w	r3, [r8]
 80047e8:	f8c8 2000 	strlt.w	r2, [r8]
 80047ec:	4bae      	ldr	r3, [pc, #696]	; (8004aa8 <_dtoa_r+0x318>)
 80047ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80047f2:	ea33 0308 	bics.w	r3, r3, r8
 80047f6:	d11b      	bne.n	8004830 <_dtoa_r+0xa0>
 80047f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80047fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	9b02      	ldr	r3, [sp, #8]
 8004802:	b923      	cbnz	r3, 800480e <_dtoa_r+0x7e>
 8004804:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004808:	2800      	cmp	r0, #0
 800480a:	f000 8545 	beq.w	8005298 <_dtoa_r+0xb08>
 800480e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004810:	b953      	cbnz	r3, 8004828 <_dtoa_r+0x98>
 8004812:	4ba6      	ldr	r3, [pc, #664]	; (8004aac <_dtoa_r+0x31c>)
 8004814:	e021      	b.n	800485a <_dtoa_r+0xca>
 8004816:	4ba6      	ldr	r3, [pc, #664]	; (8004ab0 <_dtoa_r+0x320>)
 8004818:	9306      	str	r3, [sp, #24]
 800481a:	3308      	adds	r3, #8
 800481c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	9806      	ldr	r0, [sp, #24]
 8004822:	b015      	add	sp, #84	; 0x54
 8004824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004828:	4ba0      	ldr	r3, [pc, #640]	; (8004aac <_dtoa_r+0x31c>)
 800482a:	9306      	str	r3, [sp, #24]
 800482c:	3303      	adds	r3, #3
 800482e:	e7f5      	b.n	800481c <_dtoa_r+0x8c>
 8004830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	4630      	mov	r0, r6
 800483a:	4639      	mov	r1, r7
 800483c:	f7fc f920 	bl	8000a80 <__aeabi_dcmpeq>
 8004840:	4682      	mov	sl, r0
 8004842:	b160      	cbz	r0, 800485e <_dtoa_r+0xce>
 8004844:	2301      	movs	r3, #1
 8004846:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8520 	beq.w	8005292 <_dtoa_r+0xb02>
 8004852:	4b98      	ldr	r3, [pc, #608]	; (8004ab4 <_dtoa_r+0x324>)
 8004854:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	9306      	str	r3, [sp, #24]
 800485c:	e7e0      	b.n	8004820 <_dtoa_r+0x90>
 800485e:	ab12      	add	r3, sp, #72	; 0x48
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	ab13      	add	r3, sp, #76	; 0x4c
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	4632      	mov	r2, r6
 8004868:	463b      	mov	r3, r7
 800486a:	4620      	mov	r0, r4
 800486c:	f001 fbf4 	bl	8006058 <__d2b>
 8004870:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004874:	4683      	mov	fp, r0
 8004876:	2d00      	cmp	r5, #0
 8004878:	d07d      	beq.n	8004976 <_dtoa_r+0x1e6>
 800487a:	46b0      	mov	r8, r6
 800487c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004880:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004884:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004888:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800488c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004890:	2200      	movs	r2, #0
 8004892:	4b89      	ldr	r3, [pc, #548]	; (8004ab8 <_dtoa_r+0x328>)
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fb fcd2 	bl	8000240 <__aeabi_dsub>
 800489c:	a37c      	add	r3, pc, #496	; (adr r3, 8004a90 <_dtoa_r+0x300>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fe85 	bl	80005b0 <__aeabi_dmul>
 80048a6:	a37c      	add	r3, pc, #496	; (adr r3, 8004a98 <_dtoa_r+0x308>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fcca 	bl	8000244 <__adddf3>
 80048b0:	4606      	mov	r6, r0
 80048b2:	4628      	mov	r0, r5
 80048b4:	460f      	mov	r7, r1
 80048b6:	f7fb fe11 	bl	80004dc <__aeabi_i2d>
 80048ba:	a379      	add	r3, pc, #484	; (adr r3, 8004aa0 <_dtoa_r+0x310>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fe76 	bl	80005b0 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fb fcba 	bl	8000244 <__adddf3>
 80048d0:	4606      	mov	r6, r0
 80048d2:	460f      	mov	r7, r1
 80048d4:	f7fc f91c 	bl	8000b10 <__aeabi_d2iz>
 80048d8:	2200      	movs	r2, #0
 80048da:	4682      	mov	sl, r0
 80048dc:	2300      	movs	r3, #0
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fc f8d7 	bl	8000a94 <__aeabi_dcmplt>
 80048e6:	b148      	cbz	r0, 80048fc <_dtoa_r+0x16c>
 80048e8:	4650      	mov	r0, sl
 80048ea:	f7fb fdf7 	bl	80004dc <__aeabi_i2d>
 80048ee:	4632      	mov	r2, r6
 80048f0:	463b      	mov	r3, r7
 80048f2:	f7fc f8c5 	bl	8000a80 <__aeabi_dcmpeq>
 80048f6:	b908      	cbnz	r0, 80048fc <_dtoa_r+0x16c>
 80048f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048fc:	f1ba 0f16 	cmp.w	sl, #22
 8004900:	d85a      	bhi.n	80049b8 <_dtoa_r+0x228>
 8004902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004906:	496d      	ldr	r1, [pc, #436]	; (8004abc <_dtoa_r+0x32c>)
 8004908:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800490c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004910:	f7fc f8de 	bl	8000ad0 <__aeabi_dcmpgt>
 8004914:	2800      	cmp	r0, #0
 8004916:	d051      	beq.n	80049bc <_dtoa_r+0x22c>
 8004918:	2300      	movs	r3, #0
 800491a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800491e:	930d      	str	r3, [sp, #52]	; 0x34
 8004920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004922:	1b5d      	subs	r5, r3, r5
 8004924:	1e6b      	subs	r3, r5, #1
 8004926:	9307      	str	r3, [sp, #28]
 8004928:	bf43      	ittte	mi
 800492a:	2300      	movmi	r3, #0
 800492c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004930:	9307      	strmi	r3, [sp, #28]
 8004932:	f04f 0900 	movpl.w	r9, #0
 8004936:	f1ba 0f00 	cmp.w	sl, #0
 800493a:	db41      	blt.n	80049c0 <_dtoa_r+0x230>
 800493c:	9b07      	ldr	r3, [sp, #28]
 800493e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004942:	4453      	add	r3, sl
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	2300      	movs	r3, #0
 8004948:	9308      	str	r3, [sp, #32]
 800494a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800494c:	2b09      	cmp	r3, #9
 800494e:	f200 808f 	bhi.w	8004a70 <_dtoa_r+0x2e0>
 8004952:	2b05      	cmp	r3, #5
 8004954:	bfc4      	itt	gt
 8004956:	3b04      	subgt	r3, #4
 8004958:	931e      	strgt	r3, [sp, #120]	; 0x78
 800495a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800495c:	bfc8      	it	gt
 800495e:	2500      	movgt	r5, #0
 8004960:	f1a3 0302 	sub.w	r3, r3, #2
 8004964:	bfd8      	it	le
 8004966:	2501      	movle	r5, #1
 8004968:	2b03      	cmp	r3, #3
 800496a:	f200 808d 	bhi.w	8004a88 <_dtoa_r+0x2f8>
 800496e:	e8df f003 	tbb	[pc, r3]
 8004972:	7d7b      	.short	0x7d7b
 8004974:	6f2f      	.short	0x6f2f
 8004976:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800497a:	441d      	add	r5, r3
 800497c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004980:	2820      	cmp	r0, #32
 8004982:	dd13      	ble.n	80049ac <_dtoa_r+0x21c>
 8004984:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004988:	9b02      	ldr	r3, [sp, #8]
 800498a:	fa08 f800 	lsl.w	r8, r8, r0
 800498e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004992:	fa23 f000 	lsr.w	r0, r3, r0
 8004996:	ea48 0000 	orr.w	r0, r8, r0
 800499a:	f7fb fd8f 	bl	80004bc <__aeabi_ui2d>
 800499e:	2301      	movs	r3, #1
 80049a0:	4680      	mov	r8, r0
 80049a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80049a6:	3d01      	subs	r5, #1
 80049a8:	9310      	str	r3, [sp, #64]	; 0x40
 80049aa:	e771      	b.n	8004890 <_dtoa_r+0x100>
 80049ac:	9b02      	ldr	r3, [sp, #8]
 80049ae:	f1c0 0020 	rsb	r0, r0, #32
 80049b2:	fa03 f000 	lsl.w	r0, r3, r0
 80049b6:	e7f0      	b.n	800499a <_dtoa_r+0x20a>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e7b0      	b.n	800491e <_dtoa_r+0x18e>
 80049bc:	900d      	str	r0, [sp, #52]	; 0x34
 80049be:	e7af      	b.n	8004920 <_dtoa_r+0x190>
 80049c0:	f1ca 0300 	rsb	r3, sl, #0
 80049c4:	9308      	str	r3, [sp, #32]
 80049c6:	2300      	movs	r3, #0
 80049c8:	eba9 090a 	sub.w	r9, r9, sl
 80049cc:	930c      	str	r3, [sp, #48]	; 0x30
 80049ce:	e7bc      	b.n	800494a <_dtoa_r+0x1ba>
 80049d0:	2301      	movs	r3, #1
 80049d2:	9309      	str	r3, [sp, #36]	; 0x24
 80049d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd74      	ble.n	8004ac4 <_dtoa_r+0x334>
 80049da:	4698      	mov	r8, r3
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	2200      	movs	r2, #0
 80049e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80049e2:	6072      	str	r2, [r6, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	f102 0014 	add.w	r0, r2, #20
 80049ea:	4298      	cmp	r0, r3
 80049ec:	6871      	ldr	r1, [r6, #4]
 80049ee:	d96e      	bls.n	8004ace <_dtoa_r+0x33e>
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 fff0 	bl	80059d6 <_Balloc>
 80049f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f8:	6030      	str	r0, [r6, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b8 0f0e 	cmp.w	r8, #14
 8004a00:	9306      	str	r3, [sp, #24]
 8004a02:	f200 80ed 	bhi.w	8004be0 <_dtoa_r+0x450>
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	f000 80ea 	beq.w	8004be0 <_dtoa_r+0x450>
 8004a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a10:	f1ba 0f00 	cmp.w	sl, #0
 8004a14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004a18:	dd77      	ble.n	8004b0a <_dtoa_r+0x37a>
 8004a1a:	4a28      	ldr	r2, [pc, #160]	; (8004abc <_dtoa_r+0x32c>)
 8004a1c:	f00a 030f 	and.w	r3, sl, #15
 8004a20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004a24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a28:	06f0      	lsls	r0, r6, #27
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004a32:	d568      	bpl.n	8004b06 <_dtoa_r+0x376>
 8004a34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004a38:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <_dtoa_r+0x330>)
 8004a3a:	2503      	movs	r5, #3
 8004a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a40:	f7fb fee0 	bl	8000804 <__aeabi_ddiv>
 8004a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a48:	f006 060f 	and.w	r6, r6, #15
 8004a4c:	4f1c      	ldr	r7, [pc, #112]	; (8004ac0 <_dtoa_r+0x330>)
 8004a4e:	e04f      	b.n	8004af0 <_dtoa_r+0x360>
 8004a50:	2301      	movs	r3, #1
 8004a52:	9309      	str	r3, [sp, #36]	; 0x24
 8004a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a56:	4453      	add	r3, sl
 8004a58:	f103 0801 	add.w	r8, r3, #1
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	4643      	mov	r3, r8
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	bfb8      	it	lt
 8004a64:	2301      	movlt	r3, #1
 8004a66:	e7ba      	b.n	80049de <_dtoa_r+0x24e>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e7b2      	b.n	80049d2 <_dtoa_r+0x242>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e7f0      	b.n	8004a52 <_dtoa_r+0x2c2>
 8004a70:	2501      	movs	r5, #1
 8004a72:	2300      	movs	r3, #0
 8004a74:	9509      	str	r5, [sp, #36]	; 0x24
 8004a76:	931e      	str	r3, [sp, #120]	; 0x78
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	9304      	str	r3, [sp, #16]
 8004a80:	4698      	mov	r8, r3
 8004a82:	2312      	movs	r3, #18
 8004a84:	921f      	str	r2, [sp, #124]	; 0x7c
 8004a86:	e7aa      	b.n	80049de <_dtoa_r+0x24e>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8c:	e7f4      	b.n	8004a78 <_dtoa_r+0x2e8>
 8004a8e:	bf00      	nop
 8004a90:	636f4361 	.word	0x636f4361
 8004a94:	3fd287a7 	.word	0x3fd287a7
 8004a98:	8b60c8b3 	.word	0x8b60c8b3
 8004a9c:	3fc68a28 	.word	0x3fc68a28
 8004aa0:	509f79fb 	.word	0x509f79fb
 8004aa4:	3fd34413 	.word	0x3fd34413
 8004aa8:	7ff00000 	.word	0x7ff00000
 8004aac:	08006799 	.word	0x08006799
 8004ab0:	08006790 	.word	0x08006790
 8004ab4:	08006715 	.word	0x08006715
 8004ab8:	3ff80000 	.word	0x3ff80000
 8004abc:	080067d0 	.word	0x080067d0
 8004ac0:	080067a8 	.word	0x080067a8
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	4698      	mov	r8, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	e7da      	b.n	8004a84 <_dtoa_r+0x2f4>
 8004ace:	3101      	adds	r1, #1
 8004ad0:	6071      	str	r1, [r6, #4]
 8004ad2:	0052      	lsls	r2, r2, #1
 8004ad4:	e787      	b.n	80049e6 <_dtoa_r+0x256>
 8004ad6:	07f1      	lsls	r1, r6, #31
 8004ad8:	d508      	bpl.n	8004aec <_dtoa_r+0x35c>
 8004ada:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae2:	f7fb fd65 	bl	80005b0 <__aeabi_dmul>
 8004ae6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004aea:	3501      	adds	r5, #1
 8004aec:	1076      	asrs	r6, r6, #1
 8004aee:	3708      	adds	r7, #8
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	d1f0      	bne.n	8004ad6 <_dtoa_r+0x346>
 8004af4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afc:	f7fb fe82 	bl	8000804 <__aeabi_ddiv>
 8004b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b04:	e01b      	b.n	8004b3e <_dtoa_r+0x3ae>
 8004b06:	2502      	movs	r5, #2
 8004b08:	e7a0      	b.n	8004a4c <_dtoa_r+0x2bc>
 8004b0a:	f000 80a4 	beq.w	8004c56 <_dtoa_r+0x4c6>
 8004b0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b12:	f1ca 0600 	rsb	r6, sl, #0
 8004b16:	4ba0      	ldr	r3, [pc, #640]	; (8004d98 <_dtoa_r+0x608>)
 8004b18:	f006 020f 	and.w	r2, r6, #15
 8004b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fd44 	bl	80005b0 <__aeabi_dmul>
 8004b28:	2502      	movs	r5, #2
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b30:	4f9a      	ldr	r7, [pc, #616]	; (8004d9c <_dtoa_r+0x60c>)
 8004b32:	1136      	asrs	r6, r6, #4
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	f040 8083 	bne.w	8004c40 <_dtoa_r+0x4b0>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e0      	bne.n	8004b00 <_dtoa_r+0x370>
 8004b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 808a 	beq.w	8004c5a <_dtoa_r+0x4ca>
 8004b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b52:	2200      	movs	r2, #0
 8004b54:	4b92      	ldr	r3, [pc, #584]	; (8004da0 <_dtoa_r+0x610>)
 8004b56:	f7fb ff9d 	bl	8000a94 <__aeabi_dcmplt>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d07d      	beq.n	8004c5a <_dtoa_r+0x4ca>
 8004b5e:	f1b8 0f00 	cmp.w	r8, #0
 8004b62:	d07a      	beq.n	8004c5a <_dtoa_r+0x4ca>
 8004b64:	9b04      	ldr	r3, [sp, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dd36      	ble.n	8004bd8 <_dtoa_r+0x448>
 8004b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4b8c      	ldr	r3, [pc, #560]	; (8004da4 <_dtoa_r+0x614>)
 8004b72:	f7fb fd1d 	bl	80005b0 <__aeabi_dmul>
 8004b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b7a:	9e04      	ldr	r6, [sp, #16]
 8004b7c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004b80:	3501      	adds	r5, #1
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fb fcaa 	bl	80004dc <__aeabi_i2d>
 8004b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b8c:	f7fb fd10 	bl	80005b0 <__aeabi_dmul>
 8004b90:	2200      	movs	r2, #0
 8004b92:	4b85      	ldr	r3, [pc, #532]	; (8004da8 <_dtoa_r+0x618>)
 8004b94:	f7fb fb56 	bl	8000244 <__adddf3>
 8004b98:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004b9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ba0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ba2:	2e00      	cmp	r6, #0
 8004ba4:	d15c      	bne.n	8004c60 <_dtoa_r+0x4d0>
 8004ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	4b7f      	ldr	r3, [pc, #508]	; (8004dac <_dtoa_r+0x61c>)
 8004bae:	f7fb fb47 	bl	8000240 <__aeabi_dsub>
 8004bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bba:	f7fb ff89 	bl	8000ad0 <__aeabi_dcmpgt>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 8281 	bne.w	80050c6 <_dtoa_r+0x936>
 8004bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004bce:	f7fb ff61 	bl	8000a94 <__aeabi_dcmplt>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f040 8275 	bne.w	80050c2 <_dtoa_r+0x932>
 8004bd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f2c0 814b 	blt.w	8004e7e <_dtoa_r+0x6ee>
 8004be8:	f1ba 0f0e 	cmp.w	sl, #14
 8004bec:	f300 8147 	bgt.w	8004e7e <_dtoa_r+0x6ee>
 8004bf0:	4b69      	ldr	r3, [pc, #420]	; (8004d98 <_dtoa_r+0x608>)
 8004bf2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f280 80d7 	bge.w	8004db4 <_dtoa_r+0x624>
 8004c06:	f1b8 0f00 	cmp.w	r8, #0
 8004c0a:	f300 80d3 	bgt.w	8004db4 <_dtoa_r+0x624>
 8004c0e:	f040 8257 	bne.w	80050c0 <_dtoa_r+0x930>
 8004c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c16:	2200      	movs	r2, #0
 8004c18:	4b64      	ldr	r3, [pc, #400]	; (8004dac <_dtoa_r+0x61c>)
 8004c1a:	f7fb fcc9 	bl	80005b0 <__aeabi_dmul>
 8004c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c22:	f7fb ff4b 	bl	8000abc <__aeabi_dcmpge>
 8004c26:	4646      	mov	r6, r8
 8004c28:	4647      	mov	r7, r8
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 822d 	bne.w	800508a <_dtoa_r+0x8fa>
 8004c30:	9b06      	ldr	r3, [sp, #24]
 8004c32:	9a06      	ldr	r2, [sp, #24]
 8004c34:	1c5d      	adds	r5, r3, #1
 8004c36:	2331      	movs	r3, #49	; 0x31
 8004c38:	f10a 0a01 	add.w	sl, sl, #1
 8004c3c:	7013      	strb	r3, [r2, #0]
 8004c3e:	e228      	b.n	8005092 <_dtoa_r+0x902>
 8004c40:	07f2      	lsls	r2, r6, #31
 8004c42:	d505      	bpl.n	8004c50 <_dtoa_r+0x4c0>
 8004c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c48:	f7fb fcb2 	bl	80005b0 <__aeabi_dmul>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	3501      	adds	r5, #1
 8004c50:	1076      	asrs	r6, r6, #1
 8004c52:	3708      	adds	r7, #8
 8004c54:	e76e      	b.n	8004b34 <_dtoa_r+0x3a4>
 8004c56:	2502      	movs	r5, #2
 8004c58:	e771      	b.n	8004b3e <_dtoa_r+0x3ae>
 8004c5a:	4657      	mov	r7, sl
 8004c5c:	4646      	mov	r6, r8
 8004c5e:	e790      	b.n	8004b82 <_dtoa_r+0x3f2>
 8004c60:	4b4d      	ldr	r3, [pc, #308]	; (8004d98 <_dtoa_r+0x608>)
 8004c62:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c66:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d048      	beq.n	8004d02 <_dtoa_r+0x572>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	2000      	movs	r0, #0
 8004c76:	494e      	ldr	r1, [pc, #312]	; (8004db0 <_dtoa_r+0x620>)
 8004c78:	f7fb fdc4 	bl	8000804 <__aeabi_ddiv>
 8004c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c80:	f7fb fade 	bl	8000240 <__aeabi_dsub>
 8004c84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c88:	9d06      	ldr	r5, [sp, #24]
 8004c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c8e:	f7fb ff3f 	bl	8000b10 <__aeabi_d2iz>
 8004c92:	9011      	str	r0, [sp, #68]	; 0x44
 8004c94:	f7fb fc22 	bl	80004dc <__aeabi_i2d>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ca0:	f7fb face 	bl	8000240 <__aeabi_dsub>
 8004ca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004caa:	3330      	adds	r3, #48	; 0x30
 8004cac:	f805 3b01 	strb.w	r3, [r5], #1
 8004cb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cb4:	f7fb feee 	bl	8000a94 <__aeabi_dcmplt>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d163      	bne.n	8004d84 <_dtoa_r+0x5f4>
 8004cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	4937      	ldr	r1, [pc, #220]	; (8004da0 <_dtoa_r+0x610>)
 8004cc4:	f7fb fabc 	bl	8000240 <__aeabi_dsub>
 8004cc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ccc:	f7fb fee2 	bl	8000a94 <__aeabi_dcmplt>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	f040 80b5 	bne.w	8004e40 <_dtoa_r+0x6b0>
 8004cd6:	9b06      	ldr	r3, [sp, #24]
 8004cd8:	1aeb      	subs	r3, r5, r3
 8004cda:	429e      	cmp	r6, r3
 8004cdc:	f77f af7c 	ble.w	8004bd8 <_dtoa_r+0x448>
 8004ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <_dtoa_r+0x614>)
 8004ce8:	f7fb fc62 	bl	80005b0 <__aeabi_dmul>
 8004cec:	2200      	movs	r2, #0
 8004cee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf6:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <_dtoa_r+0x614>)
 8004cf8:	f7fb fc5a 	bl	80005b0 <__aeabi_dmul>
 8004cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d00:	e7c3      	b.n	8004c8a <_dtoa_r+0x4fa>
 8004d02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d06:	f7fb fc53 	bl	80005b0 <__aeabi_dmul>
 8004d0a:	9b06      	ldr	r3, [sp, #24]
 8004d0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d10:	199d      	adds	r5, r3, r6
 8004d12:	461e      	mov	r6, r3
 8004d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d18:	f7fb fefa 	bl	8000b10 <__aeabi_d2iz>
 8004d1c:	9011      	str	r0, [sp, #68]	; 0x44
 8004d1e:	f7fb fbdd 	bl	80004dc <__aeabi_i2d>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d2a:	f7fb fa89 	bl	8000240 <__aeabi_dsub>
 8004d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d34:	3330      	adds	r3, #48	; 0x30
 8004d36:	f806 3b01 	strb.w	r3, [r6], #1
 8004d3a:	42ae      	cmp	r6, r5
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	d124      	bne.n	8004d8c <_dtoa_r+0x5fc>
 8004d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <_dtoa_r+0x620>)
 8004d48:	f7fb fa7c 	bl	8000244 <__adddf3>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d54:	f7fb febc 	bl	8000ad0 <__aeabi_dcmpgt>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d171      	bne.n	8004e40 <_dtoa_r+0x6b0>
 8004d5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d60:	2000      	movs	r0, #0
 8004d62:	4913      	ldr	r1, [pc, #76]	; (8004db0 <_dtoa_r+0x620>)
 8004d64:	f7fb fa6c 	bl	8000240 <__aeabi_dsub>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d70:	f7fb fe90 	bl	8000a94 <__aeabi_dcmplt>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f43f af2f 	beq.w	8004bd8 <_dtoa_r+0x448>
 8004d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d7e:	1e6a      	subs	r2, r5, #1
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d001      	beq.n	8004d88 <_dtoa_r+0x5f8>
 8004d84:	46ba      	mov	sl, r7
 8004d86:	e04a      	b.n	8004e1e <_dtoa_r+0x68e>
 8004d88:	4615      	mov	r5, r2
 8004d8a:	e7f6      	b.n	8004d7a <_dtoa_r+0x5ea>
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_dtoa_r+0x614>)
 8004d8e:	f7fb fc0f 	bl	80005b0 <__aeabi_dmul>
 8004d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d96:	e7bd      	b.n	8004d14 <_dtoa_r+0x584>
 8004d98:	080067d0 	.word	0x080067d0
 8004d9c:	080067a8 	.word	0x080067a8
 8004da0:	3ff00000 	.word	0x3ff00000
 8004da4:	40240000 	.word	0x40240000
 8004da8:	401c0000 	.word	0x401c0000
 8004dac:	40140000 	.word	0x40140000
 8004db0:	3fe00000 	.word	0x3fe00000
 8004db4:	9d06      	ldr	r5, [sp, #24]
 8004db6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fd1f 	bl	8000804 <__aeabi_ddiv>
 8004dc6:	f7fb fea3 	bl	8000b10 <__aeabi_d2iz>
 8004dca:	4681      	mov	r9, r0
 8004dcc:	f7fb fb86 	bl	80004dc <__aeabi_i2d>
 8004dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd4:	f7fb fbec 	bl	80005b0 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fa2e 	bl	8000240 <__aeabi_dsub>
 8004de4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004de8:	f805 6b01 	strb.w	r6, [r5], #1
 8004dec:	9e06      	ldr	r6, [sp, #24]
 8004dee:	4602      	mov	r2, r0
 8004df0:	1bae      	subs	r6, r5, r6
 8004df2:	45b0      	cmp	r8, r6
 8004df4:	460b      	mov	r3, r1
 8004df6:	d135      	bne.n	8004e64 <_dtoa_r+0x6d4>
 8004df8:	f7fb fa24 	bl	8000244 <__adddf3>
 8004dfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e00:	4606      	mov	r6, r0
 8004e02:	460f      	mov	r7, r1
 8004e04:	f7fb fe64 	bl	8000ad0 <__aeabi_dcmpgt>
 8004e08:	b9c8      	cbnz	r0, 8004e3e <_dtoa_r+0x6ae>
 8004e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4639      	mov	r1, r7
 8004e12:	f7fb fe35 	bl	8000a80 <__aeabi_dcmpeq>
 8004e16:	b110      	cbz	r0, 8004e1e <_dtoa_r+0x68e>
 8004e18:	f019 0f01 	tst.w	r9, #1
 8004e1c:	d10f      	bne.n	8004e3e <_dtoa_r+0x6ae>
 8004e1e:	4659      	mov	r1, fp
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fe0c 	bl	8005a3e <_Bfree>
 8004e26:	2300      	movs	r3, #0
 8004e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e2a:	702b      	strb	r3, [r5, #0]
 8004e2c:	f10a 0301 	add.w	r3, sl, #1
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f43f acf3 	beq.w	8004820 <_dtoa_r+0x90>
 8004e3a:	601d      	str	r5, [r3, #0]
 8004e3c:	e4f0      	b.n	8004820 <_dtoa_r+0x90>
 8004e3e:	4657      	mov	r7, sl
 8004e40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e44:	1e6b      	subs	r3, r5, #1
 8004e46:	2a39      	cmp	r2, #57	; 0x39
 8004e48:	d106      	bne.n	8004e58 <_dtoa_r+0x6c8>
 8004e4a:	9a06      	ldr	r2, [sp, #24]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <_dtoa_r+0x6d0>
 8004e50:	2330      	movs	r3, #48	; 0x30
 8004e52:	7013      	strb	r3, [r2, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	3701      	adds	r7, #1
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	3201      	adds	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e791      	b.n	8004d84 <_dtoa_r+0x5f4>
 8004e60:	461d      	mov	r5, r3
 8004e62:	e7ed      	b.n	8004e40 <_dtoa_r+0x6b0>
 8004e64:	2200      	movs	r2, #0
 8004e66:	4b99      	ldr	r3, [pc, #612]	; (80050cc <_dtoa_r+0x93c>)
 8004e68:	f7fb fba2 	bl	80005b0 <__aeabi_dmul>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4606      	mov	r6, r0
 8004e72:	460f      	mov	r7, r1
 8004e74:	f7fb fe04 	bl	8000a80 <__aeabi_dcmpeq>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d09e      	beq.n	8004dba <_dtoa_r+0x62a>
 8004e7c:	e7cf      	b.n	8004e1e <_dtoa_r+0x68e>
 8004e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	f000 8088 	beq.w	8004f96 <_dtoa_r+0x806>
 8004e86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e88:	2a01      	cmp	r2, #1
 8004e8a:	dc6d      	bgt.n	8004f68 <_dtoa_r+0x7d8>
 8004e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d066      	beq.n	8004f60 <_dtoa_r+0x7d0>
 8004e92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e96:	464d      	mov	r5, r9
 8004e98:	9e08      	ldr	r6, [sp, #32]
 8004e9a:	9a07      	ldr	r2, [sp, #28]
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	441a      	add	r2, r3
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4499      	add	r9, r3
 8004ea4:	9207      	str	r2, [sp, #28]
 8004ea6:	f000 fea8 	bl	8005bfa <__i2b>
 8004eaa:	4607      	mov	r7, r0
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	dd0b      	ble.n	8004ec8 <_dtoa_r+0x738>
 8004eb0:	9b07      	ldr	r3, [sp, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	dd08      	ble.n	8004ec8 <_dtoa_r+0x738>
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	bfa8      	it	ge
 8004eba:	462b      	movge	r3, r5
 8004ebc:	9a07      	ldr	r2, [sp, #28]
 8004ebe:	eba9 0903 	sub.w	r9, r9, r3
 8004ec2:	1aed      	subs	r5, r5, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	9307      	str	r3, [sp, #28]
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	b1eb      	cbz	r3, 8004f08 <_dtoa_r+0x778>
 8004ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d065      	beq.n	8004f9e <_dtoa_r+0x80e>
 8004ed2:	b18e      	cbz	r6, 8004ef8 <_dtoa_r+0x768>
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 ff2d 	bl	8005d38 <__pow5mult>
 8004ede:	465a      	mov	r2, fp
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4607      	mov	r7, r0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fe91 	bl	8005c0c <__multiply>
 8004eea:	4659      	mov	r1, fp
 8004eec:	900a      	str	r0, [sp, #40]	; 0x28
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 fda5 	bl	8005a3e <_Bfree>
 8004ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef6:	469b      	mov	fp, r3
 8004ef8:	9b08      	ldr	r3, [sp, #32]
 8004efa:	1b9a      	subs	r2, r3, r6
 8004efc:	d004      	beq.n	8004f08 <_dtoa_r+0x778>
 8004efe:	4659      	mov	r1, fp
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 ff19 	bl	8005d38 <__pow5mult>
 8004f06:	4683      	mov	fp, r0
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 fe75 	bl	8005bfa <__i2b>
 8004f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f12:	4606      	mov	r6, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 81c6 	beq.w	80052a6 <_dtoa_r+0xb16>
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4601      	mov	r1, r0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 ff0a 	bl	8005d38 <__pow5mult>
 8004f24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f26:	4606      	mov	r6, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	dc3e      	bgt.n	8004faa <_dtoa_r+0x81a>
 8004f2c:	9b02      	ldr	r3, [sp, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d137      	bne.n	8004fa2 <_dtoa_r+0x812>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d134      	bne.n	8004fa6 <_dtoa_r+0x816>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f42:	0d1b      	lsrs	r3, r3, #20
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	b12b      	cbz	r3, 8004f54 <_dtoa_r+0x7c4>
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	f109 0901 	add.w	r9, r9, #1
 8004f4e:	3301      	adds	r3, #1
 8004f50:	9307      	str	r3, [sp, #28]
 8004f52:	2301      	movs	r3, #1
 8004f54:	9308      	str	r3, [sp, #32]
 8004f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d128      	bne.n	8004fae <_dtoa_r+0x81e>
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	e02e      	b.n	8004fbe <_dtoa_r+0x82e>
 8004f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f66:	e796      	b.n	8004e96 <_dtoa_r+0x706>
 8004f68:	9b08      	ldr	r3, [sp, #32]
 8004f6a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004f6e:	42b3      	cmp	r3, r6
 8004f70:	bfb7      	itett	lt
 8004f72:	9b08      	ldrlt	r3, [sp, #32]
 8004f74:	1b9e      	subge	r6, r3, r6
 8004f76:	1af2      	sublt	r2, r6, r3
 8004f78:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004f7a:	bfbf      	itttt	lt
 8004f7c:	9608      	strlt	r6, [sp, #32]
 8004f7e:	189b      	addlt	r3, r3, r2
 8004f80:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004f82:	2600      	movlt	r6, #0
 8004f84:	f1b8 0f00 	cmp.w	r8, #0
 8004f88:	bfb9      	ittee	lt
 8004f8a:	eba9 0508 	sublt.w	r5, r9, r8
 8004f8e:	2300      	movlt	r3, #0
 8004f90:	464d      	movge	r5, r9
 8004f92:	4643      	movge	r3, r8
 8004f94:	e781      	b.n	8004e9a <_dtoa_r+0x70a>
 8004f96:	9e08      	ldr	r6, [sp, #32]
 8004f98:	464d      	mov	r5, r9
 8004f9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f9c:	e786      	b.n	8004eac <_dtoa_r+0x71c>
 8004f9e:	9a08      	ldr	r2, [sp, #32]
 8004fa0:	e7ad      	b.n	8004efe <_dtoa_r+0x76e>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e7d6      	b.n	8004f54 <_dtoa_r+0x7c4>
 8004fa6:	9b02      	ldr	r3, [sp, #8]
 8004fa8:	e7d4      	b.n	8004f54 <_dtoa_r+0x7c4>
 8004faa:	2300      	movs	r3, #0
 8004fac:	9308      	str	r3, [sp, #32]
 8004fae:	6933      	ldr	r3, [r6, #16]
 8004fb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004fb4:	6918      	ldr	r0, [r3, #16]
 8004fb6:	f000 fdd2 	bl	8005b5e <__hi0bits>
 8004fba:	f1c0 0020 	rsb	r0, r0, #32
 8004fbe:	9b07      	ldr	r3, [sp, #28]
 8004fc0:	4418      	add	r0, r3
 8004fc2:	f010 001f 	ands.w	r0, r0, #31
 8004fc6:	d047      	beq.n	8005058 <_dtoa_r+0x8c8>
 8004fc8:	f1c0 0320 	rsb	r3, r0, #32
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	dd3b      	ble.n	8005048 <_dtoa_r+0x8b8>
 8004fd0:	9b07      	ldr	r3, [sp, #28]
 8004fd2:	f1c0 001c 	rsb	r0, r0, #28
 8004fd6:	4481      	add	r9, r0
 8004fd8:	4405      	add	r5, r0
 8004fda:	4403      	add	r3, r0
 8004fdc:	9307      	str	r3, [sp, #28]
 8004fde:	f1b9 0f00 	cmp.w	r9, #0
 8004fe2:	dd05      	ble.n	8004ff0 <_dtoa_r+0x860>
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	464a      	mov	r2, r9
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fef3 	bl	8005dd4 <__lshift>
 8004fee:	4683      	mov	fp, r0
 8004ff0:	9b07      	ldr	r3, [sp, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dd05      	ble.n	8005002 <_dtoa_r+0x872>
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 feea 	bl	8005dd4 <__lshift>
 8005000:	4606      	mov	r6, r0
 8005002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005004:	b353      	cbz	r3, 800505c <_dtoa_r+0x8cc>
 8005006:	4631      	mov	r1, r6
 8005008:	4658      	mov	r0, fp
 800500a:	f000 ff37 	bl	8005e7c <__mcmp>
 800500e:	2800      	cmp	r0, #0
 8005010:	da24      	bge.n	800505c <_dtoa_r+0x8cc>
 8005012:	2300      	movs	r3, #0
 8005014:	4659      	mov	r1, fp
 8005016:	220a      	movs	r2, #10
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fd27 	bl	8005a6c <__multadd>
 800501e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005020:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005024:	4683      	mov	fp, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8144 	beq.w	80052b4 <_dtoa_r+0xb24>
 800502c:	2300      	movs	r3, #0
 800502e:	4639      	mov	r1, r7
 8005030:	220a      	movs	r2, #10
 8005032:	4620      	mov	r0, r4
 8005034:	f000 fd1a 	bl	8005a6c <__multadd>
 8005038:	9b04      	ldr	r3, [sp, #16]
 800503a:	4607      	mov	r7, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	dc4d      	bgt.n	80050dc <_dtoa_r+0x94c>
 8005040:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005042:	2b02      	cmp	r3, #2
 8005044:	dd4a      	ble.n	80050dc <_dtoa_r+0x94c>
 8005046:	e011      	b.n	800506c <_dtoa_r+0x8dc>
 8005048:	d0c9      	beq.n	8004fde <_dtoa_r+0x84e>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	331c      	adds	r3, #28
 800504e:	441a      	add	r2, r3
 8005050:	4499      	add	r9, r3
 8005052:	441d      	add	r5, r3
 8005054:	4613      	mov	r3, r2
 8005056:	e7c1      	b.n	8004fdc <_dtoa_r+0x84c>
 8005058:	4603      	mov	r3, r0
 800505a:	e7f6      	b.n	800504a <_dtoa_r+0x8ba>
 800505c:	f1b8 0f00 	cmp.w	r8, #0
 8005060:	dc36      	bgt.n	80050d0 <_dtoa_r+0x940>
 8005062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005064:	2b02      	cmp	r3, #2
 8005066:	dd33      	ble.n	80050d0 <_dtoa_r+0x940>
 8005068:	f8cd 8010 	str.w	r8, [sp, #16]
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	b963      	cbnz	r3, 800508a <_dtoa_r+0x8fa>
 8005070:	4631      	mov	r1, r6
 8005072:	2205      	movs	r2, #5
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fcf9 	bl	8005a6c <__multadd>
 800507a:	4601      	mov	r1, r0
 800507c:	4606      	mov	r6, r0
 800507e:	4658      	mov	r0, fp
 8005080:	f000 fefc 	bl	8005e7c <__mcmp>
 8005084:	2800      	cmp	r0, #0
 8005086:	f73f add3 	bgt.w	8004c30 <_dtoa_r+0x4a0>
 800508a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800508c:	9d06      	ldr	r5, [sp, #24]
 800508e:	ea6f 0a03 	mvn.w	sl, r3
 8005092:	f04f 0900 	mov.w	r9, #0
 8005096:	4631      	mov	r1, r6
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fcd0 	bl	8005a3e <_Bfree>
 800509e:	2f00      	cmp	r7, #0
 80050a0:	f43f aebd 	beq.w	8004e1e <_dtoa_r+0x68e>
 80050a4:	f1b9 0f00 	cmp.w	r9, #0
 80050a8:	d005      	beq.n	80050b6 <_dtoa_r+0x926>
 80050aa:	45b9      	cmp	r9, r7
 80050ac:	d003      	beq.n	80050b6 <_dtoa_r+0x926>
 80050ae:	4649      	mov	r1, r9
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 fcc4 	bl	8005a3e <_Bfree>
 80050b6:	4639      	mov	r1, r7
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fcc0 	bl	8005a3e <_Bfree>
 80050be:	e6ae      	b.n	8004e1e <_dtoa_r+0x68e>
 80050c0:	2600      	movs	r6, #0
 80050c2:	4637      	mov	r7, r6
 80050c4:	e7e1      	b.n	800508a <_dtoa_r+0x8fa>
 80050c6:	46ba      	mov	sl, r7
 80050c8:	4637      	mov	r7, r6
 80050ca:	e5b1      	b.n	8004c30 <_dtoa_r+0x4a0>
 80050cc:	40240000 	.word	0x40240000
 80050d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80f3 	beq.w	80052c2 <_dtoa_r+0xb32>
 80050dc:	2d00      	cmp	r5, #0
 80050de:	dd05      	ble.n	80050ec <_dtoa_r+0x95c>
 80050e0:	4639      	mov	r1, r7
 80050e2:	462a      	mov	r2, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fe75 	bl	8005dd4 <__lshift>
 80050ea:	4607      	mov	r7, r0
 80050ec:	9b08      	ldr	r3, [sp, #32]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04c      	beq.n	800518c <_dtoa_r+0x9fc>
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 fc6e 	bl	80059d6 <_Balloc>
 80050fa:	4605      	mov	r5, r0
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	f107 010c 	add.w	r1, r7, #12
 8005102:	3202      	adds	r2, #2
 8005104:	0092      	lsls	r2, r2, #2
 8005106:	300c      	adds	r0, #12
 8005108:	f000 fc5a 	bl	80059c0 <memcpy>
 800510c:	2201      	movs	r2, #1
 800510e:	4629      	mov	r1, r5
 8005110:	4620      	mov	r0, r4
 8005112:	f000 fe5f 	bl	8005dd4 <__lshift>
 8005116:	46b9      	mov	r9, r7
 8005118:	4607      	mov	r7, r0
 800511a:	9b06      	ldr	r3, [sp, #24]
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	9b02      	ldr	r3, [sp, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	4631      	mov	r1, r6
 8005128:	4658      	mov	r0, fp
 800512a:	f7ff faa3 	bl	8004674 <quorem>
 800512e:	4649      	mov	r1, r9
 8005130:	4605      	mov	r5, r0
 8005132:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005136:	4658      	mov	r0, fp
 8005138:	f000 fea0 	bl	8005e7c <__mcmp>
 800513c:	463a      	mov	r2, r7
 800513e:	9002      	str	r0, [sp, #8]
 8005140:	4631      	mov	r1, r6
 8005142:	4620      	mov	r0, r4
 8005144:	f000 feb4 	bl	8005eb0 <__mdiff>
 8005148:	68c3      	ldr	r3, [r0, #12]
 800514a:	4602      	mov	r2, r0
 800514c:	bb03      	cbnz	r3, 8005190 <_dtoa_r+0xa00>
 800514e:	4601      	mov	r1, r0
 8005150:	9009      	str	r0, [sp, #36]	; 0x24
 8005152:	4658      	mov	r0, fp
 8005154:	f000 fe92 	bl	8005e7c <__mcmp>
 8005158:	4603      	mov	r3, r0
 800515a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800515c:	4611      	mov	r1, r2
 800515e:	4620      	mov	r0, r4
 8005160:	9309      	str	r3, [sp, #36]	; 0x24
 8005162:	f000 fc6c 	bl	8005a3e <_Bfree>
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	b9a3      	cbnz	r3, 8005194 <_dtoa_r+0xa04>
 800516a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800516c:	b992      	cbnz	r2, 8005194 <_dtoa_r+0xa04>
 800516e:	9a08      	ldr	r2, [sp, #32]
 8005170:	b982      	cbnz	r2, 8005194 <_dtoa_r+0xa04>
 8005172:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005176:	d029      	beq.n	80051cc <_dtoa_r+0xa3c>
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd01      	ble.n	8005182 <_dtoa_r+0x9f2>
 800517e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005182:	9b07      	ldr	r3, [sp, #28]
 8005184:	1c5d      	adds	r5, r3, #1
 8005186:	f883 8000 	strb.w	r8, [r3]
 800518a:	e784      	b.n	8005096 <_dtoa_r+0x906>
 800518c:	4638      	mov	r0, r7
 800518e:	e7c2      	b.n	8005116 <_dtoa_r+0x986>
 8005190:	2301      	movs	r3, #1
 8005192:	e7e3      	b.n	800515c <_dtoa_r+0x9cc>
 8005194:	9a02      	ldr	r2, [sp, #8]
 8005196:	2a00      	cmp	r2, #0
 8005198:	db04      	blt.n	80051a4 <_dtoa_r+0xa14>
 800519a:	d123      	bne.n	80051e4 <_dtoa_r+0xa54>
 800519c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800519e:	bb0a      	cbnz	r2, 80051e4 <_dtoa_r+0xa54>
 80051a0:	9a08      	ldr	r2, [sp, #32]
 80051a2:	b9fa      	cbnz	r2, 80051e4 <_dtoa_r+0xa54>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	ddec      	ble.n	8005182 <_dtoa_r+0x9f2>
 80051a8:	4659      	mov	r1, fp
 80051aa:	2201      	movs	r2, #1
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 fe11 	bl	8005dd4 <__lshift>
 80051b2:	4631      	mov	r1, r6
 80051b4:	4683      	mov	fp, r0
 80051b6:	f000 fe61 	bl	8005e7c <__mcmp>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	dc03      	bgt.n	80051c6 <_dtoa_r+0xa36>
 80051be:	d1e0      	bne.n	8005182 <_dtoa_r+0x9f2>
 80051c0:	f018 0f01 	tst.w	r8, #1
 80051c4:	d0dd      	beq.n	8005182 <_dtoa_r+0x9f2>
 80051c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051ca:	d1d8      	bne.n	800517e <_dtoa_r+0x9ee>
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	9a07      	ldr	r2, [sp, #28]
 80051d0:	1c5d      	adds	r5, r3, #1
 80051d2:	2339      	movs	r3, #57	; 0x39
 80051d4:	7013      	strb	r3, [r2, #0]
 80051d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051da:	1e6a      	subs	r2, r5, #1
 80051dc:	2b39      	cmp	r3, #57	; 0x39
 80051de:	d04d      	beq.n	800527c <_dtoa_r+0xaec>
 80051e0:	3301      	adds	r3, #1
 80051e2:	e052      	b.n	800528a <_dtoa_r+0xafa>
 80051e4:	9a07      	ldr	r2, [sp, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f102 0501 	add.w	r5, r2, #1
 80051ec:	dd06      	ble.n	80051fc <_dtoa_r+0xa6c>
 80051ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051f2:	d0eb      	beq.n	80051cc <_dtoa_r+0xa3c>
 80051f4:	f108 0801 	add.w	r8, r8, #1
 80051f8:	9b07      	ldr	r3, [sp, #28]
 80051fa:	e7c4      	b.n	8005186 <_dtoa_r+0x9f6>
 80051fc:	9b06      	ldr	r3, [sp, #24]
 80051fe:	9a04      	ldr	r2, [sp, #16]
 8005200:	1aeb      	subs	r3, r5, r3
 8005202:	4293      	cmp	r3, r2
 8005204:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005208:	d021      	beq.n	800524e <_dtoa_r+0xabe>
 800520a:	4659      	mov	r1, fp
 800520c:	2300      	movs	r3, #0
 800520e:	220a      	movs	r2, #10
 8005210:	4620      	mov	r0, r4
 8005212:	f000 fc2b 	bl	8005a6c <__multadd>
 8005216:	45b9      	cmp	r9, r7
 8005218:	4683      	mov	fp, r0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f04f 020a 	mov.w	r2, #10
 8005222:	4649      	mov	r1, r9
 8005224:	4620      	mov	r0, r4
 8005226:	d105      	bne.n	8005234 <_dtoa_r+0xaa4>
 8005228:	f000 fc20 	bl	8005a6c <__multadd>
 800522c:	4681      	mov	r9, r0
 800522e:	4607      	mov	r7, r0
 8005230:	9507      	str	r5, [sp, #28]
 8005232:	e778      	b.n	8005126 <_dtoa_r+0x996>
 8005234:	f000 fc1a 	bl	8005a6c <__multadd>
 8005238:	4639      	mov	r1, r7
 800523a:	4681      	mov	r9, r0
 800523c:	2300      	movs	r3, #0
 800523e:	220a      	movs	r2, #10
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fc13 	bl	8005a6c <__multadd>
 8005246:	4607      	mov	r7, r0
 8005248:	e7f2      	b.n	8005230 <_dtoa_r+0xaa0>
 800524a:	f04f 0900 	mov.w	r9, #0
 800524e:	4659      	mov	r1, fp
 8005250:	2201      	movs	r2, #1
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fdbe 	bl	8005dd4 <__lshift>
 8005258:	4631      	mov	r1, r6
 800525a:	4683      	mov	fp, r0
 800525c:	f000 fe0e 	bl	8005e7c <__mcmp>
 8005260:	2800      	cmp	r0, #0
 8005262:	dcb8      	bgt.n	80051d6 <_dtoa_r+0xa46>
 8005264:	d102      	bne.n	800526c <_dtoa_r+0xadc>
 8005266:	f018 0f01 	tst.w	r8, #1
 800526a:	d1b4      	bne.n	80051d6 <_dtoa_r+0xa46>
 800526c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005270:	1e6a      	subs	r2, r5, #1
 8005272:	2b30      	cmp	r3, #48	; 0x30
 8005274:	f47f af0f 	bne.w	8005096 <_dtoa_r+0x906>
 8005278:	4615      	mov	r5, r2
 800527a:	e7f7      	b.n	800526c <_dtoa_r+0xadc>
 800527c:	9b06      	ldr	r3, [sp, #24]
 800527e:	4293      	cmp	r3, r2
 8005280:	d105      	bne.n	800528e <_dtoa_r+0xafe>
 8005282:	2331      	movs	r3, #49	; 0x31
 8005284:	9a06      	ldr	r2, [sp, #24]
 8005286:	f10a 0a01 	add.w	sl, sl, #1
 800528a:	7013      	strb	r3, [r2, #0]
 800528c:	e703      	b.n	8005096 <_dtoa_r+0x906>
 800528e:	4615      	mov	r5, r2
 8005290:	e7a1      	b.n	80051d6 <_dtoa_r+0xa46>
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <_dtoa_r+0xb60>)
 8005294:	f7ff bae1 	b.w	800485a <_dtoa_r+0xca>
 8005298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800529a:	2b00      	cmp	r3, #0
 800529c:	f47f aabb 	bne.w	8004816 <_dtoa_r+0x86>
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <_dtoa_r+0xb64>)
 80052a2:	f7ff bada 	b.w	800485a <_dtoa_r+0xca>
 80052a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f77f ae3f 	ble.w	8004f2c <_dtoa_r+0x79c>
 80052ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052b0:	9308      	str	r3, [sp, #32]
 80052b2:	e653      	b.n	8004f5c <_dtoa_r+0x7cc>
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	dc03      	bgt.n	80052c2 <_dtoa_r+0xb32>
 80052ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f73f aed5 	bgt.w	800506c <_dtoa_r+0x8dc>
 80052c2:	9d06      	ldr	r5, [sp, #24]
 80052c4:	4631      	mov	r1, r6
 80052c6:	4658      	mov	r0, fp
 80052c8:	f7ff f9d4 	bl	8004674 <quorem>
 80052cc:	9b06      	ldr	r3, [sp, #24]
 80052ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052d2:	f805 8b01 	strb.w	r8, [r5], #1
 80052d6:	9a04      	ldr	r2, [sp, #16]
 80052d8:	1aeb      	subs	r3, r5, r3
 80052da:	429a      	cmp	r2, r3
 80052dc:	ddb5      	ble.n	800524a <_dtoa_r+0xaba>
 80052de:	4659      	mov	r1, fp
 80052e0:	2300      	movs	r3, #0
 80052e2:	220a      	movs	r2, #10
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fbc1 	bl	8005a6c <__multadd>
 80052ea:	4683      	mov	fp, r0
 80052ec:	e7ea      	b.n	80052c4 <_dtoa_r+0xb34>
 80052ee:	bf00      	nop
 80052f0:	08006714 	.word	0x08006714
 80052f4:	08006790 	.word	0x08006790

080052f8 <rshift>:
 80052f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fa:	6906      	ldr	r6, [r0, #16]
 80052fc:	114b      	asrs	r3, r1, #5
 80052fe:	429e      	cmp	r6, r3
 8005300:	f100 0414 	add.w	r4, r0, #20
 8005304:	dd31      	ble.n	800536a <rshift+0x72>
 8005306:	f011 011f 	ands.w	r1, r1, #31
 800530a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800530e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005312:	d108      	bne.n	8005326 <rshift+0x2e>
 8005314:	4621      	mov	r1, r4
 8005316:	42b2      	cmp	r2, r6
 8005318:	460b      	mov	r3, r1
 800531a:	d211      	bcs.n	8005340 <rshift+0x48>
 800531c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005320:	f841 3b04 	str.w	r3, [r1], #4
 8005324:	e7f7      	b.n	8005316 <rshift+0x1e>
 8005326:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800532a:	4623      	mov	r3, r4
 800532c:	f1c1 0c20 	rsb	ip, r1, #32
 8005330:	40cd      	lsrs	r5, r1
 8005332:	3204      	adds	r2, #4
 8005334:	42b2      	cmp	r2, r6
 8005336:	4617      	mov	r7, r2
 8005338:	d30d      	bcc.n	8005356 <rshift+0x5e>
 800533a:	601d      	str	r5, [r3, #0]
 800533c:	b105      	cbz	r5, 8005340 <rshift+0x48>
 800533e:	3304      	adds	r3, #4
 8005340:	42a3      	cmp	r3, r4
 8005342:	eba3 0204 	sub.w	r2, r3, r4
 8005346:	bf08      	it	eq
 8005348:	2300      	moveq	r3, #0
 800534a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800534e:	6102      	str	r2, [r0, #16]
 8005350:	bf08      	it	eq
 8005352:	6143      	streq	r3, [r0, #20]
 8005354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005356:	683f      	ldr	r7, [r7, #0]
 8005358:	fa07 f70c 	lsl.w	r7, r7, ip
 800535c:	433d      	orrs	r5, r7
 800535e:	f843 5b04 	str.w	r5, [r3], #4
 8005362:	f852 5b04 	ldr.w	r5, [r2], #4
 8005366:	40cd      	lsrs	r5, r1
 8005368:	e7e4      	b.n	8005334 <rshift+0x3c>
 800536a:	4623      	mov	r3, r4
 800536c:	e7e8      	b.n	8005340 <rshift+0x48>

0800536e <__hexdig_fun>:
 800536e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005372:	2b09      	cmp	r3, #9
 8005374:	d802      	bhi.n	800537c <__hexdig_fun+0xe>
 8005376:	3820      	subs	r0, #32
 8005378:	b2c0      	uxtb	r0, r0
 800537a:	4770      	bx	lr
 800537c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005380:	2b05      	cmp	r3, #5
 8005382:	d801      	bhi.n	8005388 <__hexdig_fun+0x1a>
 8005384:	3847      	subs	r0, #71	; 0x47
 8005386:	e7f7      	b.n	8005378 <__hexdig_fun+0xa>
 8005388:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800538c:	2b05      	cmp	r3, #5
 800538e:	d801      	bhi.n	8005394 <__hexdig_fun+0x26>
 8005390:	3827      	subs	r0, #39	; 0x27
 8005392:	e7f1      	b.n	8005378 <__hexdig_fun+0xa>
 8005394:	2000      	movs	r0, #0
 8005396:	4770      	bx	lr

08005398 <__gethex>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	b08b      	sub	sp, #44	; 0x2c
 800539e:	9002      	str	r0, [sp, #8]
 80053a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80053a2:	468a      	mov	sl, r1
 80053a4:	4690      	mov	r8, r2
 80053a6:	9306      	str	r3, [sp, #24]
 80053a8:	f000 fad1 	bl	800594e <__localeconv_l>
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	f04f 0b00 	mov.w	fp, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	9303      	str	r3, [sp, #12]
 80053b6:	f7fa ff37 	bl	8000228 <strlen>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	9001      	str	r0, [sp, #4]
 80053be:	4403      	add	r3, r0
 80053c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80053c4:	9307      	str	r3, [sp, #28]
 80053c6:	f8da 3000 	ldr.w	r3, [sl]
 80053ca:	3302      	adds	r3, #2
 80053cc:	461f      	mov	r7, r3
 80053ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80053d2:	2830      	cmp	r0, #48	; 0x30
 80053d4:	d06c      	beq.n	80054b0 <__gethex+0x118>
 80053d6:	f7ff ffca 	bl	800536e <__hexdig_fun>
 80053da:	4604      	mov	r4, r0
 80053dc:	2800      	cmp	r0, #0
 80053de:	d16a      	bne.n	80054b6 <__gethex+0x11e>
 80053e0:	9a01      	ldr	r2, [sp, #4]
 80053e2:	9903      	ldr	r1, [sp, #12]
 80053e4:	4638      	mov	r0, r7
 80053e6:	f001 f905 	bl	80065f4 <strncmp>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d166      	bne.n	80054bc <__gethex+0x124>
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	5cf8      	ldrb	r0, [r7, r3]
 80053f2:	18fe      	adds	r6, r7, r3
 80053f4:	f7ff ffbb 	bl	800536e <__hexdig_fun>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d062      	beq.n	80054c2 <__gethex+0x12a>
 80053fc:	4633      	mov	r3, r6
 80053fe:	7818      	ldrb	r0, [r3, #0]
 8005400:	461f      	mov	r7, r3
 8005402:	2830      	cmp	r0, #48	; 0x30
 8005404:	f103 0301 	add.w	r3, r3, #1
 8005408:	d0f9      	beq.n	80053fe <__gethex+0x66>
 800540a:	f7ff ffb0 	bl	800536e <__hexdig_fun>
 800540e:	fab0 f580 	clz	r5, r0
 8005412:	4634      	mov	r4, r6
 8005414:	f04f 0b01 	mov.w	fp, #1
 8005418:	096d      	lsrs	r5, r5, #5
 800541a:	463a      	mov	r2, r7
 800541c:	4616      	mov	r6, r2
 800541e:	7830      	ldrb	r0, [r6, #0]
 8005420:	3201      	adds	r2, #1
 8005422:	f7ff ffa4 	bl	800536e <__hexdig_fun>
 8005426:	2800      	cmp	r0, #0
 8005428:	d1f8      	bne.n	800541c <__gethex+0x84>
 800542a:	9a01      	ldr	r2, [sp, #4]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	4630      	mov	r0, r6
 8005430:	f001 f8e0 	bl	80065f4 <strncmp>
 8005434:	b950      	cbnz	r0, 800544c <__gethex+0xb4>
 8005436:	b954      	cbnz	r4, 800544e <__gethex+0xb6>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	18f4      	adds	r4, r6, r3
 800543c:	4622      	mov	r2, r4
 800543e:	4616      	mov	r6, r2
 8005440:	7830      	ldrb	r0, [r6, #0]
 8005442:	3201      	adds	r2, #1
 8005444:	f7ff ff93 	bl	800536e <__hexdig_fun>
 8005448:	2800      	cmp	r0, #0
 800544a:	d1f8      	bne.n	800543e <__gethex+0xa6>
 800544c:	b10c      	cbz	r4, 8005452 <__gethex+0xba>
 800544e:	1ba4      	subs	r4, r4, r6
 8005450:	00a4      	lsls	r4, r4, #2
 8005452:	7833      	ldrb	r3, [r6, #0]
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d001      	beq.n	800545c <__gethex+0xc4>
 8005458:	2b70      	cmp	r3, #112	; 0x70
 800545a:	d140      	bne.n	80054de <__gethex+0x146>
 800545c:	7873      	ldrb	r3, [r6, #1]
 800545e:	2b2b      	cmp	r3, #43	; 0x2b
 8005460:	d031      	beq.n	80054c6 <__gethex+0x12e>
 8005462:	2b2d      	cmp	r3, #45	; 0x2d
 8005464:	d033      	beq.n	80054ce <__gethex+0x136>
 8005466:	f04f 0900 	mov.w	r9, #0
 800546a:	1c71      	adds	r1, r6, #1
 800546c:	7808      	ldrb	r0, [r1, #0]
 800546e:	f7ff ff7e 	bl	800536e <__hexdig_fun>
 8005472:	1e43      	subs	r3, r0, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b18      	cmp	r3, #24
 8005478:	d831      	bhi.n	80054de <__gethex+0x146>
 800547a:	f1a0 0210 	sub.w	r2, r0, #16
 800547e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005482:	f7ff ff74 	bl	800536e <__hexdig_fun>
 8005486:	1e43      	subs	r3, r0, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b18      	cmp	r3, #24
 800548c:	d922      	bls.n	80054d4 <__gethex+0x13c>
 800548e:	f1b9 0f00 	cmp.w	r9, #0
 8005492:	d000      	beq.n	8005496 <__gethex+0xfe>
 8005494:	4252      	negs	r2, r2
 8005496:	4414      	add	r4, r2
 8005498:	f8ca 1000 	str.w	r1, [sl]
 800549c:	b30d      	cbz	r5, 80054e2 <__gethex+0x14a>
 800549e:	f1bb 0f00 	cmp.w	fp, #0
 80054a2:	bf0c      	ite	eq
 80054a4:	2706      	moveq	r7, #6
 80054a6:	2700      	movne	r7, #0
 80054a8:	4638      	mov	r0, r7
 80054aa:	b00b      	add	sp, #44	; 0x2c
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	f10b 0b01 	add.w	fp, fp, #1
 80054b4:	e78a      	b.n	80053cc <__gethex+0x34>
 80054b6:	2500      	movs	r5, #0
 80054b8:	462c      	mov	r4, r5
 80054ba:	e7ae      	b.n	800541a <__gethex+0x82>
 80054bc:	463e      	mov	r6, r7
 80054be:	2501      	movs	r5, #1
 80054c0:	e7c7      	b.n	8005452 <__gethex+0xba>
 80054c2:	4604      	mov	r4, r0
 80054c4:	e7fb      	b.n	80054be <__gethex+0x126>
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	1cb1      	adds	r1, r6, #2
 80054cc:	e7ce      	b.n	800546c <__gethex+0xd4>
 80054ce:	f04f 0901 	mov.w	r9, #1
 80054d2:	e7fa      	b.n	80054ca <__gethex+0x132>
 80054d4:	230a      	movs	r3, #10
 80054d6:	fb03 0202 	mla	r2, r3, r2, r0
 80054da:	3a10      	subs	r2, #16
 80054dc:	e7cf      	b.n	800547e <__gethex+0xe6>
 80054de:	4631      	mov	r1, r6
 80054e0:	e7da      	b.n	8005498 <__gethex+0x100>
 80054e2:	4629      	mov	r1, r5
 80054e4:	1bf3      	subs	r3, r6, r7
 80054e6:	3b01      	subs	r3, #1
 80054e8:	2b07      	cmp	r3, #7
 80054ea:	dc49      	bgt.n	8005580 <__gethex+0x1e8>
 80054ec:	9802      	ldr	r0, [sp, #8]
 80054ee:	f000 fa72 	bl	80059d6 <_Balloc>
 80054f2:	f04f 0b00 	mov.w	fp, #0
 80054f6:	4605      	mov	r5, r0
 80054f8:	46da      	mov	sl, fp
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	f100 0914 	add.w	r9, r0, #20
 8005500:	f1c3 0301 	rsb	r3, r3, #1
 8005504:	f8cd 9010 	str.w	r9, [sp, #16]
 8005508:	9308      	str	r3, [sp, #32]
 800550a:	42b7      	cmp	r7, r6
 800550c:	d33b      	bcc.n	8005586 <__gethex+0x1ee>
 800550e:	9804      	ldr	r0, [sp, #16]
 8005510:	f840 ab04 	str.w	sl, [r0], #4
 8005514:	eba0 0009 	sub.w	r0, r0, r9
 8005518:	1080      	asrs	r0, r0, #2
 800551a:	6128      	str	r0, [r5, #16]
 800551c:	0147      	lsls	r7, r0, #5
 800551e:	4650      	mov	r0, sl
 8005520:	f000 fb1d 	bl	8005b5e <__hi0bits>
 8005524:	f8d8 6000 	ldr.w	r6, [r8]
 8005528:	1a3f      	subs	r7, r7, r0
 800552a:	42b7      	cmp	r7, r6
 800552c:	dd64      	ble.n	80055f8 <__gethex+0x260>
 800552e:	1bbf      	subs	r7, r7, r6
 8005530:	4639      	mov	r1, r7
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fe27 	bl	8006186 <__any_on>
 8005538:	4682      	mov	sl, r0
 800553a:	b178      	cbz	r0, 800555c <__gethex+0x1c4>
 800553c:	f04f 0a01 	mov.w	sl, #1
 8005540:	1e7b      	subs	r3, r7, #1
 8005542:	1159      	asrs	r1, r3, #5
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800554c:	fa0a f202 	lsl.w	r2, sl, r2
 8005550:	420a      	tst	r2, r1
 8005552:	d003      	beq.n	800555c <__gethex+0x1c4>
 8005554:	4553      	cmp	r3, sl
 8005556:	dc46      	bgt.n	80055e6 <__gethex+0x24e>
 8005558:	f04f 0a02 	mov.w	sl, #2
 800555c:	4639      	mov	r1, r7
 800555e:	4628      	mov	r0, r5
 8005560:	f7ff feca 	bl	80052f8 <rshift>
 8005564:	443c      	add	r4, r7
 8005566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800556a:	42a3      	cmp	r3, r4
 800556c:	da52      	bge.n	8005614 <__gethex+0x27c>
 800556e:	4629      	mov	r1, r5
 8005570:	9802      	ldr	r0, [sp, #8]
 8005572:	f000 fa64 	bl	8005a3e <_Bfree>
 8005576:	2300      	movs	r3, #0
 8005578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800557a:	27a3      	movs	r7, #163	; 0xa3
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e793      	b.n	80054a8 <__gethex+0x110>
 8005580:	3101      	adds	r1, #1
 8005582:	105b      	asrs	r3, r3, #1
 8005584:	e7b0      	b.n	80054e8 <__gethex+0x150>
 8005586:	1e73      	subs	r3, r6, #1
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	9a07      	ldr	r2, [sp, #28]
 800558c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <__gethex+0x22e>
 8005594:	f1bb 0f20 	cmp.w	fp, #32
 8005598:	d107      	bne.n	80055aa <__gethex+0x212>
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	f8c3 a000 	str.w	sl, [r3]
 80055a0:	f04f 0a00 	mov.w	sl, #0
 80055a4:	46d3      	mov	fp, sl
 80055a6:	3304      	adds	r3, #4
 80055a8:	9304      	str	r3, [sp, #16]
 80055aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80055ae:	f7ff fede 	bl	800536e <__hexdig_fun>
 80055b2:	f000 000f 	and.w	r0, r0, #15
 80055b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80055ba:	ea4a 0a00 	orr.w	sl, sl, r0
 80055be:	f10b 0b04 	add.w	fp, fp, #4
 80055c2:	9b05      	ldr	r3, [sp, #20]
 80055c4:	e00d      	b.n	80055e2 <__gethex+0x24a>
 80055c6:	9b05      	ldr	r3, [sp, #20]
 80055c8:	9a08      	ldr	r2, [sp, #32]
 80055ca:	4413      	add	r3, r2
 80055cc:	42bb      	cmp	r3, r7
 80055ce:	d3e1      	bcc.n	8005594 <__gethex+0x1fc>
 80055d0:	4618      	mov	r0, r3
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	9903      	ldr	r1, [sp, #12]
 80055d6:	9309      	str	r3, [sp, #36]	; 0x24
 80055d8:	f001 f80c 	bl	80065f4 <strncmp>
 80055dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055de:	2800      	cmp	r0, #0
 80055e0:	d1d8      	bne.n	8005594 <__gethex+0x1fc>
 80055e2:	461e      	mov	r6, r3
 80055e4:	e791      	b.n	800550a <__gethex+0x172>
 80055e6:	1eb9      	subs	r1, r7, #2
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 fdcc 	bl	8006186 <__any_on>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d0b2      	beq.n	8005558 <__gethex+0x1c0>
 80055f2:	f04f 0a03 	mov.w	sl, #3
 80055f6:	e7b1      	b.n	800555c <__gethex+0x1c4>
 80055f8:	da09      	bge.n	800560e <__gethex+0x276>
 80055fa:	1bf7      	subs	r7, r6, r7
 80055fc:	4629      	mov	r1, r5
 80055fe:	463a      	mov	r2, r7
 8005600:	9802      	ldr	r0, [sp, #8]
 8005602:	f000 fbe7 	bl	8005dd4 <__lshift>
 8005606:	4605      	mov	r5, r0
 8005608:	1be4      	subs	r4, r4, r7
 800560a:	f100 0914 	add.w	r9, r0, #20
 800560e:	f04f 0a00 	mov.w	sl, #0
 8005612:	e7a8      	b.n	8005566 <__gethex+0x1ce>
 8005614:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005618:	42a0      	cmp	r0, r4
 800561a:	dd6b      	ble.n	80056f4 <__gethex+0x35c>
 800561c:	1b04      	subs	r4, r0, r4
 800561e:	42a6      	cmp	r6, r4
 8005620:	dc2e      	bgt.n	8005680 <__gethex+0x2e8>
 8005622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d022      	beq.n	8005670 <__gethex+0x2d8>
 800562a:	2b03      	cmp	r3, #3
 800562c:	d024      	beq.n	8005678 <__gethex+0x2e0>
 800562e:	2b01      	cmp	r3, #1
 8005630:	d115      	bne.n	800565e <__gethex+0x2c6>
 8005632:	42a6      	cmp	r6, r4
 8005634:	d113      	bne.n	800565e <__gethex+0x2c6>
 8005636:	2e01      	cmp	r6, #1
 8005638:	dc0b      	bgt.n	8005652 <__gethex+0x2ba>
 800563a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800563e:	9a06      	ldr	r2, [sp, #24]
 8005640:	2762      	movs	r7, #98	; 0x62
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	2301      	movs	r3, #1
 8005646:	612b      	str	r3, [r5, #16]
 8005648:	f8c9 3000 	str.w	r3, [r9]
 800564c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800564e:	601d      	str	r5, [r3, #0]
 8005650:	e72a      	b.n	80054a8 <__gethex+0x110>
 8005652:	1e71      	subs	r1, r6, #1
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fd96 	bl	8006186 <__any_on>
 800565a:	2800      	cmp	r0, #0
 800565c:	d1ed      	bne.n	800563a <__gethex+0x2a2>
 800565e:	4629      	mov	r1, r5
 8005660:	9802      	ldr	r0, [sp, #8]
 8005662:	f000 f9ec 	bl	8005a3e <_Bfree>
 8005666:	2300      	movs	r3, #0
 8005668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800566a:	2750      	movs	r7, #80	; 0x50
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e71b      	b.n	80054a8 <__gethex+0x110>
 8005670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0e1      	beq.n	800563a <__gethex+0x2a2>
 8005676:	e7f2      	b.n	800565e <__gethex+0x2c6>
 8005678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1dd      	bne.n	800563a <__gethex+0x2a2>
 800567e:	e7ee      	b.n	800565e <__gethex+0x2c6>
 8005680:	1e67      	subs	r7, r4, #1
 8005682:	f1ba 0f00 	cmp.w	sl, #0
 8005686:	d132      	bne.n	80056ee <__gethex+0x356>
 8005688:	b127      	cbz	r7, 8005694 <__gethex+0x2fc>
 800568a:	4639      	mov	r1, r7
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fd7a 	bl	8006186 <__any_on>
 8005692:	4682      	mov	sl, r0
 8005694:	2301      	movs	r3, #1
 8005696:	117a      	asrs	r2, r7, #5
 8005698:	f007 071f 	and.w	r7, r7, #31
 800569c:	fa03 f707 	lsl.w	r7, r3, r7
 80056a0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80056a4:	4621      	mov	r1, r4
 80056a6:	421f      	tst	r7, r3
 80056a8:	f04f 0702 	mov.w	r7, #2
 80056ac:	4628      	mov	r0, r5
 80056ae:	bf18      	it	ne
 80056b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80056b4:	1b36      	subs	r6, r6, r4
 80056b6:	f7ff fe1f 	bl	80052f8 <rshift>
 80056ba:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80056be:	f1ba 0f00 	cmp.w	sl, #0
 80056c2:	d048      	beq.n	8005756 <__gethex+0x3be>
 80056c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d015      	beq.n	80056f8 <__gethex+0x360>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d017      	beq.n	8005700 <__gethex+0x368>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d109      	bne.n	80056e8 <__gethex+0x350>
 80056d4:	f01a 0f02 	tst.w	sl, #2
 80056d8:	d006      	beq.n	80056e8 <__gethex+0x350>
 80056da:	f8d9 3000 	ldr.w	r3, [r9]
 80056de:	ea4a 0a03 	orr.w	sl, sl, r3
 80056e2:	f01a 0f01 	tst.w	sl, #1
 80056e6:	d10e      	bne.n	8005706 <__gethex+0x36e>
 80056e8:	f047 0710 	orr.w	r7, r7, #16
 80056ec:	e033      	b.n	8005756 <__gethex+0x3be>
 80056ee:	f04f 0a01 	mov.w	sl, #1
 80056f2:	e7cf      	b.n	8005694 <__gethex+0x2fc>
 80056f4:	2701      	movs	r7, #1
 80056f6:	e7e2      	b.n	80056be <__gethex+0x326>
 80056f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056fa:	f1c3 0301 	rsb	r3, r3, #1
 80056fe:	9315      	str	r3, [sp, #84]	; 0x54
 8005700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <__gethex+0x350>
 8005706:	f04f 0c00 	mov.w	ip, #0
 800570a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800570e:	f105 0314 	add.w	r3, r5, #20
 8005712:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005716:	eb03 010a 	add.w	r1, r3, sl
 800571a:	4618      	mov	r0, r3
 800571c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005720:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005724:	d01c      	beq.n	8005760 <__gethex+0x3c8>
 8005726:	3201      	adds	r2, #1
 8005728:	6002      	str	r2, [r0, #0]
 800572a:	2f02      	cmp	r7, #2
 800572c:	f105 0314 	add.w	r3, r5, #20
 8005730:	d138      	bne.n	80057a4 <__gethex+0x40c>
 8005732:	f8d8 2000 	ldr.w	r2, [r8]
 8005736:	3a01      	subs	r2, #1
 8005738:	42b2      	cmp	r2, r6
 800573a:	d10a      	bne.n	8005752 <__gethex+0x3ba>
 800573c:	2201      	movs	r2, #1
 800573e:	1171      	asrs	r1, r6, #5
 8005740:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005744:	f006 061f 	and.w	r6, r6, #31
 8005748:	fa02 f606 	lsl.w	r6, r2, r6
 800574c:	421e      	tst	r6, r3
 800574e:	bf18      	it	ne
 8005750:	4617      	movne	r7, r2
 8005752:	f047 0720 	orr.w	r7, r7, #32
 8005756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005758:	601d      	str	r5, [r3, #0]
 800575a:	9b06      	ldr	r3, [sp, #24]
 800575c:	601c      	str	r4, [r3, #0]
 800575e:	e6a3      	b.n	80054a8 <__gethex+0x110>
 8005760:	4299      	cmp	r1, r3
 8005762:	f843 cc04 	str.w	ip, [r3, #-4]
 8005766:	d8d8      	bhi.n	800571a <__gethex+0x382>
 8005768:	68ab      	ldr	r3, [r5, #8]
 800576a:	4599      	cmp	r9, r3
 800576c:	db12      	blt.n	8005794 <__gethex+0x3fc>
 800576e:	6869      	ldr	r1, [r5, #4]
 8005770:	9802      	ldr	r0, [sp, #8]
 8005772:	3101      	adds	r1, #1
 8005774:	f000 f92f 	bl	80059d6 <_Balloc>
 8005778:	4683      	mov	fp, r0
 800577a:	692a      	ldr	r2, [r5, #16]
 800577c:	f105 010c 	add.w	r1, r5, #12
 8005780:	3202      	adds	r2, #2
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	300c      	adds	r0, #12
 8005786:	f000 f91b 	bl	80059c0 <memcpy>
 800578a:	4629      	mov	r1, r5
 800578c:	9802      	ldr	r0, [sp, #8]
 800578e:	f000 f956 	bl	8005a3e <_Bfree>
 8005792:	465d      	mov	r5, fp
 8005794:	692b      	ldr	r3, [r5, #16]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	612a      	str	r2, [r5, #16]
 800579a:	2201      	movs	r2, #1
 800579c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	e7c2      	b.n	800572a <__gethex+0x392>
 80057a4:	692a      	ldr	r2, [r5, #16]
 80057a6:	454a      	cmp	r2, r9
 80057a8:	dd0b      	ble.n	80057c2 <__gethex+0x42a>
 80057aa:	2101      	movs	r1, #1
 80057ac:	4628      	mov	r0, r5
 80057ae:	f7ff fda3 	bl	80052f8 <rshift>
 80057b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057b6:	3401      	adds	r4, #1
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	f6ff aed8 	blt.w	800556e <__gethex+0x1d6>
 80057be:	2701      	movs	r7, #1
 80057c0:	e7c7      	b.n	8005752 <__gethex+0x3ba>
 80057c2:	f016 061f 	ands.w	r6, r6, #31
 80057c6:	d0fa      	beq.n	80057be <__gethex+0x426>
 80057c8:	449a      	add	sl, r3
 80057ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80057ce:	f000 f9c6 	bl	8005b5e <__hi0bits>
 80057d2:	f1c6 0620 	rsb	r6, r6, #32
 80057d6:	42b0      	cmp	r0, r6
 80057d8:	dbe7      	blt.n	80057aa <__gethex+0x412>
 80057da:	e7f0      	b.n	80057be <__gethex+0x426>

080057dc <L_shift>:
 80057dc:	f1c2 0208 	rsb	r2, r2, #8
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	f1c2 0620 	rsb	r6, r2, #32
 80057e8:	6843      	ldr	r3, [r0, #4]
 80057ea:	6804      	ldr	r4, [r0, #0]
 80057ec:	fa03 f506 	lsl.w	r5, r3, r6
 80057f0:	432c      	orrs	r4, r5
 80057f2:	40d3      	lsrs	r3, r2
 80057f4:	6004      	str	r4, [r0, #0]
 80057f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80057fa:	4288      	cmp	r0, r1
 80057fc:	d3f4      	bcc.n	80057e8 <L_shift+0xc>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}

08005800 <__match>:
 8005800:	b530      	push	{r4, r5, lr}
 8005802:	6803      	ldr	r3, [r0, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	b914      	cbnz	r4, 8005812 <__match+0x12>
 800580c:	6003      	str	r3, [r0, #0]
 800580e:	2001      	movs	r0, #1
 8005810:	bd30      	pop	{r4, r5, pc}
 8005812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800581a:	2d19      	cmp	r5, #25
 800581c:	bf98      	it	ls
 800581e:	3220      	addls	r2, #32
 8005820:	42a2      	cmp	r2, r4
 8005822:	d0f0      	beq.n	8005806 <__match+0x6>
 8005824:	2000      	movs	r0, #0
 8005826:	e7f3      	b.n	8005810 <__match+0x10>

08005828 <__hexnan>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	2500      	movs	r5, #0
 800582e:	680b      	ldr	r3, [r1, #0]
 8005830:	4682      	mov	sl, r0
 8005832:	115f      	asrs	r7, r3, #5
 8005834:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005838:	f013 031f 	ands.w	r3, r3, #31
 800583c:	bf18      	it	ne
 800583e:	3704      	addne	r7, #4
 8005840:	1f3e      	subs	r6, r7, #4
 8005842:	4690      	mov	r8, r2
 8005844:	46b1      	mov	r9, r6
 8005846:	4634      	mov	r4, r6
 8005848:	46ab      	mov	fp, r5
 800584a:	b087      	sub	sp, #28
 800584c:	6801      	ldr	r1, [r0, #0]
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	f847 5c04 	str.w	r5, [r7, #-4]
 8005854:	9502      	str	r5, [sp, #8]
 8005856:	784a      	ldrb	r2, [r1, #1]
 8005858:	1c4b      	adds	r3, r1, #1
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	b342      	cbz	r2, 80058b0 <__hexnan+0x88>
 800585e:	4610      	mov	r0, r2
 8005860:	9105      	str	r1, [sp, #20]
 8005862:	9204      	str	r2, [sp, #16]
 8005864:	f7ff fd83 	bl	800536e <__hexdig_fun>
 8005868:	2800      	cmp	r0, #0
 800586a:	d143      	bne.n	80058f4 <__hexnan+0xcc>
 800586c:	9a04      	ldr	r2, [sp, #16]
 800586e:	9905      	ldr	r1, [sp, #20]
 8005870:	2a20      	cmp	r2, #32
 8005872:	d818      	bhi.n	80058a6 <__hexnan+0x7e>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	459b      	cmp	fp, r3
 8005878:	dd13      	ble.n	80058a2 <__hexnan+0x7a>
 800587a:	454c      	cmp	r4, r9
 800587c:	d206      	bcs.n	800588c <__hexnan+0x64>
 800587e:	2d07      	cmp	r5, #7
 8005880:	dc04      	bgt.n	800588c <__hexnan+0x64>
 8005882:	462a      	mov	r2, r5
 8005884:	4649      	mov	r1, r9
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff ffa8 	bl	80057dc <L_shift>
 800588c:	4544      	cmp	r4, r8
 800588e:	d944      	bls.n	800591a <__hexnan+0xf2>
 8005890:	2300      	movs	r3, #0
 8005892:	f1a4 0904 	sub.w	r9, r4, #4
 8005896:	f844 3c04 	str.w	r3, [r4, #-4]
 800589a:	461d      	mov	r5, r3
 800589c:	464c      	mov	r4, r9
 800589e:	f8cd b008 	str.w	fp, [sp, #8]
 80058a2:	9903      	ldr	r1, [sp, #12]
 80058a4:	e7d7      	b.n	8005856 <__hexnan+0x2e>
 80058a6:	2a29      	cmp	r2, #41	; 0x29
 80058a8:	d14a      	bne.n	8005940 <__hexnan+0x118>
 80058aa:	3102      	adds	r1, #2
 80058ac:	f8ca 1000 	str.w	r1, [sl]
 80058b0:	f1bb 0f00 	cmp.w	fp, #0
 80058b4:	d044      	beq.n	8005940 <__hexnan+0x118>
 80058b6:	454c      	cmp	r4, r9
 80058b8:	d206      	bcs.n	80058c8 <__hexnan+0xa0>
 80058ba:	2d07      	cmp	r5, #7
 80058bc:	dc04      	bgt.n	80058c8 <__hexnan+0xa0>
 80058be:	462a      	mov	r2, r5
 80058c0:	4649      	mov	r1, r9
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff ff8a 	bl	80057dc <L_shift>
 80058c8:	4544      	cmp	r4, r8
 80058ca:	d928      	bls.n	800591e <__hexnan+0xf6>
 80058cc:	4643      	mov	r3, r8
 80058ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80058d2:	42a6      	cmp	r6, r4
 80058d4:	f843 2b04 	str.w	r2, [r3], #4
 80058d8:	d2f9      	bcs.n	80058ce <__hexnan+0xa6>
 80058da:	2200      	movs	r2, #0
 80058dc:	f843 2b04 	str.w	r2, [r3], #4
 80058e0:	429e      	cmp	r6, r3
 80058e2:	d2fb      	bcs.n	80058dc <__hexnan+0xb4>
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	b91b      	cbnz	r3, 80058f0 <__hexnan+0xc8>
 80058e8:	4546      	cmp	r6, r8
 80058ea:	d127      	bne.n	800593c <__hexnan+0x114>
 80058ec:	2301      	movs	r3, #1
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	2005      	movs	r0, #5
 80058f2:	e026      	b.n	8005942 <__hexnan+0x11a>
 80058f4:	3501      	adds	r5, #1
 80058f6:	2d08      	cmp	r5, #8
 80058f8:	f10b 0b01 	add.w	fp, fp, #1
 80058fc:	dd06      	ble.n	800590c <__hexnan+0xe4>
 80058fe:	4544      	cmp	r4, r8
 8005900:	d9cf      	bls.n	80058a2 <__hexnan+0x7a>
 8005902:	2300      	movs	r3, #0
 8005904:	2501      	movs	r5, #1
 8005906:	f844 3c04 	str.w	r3, [r4, #-4]
 800590a:	3c04      	subs	r4, #4
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	f000 000f 	and.w	r0, r0, #15
 8005912:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005916:	6020      	str	r0, [r4, #0]
 8005918:	e7c3      	b.n	80058a2 <__hexnan+0x7a>
 800591a:	2508      	movs	r5, #8
 800591c:	e7c1      	b.n	80058a2 <__hexnan+0x7a>
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0df      	beq.n	80058e4 <__hexnan+0xbc>
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	f1c3 0320 	rsb	r3, r3, #32
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005934:	401a      	ands	r2, r3
 8005936:	f847 2c04 	str.w	r2, [r7, #-4]
 800593a:	e7d3      	b.n	80058e4 <__hexnan+0xbc>
 800593c:	3e04      	subs	r6, #4
 800593e:	e7d1      	b.n	80058e4 <__hexnan+0xbc>
 8005940:	2004      	movs	r0, #4
 8005942:	b007      	add	sp, #28
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005948 <__locale_ctype_ptr_l>:
 8005948:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800594c:	4770      	bx	lr

0800594e <__localeconv_l>:
 800594e:	30f0      	adds	r0, #240	; 0xf0
 8005950:	4770      	bx	lr
	...

08005954 <_localeconv_r>:
 8005954:	4b04      	ldr	r3, [pc, #16]	; (8005968 <_localeconv_r+0x14>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6a18      	ldr	r0, [r3, #32]
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <_localeconv_r+0x18>)
 800595c:	2800      	cmp	r0, #0
 800595e:	bf08      	it	eq
 8005960:	4618      	moveq	r0, r3
 8005962:	30f0      	adds	r0, #240	; 0xf0
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000350 	.word	0x20000350
 800596c:	200003b4 	.word	0x200003b4

08005970 <malloc>:
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <malloc+0xc>)
 8005972:	4601      	mov	r1, r0
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f000 bc81 	b.w	800627c <_malloc_r>
 800597a:	bf00      	nop
 800597c:	20000350 	.word	0x20000350

08005980 <__ascii_mbtowc>:
 8005980:	b082      	sub	sp, #8
 8005982:	b901      	cbnz	r1, 8005986 <__ascii_mbtowc+0x6>
 8005984:	a901      	add	r1, sp, #4
 8005986:	b142      	cbz	r2, 800599a <__ascii_mbtowc+0x1a>
 8005988:	b14b      	cbz	r3, 800599e <__ascii_mbtowc+0x1e>
 800598a:	7813      	ldrb	r3, [r2, #0]
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	1c10      	adds	r0, r2, #0
 8005992:	bf18      	it	ne
 8005994:	2001      	movne	r0, #1
 8005996:	b002      	add	sp, #8
 8005998:	4770      	bx	lr
 800599a:	4610      	mov	r0, r2
 800599c:	e7fb      	b.n	8005996 <__ascii_mbtowc+0x16>
 800599e:	f06f 0001 	mvn.w	r0, #1
 80059a2:	e7f8      	b.n	8005996 <__ascii_mbtowc+0x16>

080059a4 <memchr>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	b2c9      	uxtb	r1, r1
 80059a8:	4402      	add	r2, r0
 80059aa:	4290      	cmp	r0, r2
 80059ac:	4603      	mov	r3, r0
 80059ae:	d101      	bne.n	80059b4 <memchr+0x10>
 80059b0:	2300      	movs	r3, #0
 80059b2:	e003      	b.n	80059bc <memchr+0x18>
 80059b4:	781c      	ldrb	r4, [r3, #0]
 80059b6:	3001      	adds	r0, #1
 80059b8:	428c      	cmp	r4, r1
 80059ba:	d1f6      	bne.n	80059aa <memchr+0x6>
 80059bc:	4618      	mov	r0, r3
 80059be:	bd10      	pop	{r4, pc}

080059c0 <memcpy>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	1e43      	subs	r3, r0, #1
 80059c4:	440a      	add	r2, r1
 80059c6:	4291      	cmp	r1, r2
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	bd10      	pop	{r4, pc}
 80059cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d4:	e7f7      	b.n	80059c6 <memcpy+0x6>

080059d6 <_Balloc>:
 80059d6:	b570      	push	{r4, r5, r6, lr}
 80059d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059da:	4604      	mov	r4, r0
 80059dc:	460e      	mov	r6, r1
 80059de:	b93d      	cbnz	r5, 80059f0 <_Balloc+0x1a>
 80059e0:	2010      	movs	r0, #16
 80059e2:	f7ff ffc5 	bl	8005970 <malloc>
 80059e6:	6260      	str	r0, [r4, #36]	; 0x24
 80059e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059ec:	6005      	str	r5, [r0, #0]
 80059ee:	60c5      	str	r5, [r0, #12]
 80059f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059f2:	68eb      	ldr	r3, [r5, #12]
 80059f4:	b183      	cbz	r3, 8005a18 <_Balloc+0x42>
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059fe:	b9b8      	cbnz	r0, 8005a30 <_Balloc+0x5a>
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f506 	lsl.w	r5, r1, r6
 8005a06:	1d6a      	adds	r2, r5, #5
 8005a08:	0092      	lsls	r2, r2, #2
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f000 fbdc 	bl	80061c8 <_calloc_r>
 8005a10:	b160      	cbz	r0, 8005a2c <_Balloc+0x56>
 8005a12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a16:	e00e      	b.n	8005a36 <_Balloc+0x60>
 8005a18:	2221      	movs	r2, #33	; 0x21
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fbd3 	bl	80061c8 <_calloc_r>
 8005a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a24:	60e8      	str	r0, [r5, #12]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e4      	bne.n	80059f6 <_Balloc+0x20>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	6802      	ldr	r2, [r0, #0]
 8005a32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a36:	2300      	movs	r3, #0
 8005a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a3c:	e7f7      	b.n	8005a2e <_Balloc+0x58>

08005a3e <_Bfree>:
 8005a3e:	b570      	push	{r4, r5, r6, lr}
 8005a40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a42:	4606      	mov	r6, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	b93c      	cbnz	r4, 8005a58 <_Bfree+0x1a>
 8005a48:	2010      	movs	r0, #16
 8005a4a:	f7ff ff91 	bl	8005970 <malloc>
 8005a4e:	6270      	str	r0, [r6, #36]	; 0x24
 8005a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a54:	6004      	str	r4, [r0, #0]
 8005a56:	60c4      	str	r4, [r0, #12]
 8005a58:	b13d      	cbz	r5, 8005a6a <_Bfree+0x2c>
 8005a5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a5c:	686a      	ldr	r2, [r5, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a64:	6029      	str	r1, [r5, #0]
 8005a66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}

08005a6c <__multadd>:
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	461f      	mov	r7, r3
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	2300      	movs	r3, #0
 8005a78:	690d      	ldr	r5, [r1, #16]
 8005a7a:	f101 0c14 	add.w	ip, r1, #20
 8005a7e:	f8dc 0000 	ldr.w	r0, [ip]
 8005a82:	3301      	adds	r3, #1
 8005a84:	b281      	uxth	r1, r0
 8005a86:	fb02 7101 	mla	r1, r2, r1, r7
 8005a8a:	0c00      	lsrs	r0, r0, #16
 8005a8c:	0c0f      	lsrs	r7, r1, #16
 8005a8e:	fb02 7000 	mla	r0, r2, r0, r7
 8005a92:	b289      	uxth	r1, r1
 8005a94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005a98:	429d      	cmp	r5, r3
 8005a9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005aa2:	dcec      	bgt.n	8005a7e <__multadd+0x12>
 8005aa4:	b1d7      	cbz	r7, 8005adc <__multadd+0x70>
 8005aa6:	68a3      	ldr	r3, [r4, #8]
 8005aa8:	42ab      	cmp	r3, r5
 8005aaa:	dc12      	bgt.n	8005ad2 <__multadd+0x66>
 8005aac:	6861      	ldr	r1, [r4, #4]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	3101      	adds	r1, #1
 8005ab2:	f7ff ff90 	bl	80059d6 <_Balloc>
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	6922      	ldr	r2, [r4, #16]
 8005aba:	f104 010c 	add.w	r1, r4, #12
 8005abe:	3202      	adds	r2, #2
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	300c      	adds	r0, #12
 8005ac4:	f7ff ff7c 	bl	80059c0 <memcpy>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ffb7 	bl	8005a3e <_Bfree>
 8005ad0:	4644      	mov	r4, r8
 8005ad2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	615f      	str	r7, [r3, #20]
 8005ada:	6125      	str	r5, [r4, #16]
 8005adc:	4620      	mov	r0, r4
 8005ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ae2 <__s2b>:
 8005ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae6:	4615      	mov	r5, r2
 8005ae8:	2209      	movs	r2, #9
 8005aea:	461f      	mov	r7, r3
 8005aec:	3308      	adds	r3, #8
 8005aee:	460c      	mov	r4, r1
 8005af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005af4:	4606      	mov	r6, r0
 8005af6:	2201      	movs	r2, #1
 8005af8:	2100      	movs	r1, #0
 8005afa:	429a      	cmp	r2, r3
 8005afc:	db20      	blt.n	8005b40 <__s2b+0x5e>
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ff69 	bl	80059d6 <_Balloc>
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	2d09      	cmp	r5, #9
 8005b08:	6143      	str	r3, [r0, #20]
 8005b0a:	f04f 0301 	mov.w	r3, #1
 8005b0e:	6103      	str	r3, [r0, #16]
 8005b10:	dd19      	ble.n	8005b46 <__s2b+0x64>
 8005b12:	f104 0809 	add.w	r8, r4, #9
 8005b16:	46c1      	mov	r9, r8
 8005b18:	442c      	add	r4, r5
 8005b1a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005b1e:	4601      	mov	r1, r0
 8005b20:	3b30      	subs	r3, #48	; 0x30
 8005b22:	220a      	movs	r2, #10
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffa1 	bl	8005a6c <__multadd>
 8005b2a:	45a1      	cmp	r9, r4
 8005b2c:	d1f5      	bne.n	8005b1a <__s2b+0x38>
 8005b2e:	eb08 0405 	add.w	r4, r8, r5
 8005b32:	3c08      	subs	r4, #8
 8005b34:	1b2d      	subs	r5, r5, r4
 8005b36:	1963      	adds	r3, r4, r5
 8005b38:	42bb      	cmp	r3, r7
 8005b3a:	db07      	blt.n	8005b4c <__s2b+0x6a>
 8005b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b40:	0052      	lsls	r2, r2, #1
 8005b42:	3101      	adds	r1, #1
 8005b44:	e7d9      	b.n	8005afa <__s2b+0x18>
 8005b46:	340a      	adds	r4, #10
 8005b48:	2509      	movs	r5, #9
 8005b4a:	e7f3      	b.n	8005b34 <__s2b+0x52>
 8005b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b50:	4601      	mov	r1, r0
 8005b52:	3b30      	subs	r3, #48	; 0x30
 8005b54:	220a      	movs	r2, #10
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ff88 	bl	8005a6c <__multadd>
 8005b5c:	e7eb      	b.n	8005b36 <__s2b+0x54>

08005b5e <__hi0bits>:
 8005b5e:	0c02      	lsrs	r2, r0, #16
 8005b60:	0412      	lsls	r2, r2, #16
 8005b62:	4603      	mov	r3, r0
 8005b64:	b9b2      	cbnz	r2, 8005b94 <__hi0bits+0x36>
 8005b66:	0403      	lsls	r3, r0, #16
 8005b68:	2010      	movs	r0, #16
 8005b6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b6e:	bf04      	itt	eq
 8005b70:	021b      	lsleq	r3, r3, #8
 8005b72:	3008      	addeq	r0, #8
 8005b74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b78:	bf04      	itt	eq
 8005b7a:	011b      	lsleq	r3, r3, #4
 8005b7c:	3004      	addeq	r0, #4
 8005b7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b82:	bf04      	itt	eq
 8005b84:	009b      	lsleq	r3, r3, #2
 8005b86:	3002      	addeq	r0, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	db06      	blt.n	8005b9a <__hi0bits+0x3c>
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	d503      	bpl.n	8005b98 <__hi0bits+0x3a>
 8005b90:	3001      	adds	r0, #1
 8005b92:	4770      	bx	lr
 8005b94:	2000      	movs	r0, #0
 8005b96:	e7e8      	b.n	8005b6a <__hi0bits+0xc>
 8005b98:	2020      	movs	r0, #32
 8005b9a:	4770      	bx	lr

08005b9c <__lo0bits>:
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	f013 0207 	ands.w	r2, r3, #7
 8005ba4:	d00b      	beq.n	8005bbe <__lo0bits+0x22>
 8005ba6:	07da      	lsls	r2, r3, #31
 8005ba8:	d423      	bmi.n	8005bf2 <__lo0bits+0x56>
 8005baa:	0798      	lsls	r0, r3, #30
 8005bac:	bf49      	itett	mi
 8005bae:	085b      	lsrmi	r3, r3, #1
 8005bb0:	089b      	lsrpl	r3, r3, #2
 8005bb2:	2001      	movmi	r0, #1
 8005bb4:	600b      	strmi	r3, [r1, #0]
 8005bb6:	bf5c      	itt	pl
 8005bb8:	600b      	strpl	r3, [r1, #0]
 8005bba:	2002      	movpl	r0, #2
 8005bbc:	4770      	bx	lr
 8005bbe:	b298      	uxth	r0, r3
 8005bc0:	b9a8      	cbnz	r0, 8005bee <__lo0bits+0x52>
 8005bc2:	2010      	movs	r0, #16
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bca:	bf04      	itt	eq
 8005bcc:	0a1b      	lsreq	r3, r3, #8
 8005bce:	3008      	addeq	r0, #8
 8005bd0:	071a      	lsls	r2, r3, #28
 8005bd2:	bf04      	itt	eq
 8005bd4:	091b      	lsreq	r3, r3, #4
 8005bd6:	3004      	addeq	r0, #4
 8005bd8:	079a      	lsls	r2, r3, #30
 8005bda:	bf04      	itt	eq
 8005bdc:	089b      	lsreq	r3, r3, #2
 8005bde:	3002      	addeq	r0, #2
 8005be0:	07da      	lsls	r2, r3, #31
 8005be2:	d402      	bmi.n	8005bea <__lo0bits+0x4e>
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	d006      	beq.n	8005bf6 <__lo0bits+0x5a>
 8005be8:	3001      	adds	r0, #1
 8005bea:	600b      	str	r3, [r1, #0]
 8005bec:	4770      	bx	lr
 8005bee:	4610      	mov	r0, r2
 8005bf0:	e7e9      	b.n	8005bc6 <__lo0bits+0x2a>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	4770      	bx	lr
 8005bf6:	2020      	movs	r0, #32
 8005bf8:	4770      	bx	lr

08005bfa <__i2b>:
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	2101      	movs	r1, #1
 8005c00:	f7ff fee9 	bl	80059d6 <_Balloc>
 8005c04:	2201      	movs	r2, #1
 8005c06:	6144      	str	r4, [r0, #20]
 8005c08:	6102      	str	r2, [r0, #16]
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <__multiply>:
 8005c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c10:	4614      	mov	r4, r2
 8005c12:	690a      	ldr	r2, [r1, #16]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	4688      	mov	r8, r1
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bfbe      	ittt	lt
 8005c1c:	460b      	movlt	r3, r1
 8005c1e:	46a0      	movlt	r8, r4
 8005c20:	461c      	movlt	r4, r3
 8005c22:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c26:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c2e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c32:	eb07 0609 	add.w	r6, r7, r9
 8005c36:	42b3      	cmp	r3, r6
 8005c38:	bfb8      	it	lt
 8005c3a:	3101      	addlt	r1, #1
 8005c3c:	f7ff fecb 	bl	80059d6 <_Balloc>
 8005c40:	f100 0514 	add.w	r5, r0, #20
 8005c44:	462b      	mov	r3, r5
 8005c46:	2200      	movs	r2, #0
 8005c48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005c4c:	4573      	cmp	r3, lr
 8005c4e:	d316      	bcc.n	8005c7e <__multiply+0x72>
 8005c50:	f104 0214 	add.w	r2, r4, #20
 8005c54:	f108 0114 	add.w	r1, r8, #20
 8005c58:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c5c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	9b00      	ldr	r3, [sp, #0]
 8005c64:	9201      	str	r2, [sp, #4]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d80c      	bhi.n	8005c84 <__multiply+0x78>
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	dd03      	ble.n	8005c76 <__multiply+0x6a>
 8005c6e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d05d      	beq.n	8005d32 <__multiply+0x126>
 8005c76:	6106      	str	r6, [r0, #16]
 8005c78:	b003      	add	sp, #12
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7e:	f843 2b04 	str.w	r2, [r3], #4
 8005c82:	e7e3      	b.n	8005c4c <__multiply+0x40>
 8005c84:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c88:	f1bb 0f00 	cmp.w	fp, #0
 8005c8c:	d023      	beq.n	8005cd6 <__multiply+0xca>
 8005c8e:	4689      	mov	r9, r1
 8005c90:	46ac      	mov	ip, r5
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c9a:	f8dc a000 	ldr.w	sl, [ip]
 8005c9e:	b2a3      	uxth	r3, r4
 8005ca0:	fa1f fa8a 	uxth.w	sl, sl
 8005ca4:	fb0b a303 	mla	r3, fp, r3, sl
 8005ca8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cac:	f8dc 4000 	ldr.w	r4, [ip]
 8005cb0:	4443      	add	r3, r8
 8005cb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cb6:	fb0b 840a 	mla	r4, fp, sl, r8
 8005cba:	46e2      	mov	sl, ip
 8005cbc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cc6:	454f      	cmp	r7, r9
 8005cc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ccc:	f84a 3b04 	str.w	r3, [sl], #4
 8005cd0:	d82b      	bhi.n	8005d2a <__multiply+0x11e>
 8005cd2:	f8cc 8004 	str.w	r8, [ip, #4]
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	3204      	adds	r2, #4
 8005cda:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005cde:	f1ba 0f00 	cmp.w	sl, #0
 8005ce2:	d020      	beq.n	8005d26 <__multiply+0x11a>
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	46a8      	mov	r8, r5
 8005ce8:	f04f 0b00 	mov.w	fp, #0
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	f8b9 c000 	ldrh.w	ip, [r9]
 8005cf2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	fb0a 440c 	mla	r4, sl, ip, r4
 8005cfc:	46c4      	mov	ip, r8
 8005cfe:	445c      	add	r4, fp
 8005d00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d04:	f84c 3b04 	str.w	r3, [ip], #4
 8005d08:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d0c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	fb0a b303 	mla	r3, sl, r3, fp
 8005d16:	454f      	cmp	r7, r9
 8005d18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d1c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005d20:	d805      	bhi.n	8005d2e <__multiply+0x122>
 8005d22:	f8c8 3004 	str.w	r3, [r8, #4]
 8005d26:	3504      	adds	r5, #4
 8005d28:	e79b      	b.n	8005c62 <__multiply+0x56>
 8005d2a:	46d4      	mov	ip, sl
 8005d2c:	e7b3      	b.n	8005c96 <__multiply+0x8a>
 8005d2e:	46e0      	mov	r8, ip
 8005d30:	e7dd      	b.n	8005cee <__multiply+0xe2>
 8005d32:	3e01      	subs	r6, #1
 8005d34:	e799      	b.n	8005c6a <__multiply+0x5e>
	...

08005d38 <__pow5mult>:
 8005d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	f012 0203 	ands.w	r2, r2, #3
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	d007      	beq.n	8005d58 <__pow5mult+0x20>
 8005d48:	4c21      	ldr	r4, [pc, #132]	; (8005dd0 <__pow5mult+0x98>)
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d52:	f7ff fe8b 	bl	8005a6c <__multadd>
 8005d56:	4607      	mov	r7, r0
 8005d58:	10ad      	asrs	r5, r5, #2
 8005d5a:	d035      	beq.n	8005dc8 <__pow5mult+0x90>
 8005d5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d5e:	b93c      	cbnz	r4, 8005d70 <__pow5mult+0x38>
 8005d60:	2010      	movs	r0, #16
 8005d62:	f7ff fe05 	bl	8005970 <malloc>
 8005d66:	6270      	str	r0, [r6, #36]	; 0x24
 8005d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d6c:	6004      	str	r4, [r0, #0]
 8005d6e:	60c4      	str	r4, [r0, #12]
 8005d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d78:	b94c      	cbnz	r4, 8005d8e <__pow5mult+0x56>
 8005d7a:	f240 2171 	movw	r1, #625	; 0x271
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ff3b 	bl	8005bfa <__i2b>
 8005d84:	2300      	movs	r3, #0
 8005d86:	4604      	mov	r4, r0
 8005d88:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d8c:	6003      	str	r3, [r0, #0]
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	07eb      	lsls	r3, r5, #31
 8005d94:	d50a      	bpl.n	8005dac <__pow5mult+0x74>
 8005d96:	4639      	mov	r1, r7
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ff36 	bl	8005c0c <__multiply>
 8005da0:	4681      	mov	r9, r0
 8005da2:	4639      	mov	r1, r7
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fe4a 	bl	8005a3e <_Bfree>
 8005daa:	464f      	mov	r7, r9
 8005dac:	106d      	asrs	r5, r5, #1
 8005dae:	d00b      	beq.n	8005dc8 <__pow5mult+0x90>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	b938      	cbnz	r0, 8005dc4 <__pow5mult+0x8c>
 8005db4:	4622      	mov	r2, r4
 8005db6:	4621      	mov	r1, r4
 8005db8:	4630      	mov	r0, r6
 8005dba:	f7ff ff27 	bl	8005c0c <__multiply>
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	f8c0 8000 	str.w	r8, [r0]
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	e7e4      	b.n	8005d92 <__pow5mult+0x5a>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dce:	bf00      	nop
 8005dd0:	08006898 	.word	0x08006898

08005dd4 <__lshift>:
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	460c      	mov	r4, r1
 8005dda:	4607      	mov	r7, r0
 8005ddc:	4616      	mov	r6, r2
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005de4:	eb0a 0903 	add.w	r9, sl, r3
 8005de8:	6849      	ldr	r1, [r1, #4]
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	f109 0501 	add.w	r5, r9, #1
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	db32      	blt.n	8005e5a <__lshift+0x86>
 8005df4:	4638      	mov	r0, r7
 8005df6:	f7ff fdee 	bl	80059d6 <_Balloc>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f100 0114 	add.w	r1, r0, #20
 8005e04:	4553      	cmp	r3, sl
 8005e06:	db2b      	blt.n	8005e60 <__lshift+0x8c>
 8005e08:	6920      	ldr	r0, [r4, #16]
 8005e0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e0e:	f104 0314 	add.w	r3, r4, #20
 8005e12:	f016 021f 	ands.w	r2, r6, #31
 8005e16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e1e:	d025      	beq.n	8005e6c <__lshift+0x98>
 8005e20:	2000      	movs	r0, #0
 8005e22:	f1c2 0e20 	rsb	lr, r2, #32
 8005e26:	468a      	mov	sl, r1
 8005e28:	681e      	ldr	r6, [r3, #0]
 8005e2a:	4096      	lsls	r6, r2
 8005e2c:	4330      	orrs	r0, r6
 8005e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8005e32:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e36:	459c      	cmp	ip, r3
 8005e38:	fa20 f00e 	lsr.w	r0, r0, lr
 8005e3c:	d814      	bhi.n	8005e68 <__lshift+0x94>
 8005e3e:	6048      	str	r0, [r1, #4]
 8005e40:	b108      	cbz	r0, 8005e46 <__lshift+0x72>
 8005e42:	f109 0502 	add.w	r5, r9, #2
 8005e46:	3d01      	subs	r5, #1
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e4e:	4621      	mov	r1, r4
 8005e50:	f7ff fdf5 	bl	8005a3e <_Bfree>
 8005e54:	4640      	mov	r0, r8
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	3101      	adds	r1, #1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	e7c7      	b.n	8005df0 <__lshift+0x1c>
 8005e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e64:	3301      	adds	r3, #1
 8005e66:	e7cd      	b.n	8005e04 <__lshift+0x30>
 8005e68:	4651      	mov	r1, sl
 8005e6a:	e7dc      	b.n	8005e26 <__lshift+0x52>
 8005e6c:	3904      	subs	r1, #4
 8005e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e72:	459c      	cmp	ip, r3
 8005e74:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e78:	d8f9      	bhi.n	8005e6e <__lshift+0x9a>
 8005e7a:	e7e4      	b.n	8005e46 <__lshift+0x72>

08005e7c <__mcmp>:
 8005e7c:	6903      	ldr	r3, [r0, #16]
 8005e7e:	690a      	ldr	r2, [r1, #16]
 8005e80:	b530      	push	{r4, r5, lr}
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	d10c      	bne.n	8005ea0 <__mcmp+0x24>
 8005e86:	0092      	lsls	r2, r2, #2
 8005e88:	3014      	adds	r0, #20
 8005e8a:	3114      	adds	r1, #20
 8005e8c:	1884      	adds	r4, r0, r2
 8005e8e:	4411      	add	r1, r2
 8005e90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e98:	4295      	cmp	r5, r2
 8005e9a:	d003      	beq.n	8005ea4 <__mcmp+0x28>
 8005e9c:	d305      	bcc.n	8005eaa <__mcmp+0x2e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	bd30      	pop	{r4, r5, pc}
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d3f3      	bcc.n	8005e90 <__mcmp+0x14>
 8005ea8:	e7fa      	b.n	8005ea0 <__mcmp+0x24>
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	e7f7      	b.n	8005ea0 <__mcmp+0x24>

08005eb0 <__mdiff>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	f7ff ffdd 	bl	8005e7c <__mcmp>
 8005ec2:	1e06      	subs	r6, r0, #0
 8005ec4:	d108      	bne.n	8005ed8 <__mdiff+0x28>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f7ff fd84 	bl	80059d6 <_Balloc>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	bfa4      	itt	ge
 8005eda:	4623      	movge	r3, r4
 8005edc:	462c      	movge	r4, r5
 8005ede:	4638      	mov	r0, r7
 8005ee0:	6861      	ldr	r1, [r4, #4]
 8005ee2:	bfa6      	itte	ge
 8005ee4:	461d      	movge	r5, r3
 8005ee6:	2600      	movge	r6, #0
 8005ee8:	2601      	movlt	r6, #1
 8005eea:	f7ff fd74 	bl	80059d6 <_Balloc>
 8005eee:	f04f 0e00 	mov.w	lr, #0
 8005ef2:	60c6      	str	r6, [r0, #12]
 8005ef4:	692b      	ldr	r3, [r5, #16]
 8005ef6:	6926      	ldr	r6, [r4, #16]
 8005ef8:	f104 0214 	add.w	r2, r4, #20
 8005efc:	f105 0914 	add.w	r9, r5, #20
 8005f00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f08:	f100 0114 	add.w	r1, r0, #20
 8005f0c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f10:	f859 5b04 	ldr.w	r5, [r9], #4
 8005f14:	fa1f f38a 	uxth.w	r3, sl
 8005f18:	4473      	add	r3, lr
 8005f1a:	b2ac      	uxth	r4, r5
 8005f1c:	1b1b      	subs	r3, r3, r4
 8005f1e:	0c2c      	lsrs	r4, r5, #16
 8005f20:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005f24:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005f2e:	45c8      	cmp	r8, r9
 8005f30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005f34:	4694      	mov	ip, r2
 8005f36:	f841 4b04 	str.w	r4, [r1], #4
 8005f3a:	d8e7      	bhi.n	8005f0c <__mdiff+0x5c>
 8005f3c:	45bc      	cmp	ip, r7
 8005f3e:	d304      	bcc.n	8005f4a <__mdiff+0x9a>
 8005f40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f44:	b183      	cbz	r3, 8005f68 <__mdiff+0xb8>
 8005f46:	6106      	str	r6, [r0, #16]
 8005f48:	e7c4      	b.n	8005ed4 <__mdiff+0x24>
 8005f4a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005f4e:	b2a2      	uxth	r2, r4
 8005f50:	4472      	add	r2, lr
 8005f52:	1413      	asrs	r3, r2, #16
 8005f54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f5e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005f62:	f841 2b04 	str.w	r2, [r1], #4
 8005f66:	e7e9      	b.n	8005f3c <__mdiff+0x8c>
 8005f68:	3e01      	subs	r6, #1
 8005f6a:	e7e9      	b.n	8005f40 <__mdiff+0x90>

08005f6c <__ulp>:
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <__ulp+0x44>)
 8005f6e:	400b      	ands	r3, r1
 8005f70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dd02      	ble.n	8005f7e <__ulp+0x12>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4770      	bx	lr
 8005f7e:	425b      	negs	r3, r3
 8005f80:	151b      	asrs	r3, r3, #20
 8005f82:	2b13      	cmp	r3, #19
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	dc04      	bgt.n	8005f98 <__ulp+0x2c>
 8005f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005f92:	fa42 f103 	asr.w	r1, r2, r3
 8005f96:	4770      	bx	lr
 8005f98:	2201      	movs	r2, #1
 8005f9a:	3b14      	subs	r3, #20
 8005f9c:	2b1e      	cmp	r3, #30
 8005f9e:	bfce      	itee	gt
 8005fa0:	4613      	movgt	r3, r2
 8005fa2:	f1c3 031f 	rsble	r3, r3, #31
 8005fa6:	fa02 f303 	lslle.w	r3, r2, r3
 8005faa:	4618      	mov	r0, r3
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	7ff00000 	.word	0x7ff00000

08005fb4 <__b2d>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	6907      	ldr	r7, [r0, #16]
 8005fba:	f100 0914 	add.w	r9, r0, #20
 8005fbe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005fc2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005fc6:	f1a7 0804 	sub.w	r8, r7, #4
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff fdc7 	bl	8005b5e <__hi0bits>
 8005fd0:	f1c0 0320 	rsb	r3, r0, #32
 8005fd4:	280a      	cmp	r0, #10
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	491e      	ldr	r1, [pc, #120]	; (8006054 <__b2d+0xa0>)
 8005fda:	dc17      	bgt.n	800600c <__b2d+0x58>
 8005fdc:	45c1      	cmp	r9, r8
 8005fde:	bf28      	it	cs
 8005fe0:	2200      	movcs	r2, #0
 8005fe2:	f1c0 0c0b 	rsb	ip, r0, #11
 8005fe6:	fa26 f30c 	lsr.w	r3, r6, ip
 8005fea:	bf38      	it	cc
 8005fec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005ff0:	ea43 0501 	orr.w	r5, r3, r1
 8005ff4:	f100 0315 	add.w	r3, r0, #21
 8005ff8:	fa06 f303 	lsl.w	r3, r6, r3
 8005ffc:	fa22 f20c 	lsr.w	r2, r2, ip
 8006000:	ea43 0402 	orr.w	r4, r3, r2
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600c:	45c1      	cmp	r9, r8
 800600e:	bf3a      	itte	cc
 8006010:	f1a7 0808 	subcc.w	r8, r7, #8
 8006014:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006018:	2200      	movcs	r2, #0
 800601a:	f1b0 030b 	subs.w	r3, r0, #11
 800601e:	d015      	beq.n	800604c <__b2d+0x98>
 8006020:	409e      	lsls	r6, r3
 8006022:	f1c3 0720 	rsb	r7, r3, #32
 8006026:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800602a:	fa22 f107 	lsr.w	r1, r2, r7
 800602e:	45c8      	cmp	r8, r9
 8006030:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006034:	ea46 0501 	orr.w	r5, r6, r1
 8006038:	bf94      	ite	ls
 800603a:	2100      	movls	r1, #0
 800603c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006040:	fa02 f003 	lsl.w	r0, r2, r3
 8006044:	40f9      	lsrs	r1, r7
 8006046:	ea40 0401 	orr.w	r4, r0, r1
 800604a:	e7db      	b.n	8006004 <__b2d+0x50>
 800604c:	ea46 0501 	orr.w	r5, r6, r1
 8006050:	4614      	mov	r4, r2
 8006052:	e7d7      	b.n	8006004 <__b2d+0x50>
 8006054:	3ff00000 	.word	0x3ff00000

08006058 <__d2b>:
 8006058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800605c:	461c      	mov	r4, r3
 800605e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006062:	2101      	movs	r1, #1
 8006064:	4690      	mov	r8, r2
 8006066:	f7ff fcb6 	bl	80059d6 <_Balloc>
 800606a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800606e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006072:	4607      	mov	r7, r0
 8006074:	bb34      	cbnz	r4, 80060c4 <__d2b+0x6c>
 8006076:	9201      	str	r2, [sp, #4]
 8006078:	f1b8 0200 	subs.w	r2, r8, #0
 800607c:	d027      	beq.n	80060ce <__d2b+0x76>
 800607e:	a802      	add	r0, sp, #8
 8006080:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006084:	f7ff fd8a 	bl	8005b9c <__lo0bits>
 8006088:	9900      	ldr	r1, [sp, #0]
 800608a:	b1f0      	cbz	r0, 80060ca <__d2b+0x72>
 800608c:	9a01      	ldr	r2, [sp, #4]
 800608e:	f1c0 0320 	rsb	r3, r0, #32
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	430b      	orrs	r3, r1
 8006098:	40c2      	lsrs	r2, r0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	9201      	str	r2, [sp, #4]
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2102      	movne	r1, #2
 80060a6:	2101      	moveq	r1, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	b1c4      	cbz	r4, 80060e0 <__d2b+0x88>
 80060ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060b2:	4404      	add	r4, r0
 80060b4:	6034      	str	r4, [r6, #0]
 80060b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	4638      	mov	r0, r7
 80060be:	b002      	add	sp, #8
 80060c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060c8:	e7d5      	b.n	8006076 <__d2b+0x1e>
 80060ca:	6179      	str	r1, [r7, #20]
 80060cc:	e7e7      	b.n	800609e <__d2b+0x46>
 80060ce:	a801      	add	r0, sp, #4
 80060d0:	f7ff fd64 	bl	8005b9c <__lo0bits>
 80060d4:	2101      	movs	r1, #1
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	6139      	str	r1, [r7, #16]
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	3020      	adds	r0, #32
 80060de:	e7e5      	b.n	80060ac <__d2b+0x54>
 80060e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	6918      	ldr	r0, [r3, #16]
 80060ec:	f7ff fd37 	bl	8005b5e <__hi0bits>
 80060f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060f4:	e7e1      	b.n	80060ba <__d2b+0x62>

080060f6 <__ratio>:
 80060f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	4688      	mov	r8, r1
 80060fc:	4669      	mov	r1, sp
 80060fe:	4681      	mov	r9, r0
 8006100:	f7ff ff58 	bl	8005fb4 <__b2d>
 8006104:	468b      	mov	fp, r1
 8006106:	4606      	mov	r6, r0
 8006108:	460f      	mov	r7, r1
 800610a:	4640      	mov	r0, r8
 800610c:	a901      	add	r1, sp, #4
 800610e:	f7ff ff51 	bl	8005fb4 <__b2d>
 8006112:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006116:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800611a:	460d      	mov	r5, r1
 800611c:	eba3 0c02 	sub.w	ip, r3, r2
 8006120:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800612a:	2b00      	cmp	r3, #0
 800612c:	bfd5      	itete	le
 800612e:	460a      	movle	r2, r1
 8006130:	463a      	movgt	r2, r7
 8006132:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006136:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800613a:	bfd8      	it	le
 800613c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006140:	462b      	mov	r3, r5
 8006142:	4602      	mov	r2, r0
 8006144:	4659      	mov	r1, fp
 8006146:	4630      	mov	r0, r6
 8006148:	f7fa fb5c 	bl	8000804 <__aeabi_ddiv>
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006152 <__copybits>:
 8006152:	3901      	subs	r1, #1
 8006154:	b510      	push	{r4, lr}
 8006156:	1149      	asrs	r1, r1, #5
 8006158:	6914      	ldr	r4, [r2, #16]
 800615a:	3101      	adds	r1, #1
 800615c:	f102 0314 	add.w	r3, r2, #20
 8006160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006164:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006168:	42a3      	cmp	r3, r4
 800616a:	4602      	mov	r2, r0
 800616c:	d303      	bcc.n	8006176 <__copybits+0x24>
 800616e:	2300      	movs	r3, #0
 8006170:	428a      	cmp	r2, r1
 8006172:	d305      	bcc.n	8006180 <__copybits+0x2e>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	f853 2b04 	ldr.w	r2, [r3], #4
 800617a:	f840 2b04 	str.w	r2, [r0], #4
 800617e:	e7f3      	b.n	8006168 <__copybits+0x16>
 8006180:	f842 3b04 	str.w	r3, [r2], #4
 8006184:	e7f4      	b.n	8006170 <__copybits+0x1e>

08006186 <__any_on>:
 8006186:	f100 0214 	add.w	r2, r0, #20
 800618a:	6900      	ldr	r0, [r0, #16]
 800618c:	114b      	asrs	r3, r1, #5
 800618e:	4298      	cmp	r0, r3
 8006190:	b510      	push	{r4, lr}
 8006192:	db11      	blt.n	80061b8 <__any_on+0x32>
 8006194:	dd0a      	ble.n	80061ac <__any_on+0x26>
 8006196:	f011 011f 	ands.w	r1, r1, #31
 800619a:	d007      	beq.n	80061ac <__any_on+0x26>
 800619c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80061a0:	fa24 f001 	lsr.w	r0, r4, r1
 80061a4:	fa00 f101 	lsl.w	r1, r0, r1
 80061a8:	428c      	cmp	r4, r1
 80061aa:	d10b      	bne.n	80061c4 <__any_on+0x3e>
 80061ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d803      	bhi.n	80061bc <__any_on+0x36>
 80061b4:	2000      	movs	r0, #0
 80061b6:	bd10      	pop	{r4, pc}
 80061b8:	4603      	mov	r3, r0
 80061ba:	e7f7      	b.n	80061ac <__any_on+0x26>
 80061bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d0f5      	beq.n	80061b0 <__any_on+0x2a>
 80061c4:	2001      	movs	r0, #1
 80061c6:	e7f6      	b.n	80061b6 <__any_on+0x30>

080061c8 <_calloc_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	fb02 f401 	mul.w	r4, r2, r1
 80061ce:	4621      	mov	r1, r4
 80061d0:	f000 f854 	bl	800627c <_malloc_r>
 80061d4:	4605      	mov	r5, r0
 80061d6:	b118      	cbz	r0, 80061e0 <_calloc_r+0x18>
 80061d8:	4622      	mov	r2, r4
 80061da:	2100      	movs	r1, #0
 80061dc:	f7fc fd2e 	bl	8002c3c <memset>
 80061e0:	4628      	mov	r0, r5
 80061e2:	bd38      	pop	{r3, r4, r5, pc}

080061e4 <_free_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4605      	mov	r5, r0
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d043      	beq.n	8006274 <_free_r+0x90>
 80061ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f0:	1f0c      	subs	r4, r1, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bfb8      	it	lt
 80061f6:	18e4      	addlt	r4, r4, r3
 80061f8:	f000 fa34 	bl	8006664 <__malloc_lock>
 80061fc:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <_free_r+0x94>)
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	4610      	mov	r0, r2
 8006202:	b933      	cbnz	r3, 8006212 <_free_r+0x2e>
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	6014      	str	r4, [r2, #0]
 8006208:	4628      	mov	r0, r5
 800620a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800620e:	f000 ba2a 	b.w	8006666 <__malloc_unlock>
 8006212:	42a3      	cmp	r3, r4
 8006214:	d90b      	bls.n	800622e <_free_r+0x4a>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	1862      	adds	r2, r4, r1
 800621a:	4293      	cmp	r3, r2
 800621c:	bf01      	itttt	eq
 800621e:	681a      	ldreq	r2, [r3, #0]
 8006220:	685b      	ldreq	r3, [r3, #4]
 8006222:	1852      	addeq	r2, r2, r1
 8006224:	6022      	streq	r2, [r4, #0]
 8006226:	6063      	str	r3, [r4, #4]
 8006228:	6004      	str	r4, [r0, #0]
 800622a:	e7ed      	b.n	8006208 <_free_r+0x24>
 800622c:	4613      	mov	r3, r2
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	b10a      	cbz	r2, 8006236 <_free_r+0x52>
 8006232:	42a2      	cmp	r2, r4
 8006234:	d9fa      	bls.n	800622c <_free_r+0x48>
 8006236:	6819      	ldr	r1, [r3, #0]
 8006238:	1858      	adds	r0, r3, r1
 800623a:	42a0      	cmp	r0, r4
 800623c:	d10b      	bne.n	8006256 <_free_r+0x72>
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	4401      	add	r1, r0
 8006242:	1858      	adds	r0, r3, r1
 8006244:	4282      	cmp	r2, r0
 8006246:	6019      	str	r1, [r3, #0]
 8006248:	d1de      	bne.n	8006208 <_free_r+0x24>
 800624a:	6810      	ldr	r0, [r2, #0]
 800624c:	6852      	ldr	r2, [r2, #4]
 800624e:	4401      	add	r1, r0
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	e7d8      	b.n	8006208 <_free_r+0x24>
 8006256:	d902      	bls.n	800625e <_free_r+0x7a>
 8006258:	230c      	movs	r3, #12
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	e7d4      	b.n	8006208 <_free_r+0x24>
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	1821      	adds	r1, r4, r0
 8006262:	428a      	cmp	r2, r1
 8006264:	bf01      	itttt	eq
 8006266:	6811      	ldreq	r1, [r2, #0]
 8006268:	6852      	ldreq	r2, [r2, #4]
 800626a:	1809      	addeq	r1, r1, r0
 800626c:	6021      	streq	r1, [r4, #0]
 800626e:	6062      	str	r2, [r4, #4]
 8006270:	605c      	str	r4, [r3, #4]
 8006272:	e7c9      	b.n	8006208 <_free_r+0x24>
 8006274:	bd38      	pop	{r3, r4, r5, pc}
 8006276:	bf00      	nop
 8006278:	20000554 	.word	0x20000554

0800627c <_malloc_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	1ccd      	adds	r5, r1, #3
 8006280:	f025 0503 	bic.w	r5, r5, #3
 8006284:	3508      	adds	r5, #8
 8006286:	2d0c      	cmp	r5, #12
 8006288:	bf38      	it	cc
 800628a:	250c      	movcc	r5, #12
 800628c:	2d00      	cmp	r5, #0
 800628e:	4606      	mov	r6, r0
 8006290:	db01      	blt.n	8006296 <_malloc_r+0x1a>
 8006292:	42a9      	cmp	r1, r5
 8006294:	d903      	bls.n	800629e <_malloc_r+0x22>
 8006296:	230c      	movs	r3, #12
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	2000      	movs	r0, #0
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	f000 f9e1 	bl	8006664 <__malloc_lock>
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <_malloc_r+0xac>)
 80062a4:	6814      	ldr	r4, [r2, #0]
 80062a6:	4621      	mov	r1, r4
 80062a8:	b991      	cbnz	r1, 80062d0 <_malloc_r+0x54>
 80062aa:	4c20      	ldr	r4, [pc, #128]	; (800632c <_malloc_r+0xb0>)
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	b91b      	cbnz	r3, 80062b8 <_malloc_r+0x3c>
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 f98f 	bl	80065d4 <_sbrk_r>
 80062b6:	6020      	str	r0, [r4, #0]
 80062b8:	4629      	mov	r1, r5
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 f98a 	bl	80065d4 <_sbrk_r>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d124      	bne.n	800630e <_malloc_r+0x92>
 80062c4:	230c      	movs	r3, #12
 80062c6:	4630      	mov	r0, r6
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	f000 f9cc 	bl	8006666 <__malloc_unlock>
 80062ce:	e7e4      	b.n	800629a <_malloc_r+0x1e>
 80062d0:	680b      	ldr	r3, [r1, #0]
 80062d2:	1b5b      	subs	r3, r3, r5
 80062d4:	d418      	bmi.n	8006308 <_malloc_r+0x8c>
 80062d6:	2b0b      	cmp	r3, #11
 80062d8:	d90f      	bls.n	80062fa <_malloc_r+0x7e>
 80062da:	600b      	str	r3, [r1, #0]
 80062dc:	18cc      	adds	r4, r1, r3
 80062de:	50cd      	str	r5, [r1, r3]
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 f9c0 	bl	8006666 <__malloc_unlock>
 80062e6:	f104 000b 	add.w	r0, r4, #11
 80062ea:	1d23      	adds	r3, r4, #4
 80062ec:	f020 0007 	bic.w	r0, r0, #7
 80062f0:	1ac3      	subs	r3, r0, r3
 80062f2:	d0d3      	beq.n	800629c <_malloc_r+0x20>
 80062f4:	425a      	negs	r2, r3
 80062f6:	50e2      	str	r2, [r4, r3]
 80062f8:	e7d0      	b.n	800629c <_malloc_r+0x20>
 80062fa:	684b      	ldr	r3, [r1, #4]
 80062fc:	428c      	cmp	r4, r1
 80062fe:	bf16      	itet	ne
 8006300:	6063      	strne	r3, [r4, #4]
 8006302:	6013      	streq	r3, [r2, #0]
 8006304:	460c      	movne	r4, r1
 8006306:	e7eb      	b.n	80062e0 <_malloc_r+0x64>
 8006308:	460c      	mov	r4, r1
 800630a:	6849      	ldr	r1, [r1, #4]
 800630c:	e7cc      	b.n	80062a8 <_malloc_r+0x2c>
 800630e:	1cc4      	adds	r4, r0, #3
 8006310:	f024 0403 	bic.w	r4, r4, #3
 8006314:	42a0      	cmp	r0, r4
 8006316:	d005      	beq.n	8006324 <_malloc_r+0xa8>
 8006318:	1a21      	subs	r1, r4, r0
 800631a:	4630      	mov	r0, r6
 800631c:	f000 f95a 	bl	80065d4 <_sbrk_r>
 8006320:	3001      	adds	r0, #1
 8006322:	d0cf      	beq.n	80062c4 <_malloc_r+0x48>
 8006324:	6025      	str	r5, [r4, #0]
 8006326:	e7db      	b.n	80062e0 <_malloc_r+0x64>
 8006328:	20000554 	.word	0x20000554
 800632c:	20000558 	.word	0x20000558

08006330 <__ssputs_r>:
 8006330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	688e      	ldr	r6, [r1, #8]
 8006336:	4682      	mov	sl, r0
 8006338:	429e      	cmp	r6, r3
 800633a:	460c      	mov	r4, r1
 800633c:	4690      	mov	r8, r2
 800633e:	4699      	mov	r9, r3
 8006340:	d837      	bhi.n	80063b2 <__ssputs_r+0x82>
 8006342:	898a      	ldrh	r2, [r1, #12]
 8006344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006348:	d031      	beq.n	80063ae <__ssputs_r+0x7e>
 800634a:	2302      	movs	r3, #2
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	6909      	ldr	r1, [r1, #16]
 8006350:	1a6f      	subs	r7, r5, r1
 8006352:	6965      	ldr	r5, [r4, #20]
 8006354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006358:	fb95 f5f3 	sdiv	r5, r5, r3
 800635c:	f109 0301 	add.w	r3, r9, #1
 8006360:	443b      	add	r3, r7
 8006362:	429d      	cmp	r5, r3
 8006364:	bf38      	it	cc
 8006366:	461d      	movcc	r5, r3
 8006368:	0553      	lsls	r3, r2, #21
 800636a:	d530      	bpl.n	80063ce <__ssputs_r+0x9e>
 800636c:	4629      	mov	r1, r5
 800636e:	f7ff ff85 	bl	800627c <_malloc_r>
 8006372:	4606      	mov	r6, r0
 8006374:	b950      	cbnz	r0, 800638c <__ssputs_r+0x5c>
 8006376:	230c      	movs	r3, #12
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	f8ca 3000 	str.w	r3, [sl]
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638c:	463a      	mov	r2, r7
 800638e:	6921      	ldr	r1, [r4, #16]
 8006390:	f7ff fb16 	bl	80059c0 <memcpy>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	6126      	str	r6, [r4, #16]
 80063a2:	443e      	add	r6, r7
 80063a4:	6026      	str	r6, [r4, #0]
 80063a6:	464e      	mov	r6, r9
 80063a8:	6165      	str	r5, [r4, #20]
 80063aa:	1bed      	subs	r5, r5, r7
 80063ac:	60a5      	str	r5, [r4, #8]
 80063ae:	454e      	cmp	r6, r9
 80063b0:	d900      	bls.n	80063b4 <__ssputs_r+0x84>
 80063b2:	464e      	mov	r6, r9
 80063b4:	4632      	mov	r2, r6
 80063b6:	4641      	mov	r1, r8
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	f000 f93a 	bl	8006632 <memmove>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	2000      	movs	r0, #0
 80063c2:	1b9b      	subs	r3, r3, r6
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	441e      	add	r6, r3
 80063ca:	6026      	str	r6, [r4, #0]
 80063cc:	e7dc      	b.n	8006388 <__ssputs_r+0x58>
 80063ce:	462a      	mov	r2, r5
 80063d0:	f000 f94a 	bl	8006668 <_realloc_r>
 80063d4:	4606      	mov	r6, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1e2      	bne.n	80063a0 <__ssputs_r+0x70>
 80063da:	6921      	ldr	r1, [r4, #16]
 80063dc:	4650      	mov	r0, sl
 80063de:	f7ff ff01 	bl	80061e4 <_free_r>
 80063e2:	e7c8      	b.n	8006376 <__ssputs_r+0x46>

080063e4 <_svfiprintf_r>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	461d      	mov	r5, r3
 80063ea:	898b      	ldrh	r3, [r1, #12]
 80063ec:	b09d      	sub	sp, #116	; 0x74
 80063ee:	061f      	lsls	r7, r3, #24
 80063f0:	4680      	mov	r8, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	4616      	mov	r6, r2
 80063f6:	d50f      	bpl.n	8006418 <_svfiprintf_r+0x34>
 80063f8:	690b      	ldr	r3, [r1, #16]
 80063fa:	b96b      	cbnz	r3, 8006418 <_svfiprintf_r+0x34>
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	f7ff ff3d 	bl	800627c <_malloc_r>
 8006402:	6020      	str	r0, [r4, #0]
 8006404:	6120      	str	r0, [r4, #16]
 8006406:	b928      	cbnz	r0, 8006414 <_svfiprintf_r+0x30>
 8006408:	230c      	movs	r3, #12
 800640a:	f8c8 3000 	str.w	r3, [r8]
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	e0c8      	b.n	80065a6 <_svfiprintf_r+0x1c2>
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	2300      	movs	r3, #0
 800641a:	9309      	str	r3, [sp, #36]	; 0x24
 800641c:	2320      	movs	r3, #32
 800641e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006422:	2330      	movs	r3, #48	; 0x30
 8006424:	f04f 0b01 	mov.w	fp, #1
 8006428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800642c:	9503      	str	r5, [sp, #12]
 800642e:	4637      	mov	r7, r6
 8006430:	463d      	mov	r5, r7
 8006432:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006436:	b10b      	cbz	r3, 800643c <_svfiprintf_r+0x58>
 8006438:	2b25      	cmp	r3, #37	; 0x25
 800643a:	d13e      	bne.n	80064ba <_svfiprintf_r+0xd6>
 800643c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006440:	d00b      	beq.n	800645a <_svfiprintf_r+0x76>
 8006442:	4653      	mov	r3, sl
 8006444:	4632      	mov	r2, r6
 8006446:	4621      	mov	r1, r4
 8006448:	4640      	mov	r0, r8
 800644a:	f7ff ff71 	bl	8006330 <__ssputs_r>
 800644e:	3001      	adds	r0, #1
 8006450:	f000 80a4 	beq.w	800659c <_svfiprintf_r+0x1b8>
 8006454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006456:	4453      	add	r3, sl
 8006458:	9309      	str	r3, [sp, #36]	; 0x24
 800645a:	783b      	ldrb	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 809d 	beq.w	800659c <_svfiprintf_r+0x1b8>
 8006462:	2300      	movs	r3, #0
 8006464:	f04f 32ff 	mov.w	r2, #4294967295
 8006468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	9307      	str	r3, [sp, #28]
 8006470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006474:	931a      	str	r3, [sp, #104]	; 0x68
 8006476:	462f      	mov	r7, r5
 8006478:	2205      	movs	r2, #5
 800647a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800647e:	4850      	ldr	r0, [pc, #320]	; (80065c0 <_svfiprintf_r+0x1dc>)
 8006480:	f7ff fa90 	bl	80059a4 <memchr>
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	b9d0      	cbnz	r0, 80064be <_svfiprintf_r+0xda>
 8006488:	06d9      	lsls	r1, r3, #27
 800648a:	bf44      	itt	mi
 800648c:	2220      	movmi	r2, #32
 800648e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006492:	071a      	lsls	r2, r3, #28
 8006494:	bf44      	itt	mi
 8006496:	222b      	movmi	r2, #43	; 0x2b
 8006498:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800649c:	782a      	ldrb	r2, [r5, #0]
 800649e:	2a2a      	cmp	r2, #42	; 0x2a
 80064a0:	d015      	beq.n	80064ce <_svfiprintf_r+0xea>
 80064a2:	462f      	mov	r7, r5
 80064a4:	2000      	movs	r0, #0
 80064a6:	250a      	movs	r5, #10
 80064a8:	9a07      	ldr	r2, [sp, #28]
 80064aa:	4639      	mov	r1, r7
 80064ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b0:	3b30      	subs	r3, #48	; 0x30
 80064b2:	2b09      	cmp	r3, #9
 80064b4:	d94d      	bls.n	8006552 <_svfiprintf_r+0x16e>
 80064b6:	b1b8      	cbz	r0, 80064e8 <_svfiprintf_r+0x104>
 80064b8:	e00f      	b.n	80064da <_svfiprintf_r+0xf6>
 80064ba:	462f      	mov	r7, r5
 80064bc:	e7b8      	b.n	8006430 <_svfiprintf_r+0x4c>
 80064be:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <_svfiprintf_r+0x1dc>)
 80064c0:	463d      	mov	r5, r7
 80064c2:	1a80      	subs	r0, r0, r2
 80064c4:	fa0b f000 	lsl.w	r0, fp, r0
 80064c8:	4318      	orrs	r0, r3
 80064ca:	9004      	str	r0, [sp, #16]
 80064cc:	e7d3      	b.n	8006476 <_svfiprintf_r+0x92>
 80064ce:	9a03      	ldr	r2, [sp, #12]
 80064d0:	1d11      	adds	r1, r2, #4
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	9103      	str	r1, [sp, #12]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	db01      	blt.n	80064de <_svfiprintf_r+0xfa>
 80064da:	9207      	str	r2, [sp, #28]
 80064dc:	e004      	b.n	80064e8 <_svfiprintf_r+0x104>
 80064de:	4252      	negs	r2, r2
 80064e0:	f043 0302 	orr.w	r3, r3, #2
 80064e4:	9207      	str	r2, [sp, #28]
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	783b      	ldrb	r3, [r7, #0]
 80064ea:	2b2e      	cmp	r3, #46	; 0x2e
 80064ec:	d10c      	bne.n	8006508 <_svfiprintf_r+0x124>
 80064ee:	787b      	ldrb	r3, [r7, #1]
 80064f0:	2b2a      	cmp	r3, #42	; 0x2a
 80064f2:	d133      	bne.n	800655c <_svfiprintf_r+0x178>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	3702      	adds	r7, #2
 80064f8:	1d1a      	adds	r2, r3, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	9203      	str	r2, [sp, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bfb8      	it	lt
 8006502:	f04f 33ff 	movlt.w	r3, #4294967295
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	4d2e      	ldr	r5, [pc, #184]	; (80065c4 <_svfiprintf_r+0x1e0>)
 800650a:	2203      	movs	r2, #3
 800650c:	7839      	ldrb	r1, [r7, #0]
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fa48 	bl	80059a4 <memchr>
 8006514:	b138      	cbz	r0, 8006526 <_svfiprintf_r+0x142>
 8006516:	2340      	movs	r3, #64	; 0x40
 8006518:	1b40      	subs	r0, r0, r5
 800651a:	fa03 f000 	lsl.w	r0, r3, r0
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	3701      	adds	r7, #1
 8006522:	4303      	orrs	r3, r0
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	7839      	ldrb	r1, [r7, #0]
 8006528:	2206      	movs	r2, #6
 800652a:	4827      	ldr	r0, [pc, #156]	; (80065c8 <_svfiprintf_r+0x1e4>)
 800652c:	1c7e      	adds	r6, r7, #1
 800652e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006532:	f7ff fa37 	bl	80059a4 <memchr>
 8006536:	2800      	cmp	r0, #0
 8006538:	d038      	beq.n	80065ac <_svfiprintf_r+0x1c8>
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <_svfiprintf_r+0x1e8>)
 800653c:	bb13      	cbnz	r3, 8006584 <_svfiprintf_r+0x1a0>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	3307      	adds	r3, #7
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	3308      	adds	r3, #8
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	444b      	add	r3, r9
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	e76d      	b.n	800642e <_svfiprintf_r+0x4a>
 8006552:	fb05 3202 	mla	r2, r5, r2, r3
 8006556:	2001      	movs	r0, #1
 8006558:	460f      	mov	r7, r1
 800655a:	e7a6      	b.n	80064aa <_svfiprintf_r+0xc6>
 800655c:	2300      	movs	r3, #0
 800655e:	250a      	movs	r5, #10
 8006560:	4619      	mov	r1, r3
 8006562:	3701      	adds	r7, #1
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	4638      	mov	r0, r7
 8006568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656c:	3a30      	subs	r2, #48	; 0x30
 800656e:	2a09      	cmp	r2, #9
 8006570:	d903      	bls.n	800657a <_svfiprintf_r+0x196>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0c8      	beq.n	8006508 <_svfiprintf_r+0x124>
 8006576:	9105      	str	r1, [sp, #20]
 8006578:	e7c6      	b.n	8006508 <_svfiprintf_r+0x124>
 800657a:	fb05 2101 	mla	r1, r5, r1, r2
 800657e:	2301      	movs	r3, #1
 8006580:	4607      	mov	r7, r0
 8006582:	e7f0      	b.n	8006566 <_svfiprintf_r+0x182>
 8006584:	ab03      	add	r3, sp, #12
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4622      	mov	r2, r4
 800658a:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <_svfiprintf_r+0x1ec>)
 800658c:	a904      	add	r1, sp, #16
 800658e:	4640      	mov	r0, r8
 8006590:	f7fc fbee 	bl	8002d70 <_printf_float>
 8006594:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006598:	4681      	mov	r9, r0
 800659a:	d1d6      	bne.n	800654a <_svfiprintf_r+0x166>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	065b      	lsls	r3, r3, #25
 80065a0:	f53f af35 	bmi.w	800640e <_svfiprintf_r+0x2a>
 80065a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a6:	b01d      	add	sp, #116	; 0x74
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4622      	mov	r2, r4
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <_svfiprintf_r+0x1ec>)
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7fc fe86 	bl	80032c8 <_printf_i>
 80065bc:	e7ea      	b.n	8006594 <_svfiprintf_r+0x1b0>
 80065be:	bf00      	nop
 80065c0:	080068a4 	.word	0x080068a4
 80065c4:	080068aa 	.word	0x080068aa
 80065c8:	080068ae 	.word	0x080068ae
 80065cc:	08002d71 	.word	0x08002d71
 80065d0:	08006331 	.word	0x08006331

080065d4 <_sbrk_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	2300      	movs	r3, #0
 80065d8:	4c05      	ldr	r4, [pc, #20]	; (80065f0 <_sbrk_r+0x1c>)
 80065da:	4605      	mov	r5, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	f7fb f970 	bl	80018c4 <_sbrk>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_sbrk_r+0x1a>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_sbrk_r+0x1a>
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	200005a0 	.word	0x200005a0

080065f4 <strncmp>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	b16a      	cbz	r2, 8006614 <strncmp+0x20>
 80065f8:	3901      	subs	r1, #1
 80065fa:	1884      	adds	r4, r0, r2
 80065fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006600:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006604:	4293      	cmp	r3, r2
 8006606:	d103      	bne.n	8006610 <strncmp+0x1c>
 8006608:	42a0      	cmp	r0, r4
 800660a:	d001      	beq.n	8006610 <strncmp+0x1c>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f5      	bne.n	80065fc <strncmp+0x8>
 8006610:	1a98      	subs	r0, r3, r2
 8006612:	bd10      	pop	{r4, pc}
 8006614:	4610      	mov	r0, r2
 8006616:	e7fc      	b.n	8006612 <strncmp+0x1e>

08006618 <__ascii_wctomb>:
 8006618:	b149      	cbz	r1, 800662e <__ascii_wctomb+0x16>
 800661a:	2aff      	cmp	r2, #255	; 0xff
 800661c:	bf8b      	itete	hi
 800661e:	238a      	movhi	r3, #138	; 0x8a
 8006620:	700a      	strbls	r2, [r1, #0]
 8006622:	6003      	strhi	r3, [r0, #0]
 8006624:	2001      	movls	r0, #1
 8006626:	bf88      	it	hi
 8006628:	f04f 30ff 	movhi.w	r0, #4294967295
 800662c:	4770      	bx	lr
 800662e:	4608      	mov	r0, r1
 8006630:	4770      	bx	lr

08006632 <memmove>:
 8006632:	4288      	cmp	r0, r1
 8006634:	b510      	push	{r4, lr}
 8006636:	eb01 0302 	add.w	r3, r1, r2
 800663a:	d807      	bhi.n	800664c <memmove+0x1a>
 800663c:	1e42      	subs	r2, r0, #1
 800663e:	4299      	cmp	r1, r3
 8006640:	d00a      	beq.n	8006658 <memmove+0x26>
 8006642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006646:	f802 4f01 	strb.w	r4, [r2, #1]!
 800664a:	e7f8      	b.n	800663e <memmove+0xc>
 800664c:	4283      	cmp	r3, r0
 800664e:	d9f5      	bls.n	800663c <memmove+0xa>
 8006650:	1881      	adds	r1, r0, r2
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	42d3      	cmn	r3, r2
 8006656:	d100      	bne.n	800665a <memmove+0x28>
 8006658:	bd10      	pop	{r4, pc}
 800665a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800665e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006662:	e7f7      	b.n	8006654 <memmove+0x22>

08006664 <__malloc_lock>:
 8006664:	4770      	bx	lr

08006666 <__malloc_unlock>:
 8006666:	4770      	bx	lr

08006668 <_realloc_r>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	4607      	mov	r7, r0
 800666c:	4614      	mov	r4, r2
 800666e:	460e      	mov	r6, r1
 8006670:	b921      	cbnz	r1, 800667c <_realloc_r+0x14>
 8006672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006676:	4611      	mov	r1, r2
 8006678:	f7ff be00 	b.w	800627c <_malloc_r>
 800667c:	b922      	cbnz	r2, 8006688 <_realloc_r+0x20>
 800667e:	f7ff fdb1 	bl	80061e4 <_free_r>
 8006682:	4625      	mov	r5, r4
 8006684:	4628      	mov	r0, r5
 8006686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006688:	f000 f814 	bl	80066b4 <_malloc_usable_size_r>
 800668c:	42a0      	cmp	r0, r4
 800668e:	d20f      	bcs.n	80066b0 <_realloc_r+0x48>
 8006690:	4621      	mov	r1, r4
 8006692:	4638      	mov	r0, r7
 8006694:	f7ff fdf2 	bl	800627c <_malloc_r>
 8006698:	4605      	mov	r5, r0
 800669a:	2800      	cmp	r0, #0
 800669c:	d0f2      	beq.n	8006684 <_realloc_r+0x1c>
 800669e:	4631      	mov	r1, r6
 80066a0:	4622      	mov	r2, r4
 80066a2:	f7ff f98d 	bl	80059c0 <memcpy>
 80066a6:	4631      	mov	r1, r6
 80066a8:	4638      	mov	r0, r7
 80066aa:	f7ff fd9b 	bl	80061e4 <_free_r>
 80066ae:	e7e9      	b.n	8006684 <_realloc_r+0x1c>
 80066b0:	4635      	mov	r5, r6
 80066b2:	e7e7      	b.n	8006684 <_realloc_r+0x1c>

080066b4 <_malloc_usable_size_r>:
 80066b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b8:	1f18      	subs	r0, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfbc      	itt	lt
 80066be:	580b      	ldrlt	r3, [r1, r0]
 80066c0:	18c0      	addlt	r0, r0, r3
 80066c2:	4770      	bx	lr

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
