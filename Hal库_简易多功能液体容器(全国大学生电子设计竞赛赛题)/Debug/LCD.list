
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002784  08002784  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  08002784  08002784  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002784  08002784  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08002790  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000043c  08002bcc  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08002bcc  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e80  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f8d  00000000  00000000  0002a2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001736b  00000000  00000000  0002cff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007915  00000000  00000000  0004435b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b3fc  00000000  00000000  0004bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c706c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d60  00000000  00000000  000c70e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000043c 	.word	0x2000043c
 8000204:	00000000 	.word	0x00000000
 8000208:	080026f8 	.word	0x080026f8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000440 	.word	0x20000440
 8000224:	080026f8 	.word	0x080026f8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HX711_GPIO_Config>:
#include "HX711.h"

uint32_t HX711_ZeroNum = 0 ; //无任何负载时ADC的度数,之后的每个读取数值都应该与其相减

void HX711_GPIO_Config()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
	HX711_GPIO_CLKON
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HX711_GPIO_Config+0x68>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HX711_GPIO_Config+0x68>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HX711_GPIO_Config+0x68>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = HX711_PIN_SDA ;
 8000a30:	2320      	movs	r3, #32
 8000a32:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN ;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(HX711_GPIO_PORT, &GPIO_InitStruct);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <HX711_GPIO_Config+0x6c>)
 8000a44:	f000 fed4 	bl	80017f0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = HX711_PIN_CLK ;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL ;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH ;
 8000a54:	2303      	movs	r3, #3
 8000a56:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(HX711_GPIO_PORT, &GPIO_InitStruct);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <HX711_GPIO_Config+0x6c>)
 8000a60:	f000 fec6 	bl	80017f0 <HAL_GPIO_Init>
}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40011000 	.word	0x40011000

08000a74 <HX711_Config>:

void HX711_Config()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	HX711_GPIO_Config();
 8000a7a:	f7ff ffc3 	bl	8000a04 <HX711_GPIO_Config>

	//断电一段时间重新复位
	HX711_CLK_SET//开始复位
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HX711_Config+0x44>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	611a      	str	r2, [r3, #16]
	HX711_Delay(10000);
 8000a84:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a88:	f000 f85e 	bl	8000b48 <HX711_Delay>
	HX711_CLK_DOW//恢复工作
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HX711_Config+0x44>)
 8000a8e:	2210      	movs	r2, #16
 8000a90:	615a      	str	r2, [r3, #20]
	HX711_Delay(10000);
 8000a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a96:	f000 f857 	bl	8000b48 <HX711_Delay>

	//预先多次采集待芯片稳定
	for(uint8_t i=0 ; i<20 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	e004      	b.n	8000aaa <HX711_Config+0x36>
		HX711_Read();
 8000aa0:	f000 f80c 	bl	8000abc <HX711_Read>
	for(uint8_t i=0 ; i<20 ; i++)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b13      	cmp	r3, #19
 8000aae:	d9f7      	bls.n	8000aa0 <HX711_Config+0x2c>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40011000 	.word	0x40011000

08000abc <HX711_Read>:

//使用128增益读取数据
uint32_t HX711_Read()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint32_t SBUF = 0 ;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
	//等待数据线允许转换
	while(HX711_SDA_IN != 0);
 8000ac6:	bf00      	nop
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HX711_Read+0x88>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <HX711_Read+0xc>
	//接收24位有效数据
	for( uint8_t i=0 ; i<24 ; i++ )
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	70fb      	strb	r3, [r7, #3]
 8000ad8:	e019      	b.n	8000b0e <HX711_Read+0x52>
	{
		SBUF <<= 1 ;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
		HX711_CLK_SET//上升沿请求下一位数据
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HX711_Read+0x88>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	611a      	str	r2, [r3, #16]
		HX711_Delay(HX711_CLK_Delay);//等待数据稳定
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f000 f82e 	bl	8000b48 <HX711_Delay>
		SBUF |= HX711_SDA_IN ;//接收数据
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HX711_Read+0x88>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	095b      	lsrs	r3, r3, #5
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
		HX711_CLK_DOW//下降沿完成一次接收
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HX711_Read+0x88>)
 8000afe:	2210      	movs	r2, #16
 8000b00:	615a      	str	r2, [r3, #20]
		HX711_Delay(HX711_CLK_Delay);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f000 f820 	bl	8000b48 <HX711_Delay>
	for( uint8_t i=0 ; i<24 ; i++ )
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	2b17      	cmp	r3, #23
 8000b12:	d9e2      	bls.n	8000ada <HX711_Read+0x1e>
	}
	//发出代表128增益的第25个时钟信号
	HX711_CLK_SET
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HX711_Read+0x88>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
	HX711_Delay(HX711_CLK_Delay);
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f000 f814 	bl	8000b48 <HX711_Delay>
	HX711_CLK_DOW
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HX711_Read+0x88>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	615a      	str	r2, [r3, #20]
	HX711_Delay(HX711_CLK_Delay);
 8000b26:	2004      	movs	r0, #4
 8000b28:	f000 f80e 	bl	8000b48 <HX711_Delay>

	SBUF &= 0x007FFFFF ; //只取前23位
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000b32:	607b      	str	r3, [r7, #4]
	SBUF >>= 2 ;//再去掉低2位
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
	//返回32位(21位有效)的数据
	return SBUF ;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40011000 	.word	0x40011000

08000b48 <HX711_Delay>:

//时钟简单延时
void HX711_Delay(uint16_t NUM)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	while(NUM--);
 8000b52:	bf00      	nop
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	80fa      	strh	r2, [r7, #6]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1fa      	bne.n	8000b54 <HX711_Delay+0xc>
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <KEY_GPIO_Config>:
#include "KEY.h"

void KEY_GPIO_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  KEY_1_CLKON
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <KEY_GPIO_Config+0x54>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <KEY_GPIO_Config+0x54>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <KEY_GPIO_Config+0x54>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY_1_PORT, &GPIO_InitStruct);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <KEY_GPIO_Config+0x58>)
 8000ba8:	f000 fe22 	bl	80017f0 <HAL_GPIO_Init>
  KEY_1_PORT->BSRR = KEY_1_Pin ;
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <KEY_GPIO_Config+0x58>)
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000

08000bc4 <KEY_Read1>:

uint8_t KEY_Read1()//读取按键1
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	if(KEY_Read_1 == 0)
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <KEY_Read1+0x40>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d114      	bne.n	8000bfe <KEY_Read1+0x3a>
	{
		KEY_Delay(2500);
 8000bd4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000bd8:	f000 f816 	bl	8000c08 <KEY_Delay>
		if(KEY_Read_1 == 0)
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <KEY_Read1+0x40>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <KEY_Read1+0x36>
		{
			while(KEY_Read_1);//等待按键放开
 8000be8:	bf00      	nop
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <KEY_Read1+0x40>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f9      	bne.n	8000bea <KEY_Read1+0x26>
			return 2 ;//返回长按
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e002      	b.n	8000c00 <KEY_Read1+0x3c>
		}
		else
			return 1 ;//返回短按
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <KEY_Read1+0x3c>
	}
	else return 0 ;//返回无按动
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40011000 	.word	0x40011000

08000c08 <KEY_Delay>:

void KEY_Delay(uint16_t num)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0 ; i<num ; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	81fb      	strh	r3, [r7, #14]
 8000c16:	e00c      	b.n	8000c32 <KEY_Delay+0x2a>
		for(uint16_t j=0 ; j<1000 ; j++) ;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	81bb      	strh	r3, [r7, #12]
 8000c1c:	e002      	b.n	8000c24 <KEY_Delay+0x1c>
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	81bb      	strh	r3, [r7, #12]
 8000c24:	89bb      	ldrh	r3, [r7, #12]
 8000c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2a:	d3f8      	bcc.n	8000c1e <KEY_Delay+0x16>
	for(uint16_t i=0 ; i<num ; i++)
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	81fb      	strh	r3, [r7, #14]
 8000c32:	89fa      	ldrh	r2, [r7, #14]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3ee      	bcc.n	8000c18 <KEY_Delay+0x10>
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <LCD_GPIO_Config>:
uint8_t LCD_SHOWLIST[4][16];
uint8_t LCD_HanAddr[4] = { 0x80 , 0x90 , 0x88 , 0x98 };

//LCD引脚初始化
void LCD_GPIO_Config()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
	LCD_GPIO_CLKON
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <LCD_GPIO_Config+0x7c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = LCD_PIN_RS|LCD_PIN_E;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LCD_GPIO_COM_PORT, &GPIO_InitStruct);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <LCD_GPIO_Config+0x80>)
 8000c9c:	f000 fda8 	bl	80017f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_PIN_DATA;
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(LCD_GPIO_DATA_PORT, &GPIO_InitStruct);
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <LCD_GPIO_Config+0x84>)
 8000cac:	f000 fda0 	bl	80017f0 <HAL_GPIO_Init>
	LCD_E_DOW
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <LCD_GPIO_Config+0x80>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	615a      	str	r2, [r3, #20]
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40010800 	.word	0x40010800

08000ccc <LCD_COM>:

//向LCD发送一个字节指令
void LCD_COM(uint8_t BYTE)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_DOW//RS 0 为指令
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <LCD_COM+0x50>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	615a      	str	r2, [r3, #20]
	LCD_Delay(CLK_DELAY);
 8000cdc:	2004      	movs	r0, #4
 8000cde:	f000 f872 	bl	8000dc6 <LCD_Delay>
	//改变低八位引脚电平
	LCD_GPIO_DATA_PORT->ODR = \
			(LCD_GPIO_DATA_PORT->ODR & 0xff00)|BYTE ;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <LCD_COM+0x54>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000cea:	79fb      	ldrb	r3, [r7, #7]
	LCD_GPIO_DATA_PORT->ODR = \
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <LCD_COM+0x54>)
			(LCD_GPIO_DATA_PORT->ODR & 0xff00)|BYTE ;
 8000cee:	4313      	orrs	r3, r2
	LCD_GPIO_DATA_PORT->ODR = \
 8000cf0:	60cb      	str	r3, [r1, #12]
	LCD_Delay(CLK_DELAY);
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f000 f867 	bl	8000dc6 <LCD_Delay>
	LCD_E_SET//使能脉冲
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LCD_COM+0x50>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	611a      	str	r2, [r3, #16]
	LCD_Delay(CLK_DELAY);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f000 f861 	bl	8000dc6 <LCD_Delay>
	LCD_E_DOW
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <LCD_COM+0x50>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	615a      	str	r2, [r3, #20]
	LCD_Delay(COM_DELAY);
 8000d0a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d0e:	f000 f85a 	bl	8000dc6 <LCD_Delay>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40010800 	.word	0x40010800

08000d24 <LCD_DAT>:

//向LCD发送一个字节数据
void LCD_DAT(uint8_t BYTE)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_SET//RS 1 为数据
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <LCD_DAT+0x48>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	611a      	str	r2, [r3, #16]
	//改变低八位引脚电平
	LCD_GPIO_DATA_PORT->ODR = \
		(LCD_GPIO_DATA_PORT->ODR & 0xff00)|BYTE ;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <LCD_DAT+0x4c>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
	LCD_GPIO_DATA_PORT->ODR = \
 8000d3e:	490c      	ldr	r1, [pc, #48]	; (8000d70 <LCD_DAT+0x4c>)
		(LCD_GPIO_DATA_PORT->ODR & 0xff00)|BYTE ;
 8000d40:	4313      	orrs	r3, r2
	LCD_GPIO_DATA_PORT->ODR = \
 8000d42:	60cb      	str	r3, [r1, #12]
	LCD_Delay(CLK_DELAY);
 8000d44:	2004      	movs	r0, #4
 8000d46:	f000 f83e 	bl	8000dc6 <LCD_Delay>
	LCD_E_SET//使能脉冲
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <LCD_DAT+0x48>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	611a      	str	r2, [r3, #16]
	LCD_Delay(CLK_DELAY);
 8000d50:	2004      	movs	r0, #4
 8000d52:	f000 f838 	bl	8000dc6 <LCD_Delay>
	LCD_E_DOW
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <LCD_DAT+0x48>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	615a      	str	r2, [r3, #20]
	LCD_Delay(DAT_DELAY);
 8000d5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d60:	f000 f831 	bl	8000dc6 <LCD_Delay>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40010800 	.word	0x40010800

08000d74 <LCD_Config>:

//初始化屏幕
void LCD_Config()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	LCD_GPIO_Config();
 8000d78:	f7ff ff64 	bl	8000c44 <LCD_GPIO_Config>
	LCD_Delay(60000);//LCD上电初始化时间
 8000d7c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d80:	f000 f821 	bl	8000dc6 <LCD_Delay>
	LCD_Delay(60000);
 8000d84:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d88:	f000 f81d 	bl	8000dc6 <LCD_Delay>
	LCD_Delay(60000);
 8000d8c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d90:	f000 f819 	bl	8000dc6 <LCD_Delay>

	LCD_COM(0x30);//标准指令
 8000d94:	2030      	movs	r0, #48	; 0x30
 8000d96:	f7ff ff99 	bl	8000ccc <LCD_COM>

	LCD_COM(0x01);//清屏
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff96 	bl	8000ccc <LCD_COM>
	LCD_Delay(60000);//7ms
 8000da0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000da4:	f000 f80f 	bl	8000dc6 <LCD_Delay>

	LCD_COM(0x03);//地址归位
 8000da8:	2003      	movs	r0, #3
 8000daa:	f7ff ff8f 	bl	8000ccc <LCD_COM>
	LCD_Delay(60000);//7ms
 8000dae:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000db2:	f000 f808 	bl	8000dc6 <LCD_Delay>

	LCD_COM(0x06);//光标右移,画面固定,AC++
 8000db6:	2006      	movs	r0, #6
 8000db8:	f7ff ff88 	bl	8000ccc <LCD_COM>
	LCD_COM(0x0C);//开显示,开光标,闪烁
 8000dbc:	200c      	movs	r0, #12
 8000dbe:	f7ff ff85 	bl	8000ccc <LCD_COM>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <LCD_Delay>:

//时序延时
void LCD_Delay(uint16_t num)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
	while(num--);
 8000dd0:	bf00      	nop
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	80fa      	strh	r2, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1fa      	bne.n	8000dd2 <LCD_Delay+0xc>
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
	...

08000de8 <LCD_Show>:
	}
}

//从某处更改数据(偶数的前一位被覆盖为空格);
void LCD_Show(uint8_t han , uint8_t wei , char *p)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	603a      	str	r2, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	460b      	mov	r3, r1
 8000df6:	71bb      	strb	r3, [r7, #6]
	LCD_COM(LCD_HanAddr[han]+(wei/2));
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <LCD_Show+0x5c>)
 8000dfc:	5cd2      	ldrb	r2, [r2, r3]
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5f 	bl	8000ccc <LCD_COM>
	if(wei%2) LCD_DAT(' ');
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <LCD_Show+0x4a>
 8000e1a:	2020      	movs	r0, #32
 8000e1c:	f7ff ff82 	bl	8000d24 <LCD_DAT>
	while(*p != '\0')
 8000e20:	e007      	b.n	8000e32 <LCD_Show+0x4a>
	{
		LCD_DAT(*p);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff7c 	bl	8000d24 <LCD_DAT>
		p++ ;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	603b      	str	r3, [r7, #0]
	while(*p != '\0')
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f3      	bne.n	8000e22 <LCD_Show+0x3a>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000

08000e48 <PAIXU_uint16_t>:
		}
	}
}

void PAIXU_uint16_t(uint16_t *list , uint8_t num)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0 ; i<num-1 ; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e033      	b.n	8000ec2 <PAIXU_uint16_t+0x7a>
	{
		for(uint8_t j=0 ; j<num-i ; j++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
 8000e5e:	e027      	b.n	8000eb0 <PAIXU_uint16_t+0x68>
		{
			if(list[j]>list[j+1])
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	881a      	ldrh	r2, [r3, #0]
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	440b      	add	r3, r1
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d917      	bls.n	8000eaa <PAIXU_uint16_t+0x62>
			{
				uint16_t BUF = list[j] ;
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	81bb      	strh	r3, [r7, #12]
				list[j] = list[j+1] ;
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	441a      	add	r2, r3
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	440b      	add	r3, r1
 8000e98:	8812      	ldrh	r2, [r2, #0]
 8000e9a:	801a      	strh	r2, [r3, #0]
				list[j+1] = BUF ;
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	89ba      	ldrh	r2, [r7, #12]
 8000ea8:	801a      	strh	r2, [r3, #0]
		for(uint8_t j=0 ; j<num-i ; j++)
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	3301      	adds	r3, #1
 8000eae:	73bb      	strb	r3, [r7, #14]
 8000eb0:	7bba      	ldrb	r2, [r7, #14]
 8000eb2:	78f9      	ldrb	r1, [r7, #3]
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	1acb      	subs	r3, r1, r3
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbd1      	blt.n	8000e60 <PAIXU_uint16_t+0x18>
	for(uint8_t i=0 ; i<num-1 ; i++)
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbc6      	blt.n	8000e5a <PAIXU_uint16_t+0x12>
			}
		}
	}
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <LVBO_uint16_t>:
		ADD += list[i] ;//累加数据
	return ADD/get_num*1.0 ;//返回平均值
}

uint16_t LVBO_uint16_t(uint16_t *list , uint8_t num)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	PAIXU_uint16_t(list,num);//排序
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffad 	bl	8000e48 <PAIXU_uint16_t>
	uint8_t get_num = (uint8_t)(num*(1/5.0)) ;//20%
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff faeb 	bl	80004cc <__aeabi_i2d>
 8000ef6:	a320      	add	r3, pc, #128	; (adr r3, 8000f78 <LVBO_uint16_t+0xa0>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fb50 	bl	80005a0 <__aeabi_dmul>
 8000f00:	4603      	mov	r3, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	4618      	mov	r0, r3
 8000f06:	4621      	mov	r1, r4
 8000f08:	f7ff fd5c 	bl	80009c4 <__aeabi_d2uiz>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	727b      	strb	r3, [r7, #9]
	uint8_t start_num = (num/2)-(get_num/2);//计算从哪一位开始累加
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	7a7b      	ldrb	r3, [r7, #9]
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	723b      	strb	r3, [r7, #8]
	uint16_t ADD = 0.0 ;
 8000f20:	2300      	movs	r3, #0
 8000f22:	81fb      	strh	r3, [r7, #14]
	for( uint8_t i=start_num ; i<start_num+get_num ; i++)
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	737b      	strb	r3, [r7, #13]
 8000f28:	e00a      	b.n	8000f40 <LVBO_uint16_t+0x68>
		ADD += list[i] ;//累加数据
 8000f2a:	7b7b      	ldrb	r3, [r7, #13]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	881a      	ldrh	r2, [r3, #0]
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	4413      	add	r3, r2
 8000f38:	81fb      	strh	r3, [r7, #14]
	for( uint8_t i=start_num ; i<start_num+get_num ; i++)
 8000f3a:	7b7b      	ldrb	r3, [r7, #13]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	7b7a      	ldrb	r2, [r7, #13]
 8000f42:	7a39      	ldrb	r1, [r7, #8]
 8000f44:	7a7b      	ldrb	r3, [r7, #9]
 8000f46:	440b      	add	r3, r1
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbee      	blt.n	8000f2a <LVBO_uint16_t+0x52>
	uint16_t OUT = ADD/get_num ;
 8000f4c:	89fa      	ldrh	r2, [r7, #14]
 8000f4e:	7a7b      	ldrb	r3, [r7, #9]
 8000f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f54:	817b      	strh	r3, [r7, #10]
	if((ADD % get_num) > 5) OUT += 1 ;
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	7a7a      	ldrb	r2, [r7, #9]
 8000f5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f5e:	fb02 f201 	mul.w	r2, r2, r1
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	dd02      	ble.n	8000f6e <LVBO_uint16_t+0x96>
 8000f68:	897b      	ldrh	r3, [r7, #10]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	817b      	strh	r3, [r7, #10]
	return OUT ;//返回平均值
 8000f6e:	897b      	ldrh	r3, [r7, #10]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	3fc99999 	.word	0x3fc99999

08000f80 <Sonic_Get_Data>:
#include "Sonic.h"

uint16_t Sonic_ZeroNum = 0 ;//无水状态探头到瓶底距离

void Sonic_Get_Data()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	UART_Writr(0xa0);//请求信号
 8000f84:	20a0      	movs	r0, #160	; 0xa0
 8000f86:	f000 fa51 	bl	800142c <UART_Writr>
	while(UART_GETNUM<3);//等待接收完成3位
 8000f8a:	bf00      	nop
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <Sonic_Get_Data+0x24>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d9fb      	bls.n	8000f8c <Sonic_Get_Data+0xc>
	UART_GETNUM = 0 ;//读取后归零接收计数
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <Sonic_Get_Data+0x24>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
	HAL_Delay(150);//等待超声波探头就绪
 8000f9a:	2096      	movs	r0, #150	; 0x96
 8000f9c:	f000 faec 	bl	8001578 <HAL_Delay>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000045a 	.word	0x2000045a

08000fa8 <Sonic_Conversion_Data>:

uint16_t Sonic_Conversion_Data(uint8_t* Array_Buff)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	uint16_t Array_Data = (Array_Buff[0]*65536+Array_Buff[1]*256+Array_Buff[2])/1000;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	3201      	adds	r2, #1
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	3202      	adds	r2, #2
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <Sonic_Conversion_Data+0x3c>)
 8000fca:	fb82 1203 	smull	r1, r2, r2, r3
 8000fce:	1192      	asrs	r2, r2, #6
 8000fd0:	17db      	asrs	r3, r3, #31
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	81fb      	strh	r3, [r7, #14]
	return Array_Data;//返回解码后的数据
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <Sonic_GetLVBO>:

uint16_t Sonic_GetLVBO(uint8_t GET_NUM)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	466b      	mov	r3, sp
 8000ff4:	461d      	mov	r5, r3
	uint16_t ADD[GET_NUM] ;
 8000ff6:	79f8      	ldrb	r0, [r7, #7]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	b2c1      	uxtb	r1, r0
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	f04f 0400 	mov.w	r4, #0
 800100c:	0114      	lsls	r4, r2, #4
 800100e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001012:	010b      	lsls	r3, r1, #4
 8001014:	b2c1      	uxtb	r1, r0
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	f04f 0400 	mov.w	r4, #0
 8001022:	0114      	lsls	r4, r2, #4
 8001024:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001028:	010b      	lsls	r3, r1, #4
 800102a:	4603      	mov	r3, r0
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	3301      	adds	r3, #1
 8001030:	3307      	adds	r3, #7
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	ebad 0d03 	sub.w	sp, sp, r3
 800103a:	466b      	mov	r3, sp
 800103c:	3301      	adds	r3, #1
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0 ; i<GET_NUM ; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
 8001048:	e00d      	b.n	8001066 <Sonic_GetLVBO+0x7e>
	{
		Sonic_Get_Data();//请求并接收
 800104a:	f7ff ff99 	bl	8000f80 <Sonic_Get_Data>
		//转换并保存到滤波数据
		ADD[i] = Sonic_Conversion_Data(UART_BUF);
 800104e:	7dfc      	ldrb	r4, [r7, #23]
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <Sonic_GetLVBO+0xa0>)
 8001052:	f7ff ffa9 	bl	8000fa8 <Sonic_Conversion_Data>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t i=0 ; i<GET_NUM ; i++)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	3301      	adds	r3, #1
 8001064:	75fb      	strb	r3, [r7, #23]
 8001066:	7dfa      	ldrb	r2, [r7, #23]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3ed      	bcc.n	800104a <Sonic_GetLVBO+0x62>
	}
	return LVBO_uint16_t(ADD,GET_NUM);//使用滤波后的数据
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff2f 	bl	8000ed8 <LVBO_uint16_t>
 800107a:	4603      	mov	r3, r0
 800107c:	46ad      	mov	sp, r5
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	2000045c 	.word	0x2000045c

0800108c <main>:
float MAIN_midu = 0.0 ;	//计算出来的密度 g/cm3

const uint8_t SHOW_NONE[]={' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\0',};//清行

int main()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	System_Config();//初始化硬件
 8001090:	f000 f880 	bl	8001194 <System_Config>
	SYSTEM_INIT();//测量传感器统一归零,显示欢迎界面
 8001094:	f000 f830 	bl	80010f8 <SYSTEM_INIT>
	while(1)
	{
		//基础测量循环
		while(1)
		{
			KEY = KEY_Read1();//等待按键触发
 8001098:	f7ff fd94 	bl	8000bc4 <KEY_Read1>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <main+0x68>)
 80010a2:	701a      	strb	r2, [r3, #0]
			if(KEY)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <main+0x68>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f5      	beq.n	8001098 <main+0xc>
			{
				if(KEY == 1)
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <main+0x68>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <main+0x2e>
					Basis();//基础测量
 80010b4:	f000 f868 	bl	8001188 <Basis>
 80010b8:	e7ee      	b.n	8001098 <main+0xc>
				//长按跳出循环进入种类测量
				else if(KEY == 2)
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <main+0x68>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1ea      	bne.n	8001098 <main+0xc>
			}
		}
		//种类测量循环
		while(1)
		{
			KEY = KEY_Read1();//等待按键触发
 80010c2:	f7ff fd7f 	bl	8000bc4 <KEY_Read1>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <main+0x68>)
 80010cc:	701a      	strb	r2, [r3, #0]
			if(KEY)
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <main+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f5      	beq.n	80010c2 <main+0x36>
			{
				if(KEY == 1)
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <main+0x68>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <main+0x58>
					Basis();//基础测量
 80010de:	f000 f853 	bl	8001188 <Basis>
 80010e2:	e7ee      	b.n	80010c2 <main+0x36>
				//长按跳出循环进入种类测量
				else if(KEY == 2)
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <main+0x68>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d000      	beq.n	80010ee <main+0x62>
			KEY = KEY_Read1();//等待按键触发
 80010ec:	e7e9      	b.n	80010c2 <main+0x36>
					break ;
 80010ee:	bf00      	nop
	while(1)
 80010f0:	e7d2      	b.n	8001098 <main+0xc>
 80010f2:	bf00      	nop
 80010f4:	2000045b 	.word	0x2000045b

080010f8 <SYSTEM_INIT>:
		}
	}
}

void SYSTEM_INIT()//称重去皮归零,水位高度测量归零
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
	//提示文字
	const uint8_t str1[]={0xBB,0xB6,0xD3,0xAD,0xCA,0xB9,0xD3,0xC3,'\0'};//欢迎使用
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <SYSTEM_INIT+0x7c>)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	ca07      	ldmia	r2, {r0, r1, r2}
 8001106:	c303      	stmia	r3!, {r0, r1}
 8001108:	701a      	strb	r2, [r3, #0]
	LCD_Show(0,4,str1);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	461a      	mov	r2, r3
 8001110:	2104      	movs	r1, #4
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe68 	bl	8000de8 <LCD_Show>
	const uint8_t str2[]={0xA1,0xBE,0xCF,0xB5,0xCD,0xB3,0xB3,0xF5,0xCA,0xBC,0xBB,0xAF,0xD6,0xD0,0xA1,0xBF,'\0'};//系统初始化中
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <SYSTEM_INIT+0x80>)
 800111a:	f107 0410 	add.w	r4, r7, #16
 800111e:	461d      	mov	r5, r3
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	7023      	strb	r3, [r4, #0]
	LCD_Show(2,0,str2);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	461a      	mov	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff fe59 	bl	8000de8 <LCD_Show>
	//----------------------------------------------------
	//HX711_ZeroNum = HX711_GetLVBO(128);//获取称重归零
	Sonic_ZeroNum = Sonic_GetLVBO(255);//获取水位归零
 8001136:	20ff      	movs	r0, #255	; 0xff
 8001138:	f7ff ff56 	bl	8000fe8 <Sonic_GetLVBO>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SYSTEM_INIT+0x84>)
 8001142:	801a      	strh	r2, [r3, #0]
	//----------------------------------------------------
	LCD_Show(2,0,SHOW_NONE);//清空上次显示
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <SYSTEM_INIT+0x88>)
 8001146:	2100      	movs	r1, #0
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fe4d 	bl	8000de8 <LCD_Show>
	const uint8_t str3[]={0xA1,0xBE,0xC9,0xE8,0xD6,0xC3,0xCD,0xEA,0xB3,0xC9,0xA1,0xBF,'\0'};//设置完成
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <SYSTEM_INIT+0x8c>)
 8001150:	463c      	mov	r4, r7
 8001152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001154:	c407      	stmia	r4!, {r0, r1, r2}
 8001156:	7023      	strb	r3, [r4, #0]
	LCD_Show(2,2,str3);
 8001158:	463b      	mov	r3, r7
 800115a:	461a      	mov	r2, r3
 800115c:	2102      	movs	r1, #2
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff fe42 	bl	8000de8 <LCD_Show>
	Delay(12000);//延时3s
 8001164:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001168:	f000 f85f 	bl	800122a <Delay>
	//LCD_Clean();//清空屏幕
}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	08002710 	.word	0x08002710
 8001178:	0800271c 	.word	0x0800271c
 800117c:	20000458 	.word	0x20000458
 8001180:	08002754 	.word	0x08002754
 8001184:	08002730 	.word	0x08002730

08001188 <Basis>:

void Basis()//基础测量
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <System_Config>:

/*
 * 以下为硬件初始化函数及简易功能函数
 */
void System_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_Init();
 8001198:	f000 f986 	bl	80014a8 <HAL_Init>
	SystemClock_Config();
 800119c:	f000 f80a 	bl	80011b4 <SystemClock_Config>
	UART_Config();
 80011a0:	f000 f8c8 	bl	8001334 <UART_Config>
	LCD_Config();
 80011a4:	f7ff fde6 	bl	8000d74 <LCD_Config>
	HX711_Config();
 80011a8:	f7ff fc64 	bl	8000a74 <HX711_Config>
	KEY_GPIO_Config();
 80011ac:	f7ff fcdc 	bl	8000b68 <KEY_GPIO_Config>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b090      	sub	sp, #64	; 0x40
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2228      	movs	r2, #40	; 0x28
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fa14 	bl	80025f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fc61 	bl	8001ac4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2302      	movs	r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2102      	movs	r1, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fed1 	bl	8001fc4 <HAL_RCC_ClockConfig>
}
 8001222:	bf00      	nop
 8001224:	3740      	adds	r7, #64	; 0x40
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <Delay>:

void Delay(uint16_t num)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0 ; i<num ; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	81fb      	strh	r3, [r7, #14]
 8001238:	e00c      	b.n	8001254 <Delay+0x2a>
		for(uint16_t j=0 ; j<1000 ; j++) ;
 800123a:	2300      	movs	r3, #0
 800123c:	81bb      	strh	r3, [r7, #12]
 800123e:	e002      	b.n	8001246 <Delay+0x1c>
 8001240:	89bb      	ldrh	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	81bb      	strh	r3, [r7, #12]
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124c:	d3f8      	bcc.n	8001240 <Delay+0x16>
	for(uint16_t i=0 ; i<num ; i++)
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	81fb      	strh	r3, [r7, #14]
 8001254:	89fa      	ldrh	r2, [r7, #14]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3ee      	bcc.n	800123a <Delay+0x10>
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */

	  //Key_Scan();

	  HAL_IncTick();
 80012b2:	f000 f945 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	  HAL_SYSTICK_IRQHandler();
 80012b6:	f000 fa8e 	bl	80017d6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
	USART1_IRQ();
 80012c2:	f000 f8c9 	bl	8001458 <USART1_IRQ>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <SystemInit+0x5c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <SystemInit+0x5c>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <SystemInit+0x5c>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4911      	ldr	r1, [pc, #68]	; (8001328 <SystemInit+0x5c>)
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <SystemInit+0x60>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <SystemInit+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <SystemInit+0x5c>)
 80012ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <SystemInit+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SystemInit+0x5c>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <SystemInit+0x5c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <SystemInit+0x5c>)
 800130a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800130e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SystemInit+0x5c>)
 8001312:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001316:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SystemInit+0x64>)
 800131a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800131e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000
 800132c:	f8ff0000 	.word	0xf8ff0000
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <UART_Config>:
uint8_t UART_BUF[UART_BUF_SIZE];//串口接收缓存区
uint8_t UART_GETNUM = 0 ;//缓存区接收字节数

//设置UART
void UART_Config()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	; 0x48
 8001338:	af00      	add	r7, sp, #0
	UART_CLKON//打开串口时钟
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <UART_Config+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <UART_Config+0x68>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <UART_Config+0x68>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
	UART_HandleTypeDef huart1;
	huart1.Instance = USART1;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <UART_Config+0x6c>)
 8001354:	60bb      	str	r3, [r7, #8]
	huart1.Init.BaudRate = 9600;
 8001356:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800135a:	60fb      	str	r3, [r7, #12]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	230c      	movs	r3, #12
 800136a:	61fb      	str	r3, [r7, #28]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Init(&huart1);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ffbf 	bl	80022fc <HAL_UART_Init>
	UART_GPIO_Config();
 800137e:	f000 f811 	bl	80013a4 <UART_GPIO_Config>
	MX_NVIC_Init();
 8001382:	f000 f847 	bl	8001414 <MX_NVIC_Init>
	//打开中断接收
	UART_PORT->CR1 |= 0x20 ;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <UART_Config+0x6c>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <UART_Config+0x6c>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	60d3      	str	r3, [r2, #12]
}
 8001392:	bf00      	nop
 8001394:	3748      	adds	r7, #72	; 0x48
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40013800 	.word	0x40013800

080013a4 <UART_GPIO_Config>:

//设置UART相关GPIO
void UART_GPIO_Config()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
	UART_GPIO_CLKON//打开相关GPIO时钟
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <UART_GPIO_Config+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <UART_GPIO_Config+0x68>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <UART_GPIO_Config+0x68>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = UART_TX_PIN;
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(UART_GPIO_PORT, &GPIO_InitStruct);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <UART_GPIO_Config+0x6c>)
 80013e6:	f000 fa03 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_PIN;
 80013ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ee:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(UART_GPIO_PORT, &GPIO_InitStruct);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <UART_GPIO_Config+0x6c>)
 8001400:	f000 f9f6 	bl	80017f0 <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800

08001414 <MX_NVIC_Init>:

//设置中断优先级
void MX_NVIC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	2025      	movs	r0, #37	; 0x25
 800141e:	f000 f9a4 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001422:	2025      	movs	r0, #37	; 0x25
 8001424:	f000 f9bd 	bl	80017a2 <HAL_NVIC_EnableIRQ>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <UART_Writr>:

//发一个字节
void UART_Writr(uint8_t BYTE)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	UART_PORT->DR = BYTE ;//准备一个字节
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <UART_Writr+0x28>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	6053      	str	r3, [r2, #4]
	while(!(UART_PORT->SR & 0x40));//等待发送完成
 800143c:	bf00      	nop
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <UART_Writr+0x28>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f9      	beq.n	800143e <UART_Writr+0x12>
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40013800 	.word	0x40013800

08001458 <USART1_IRQ>:

//中断处理
void USART1_IRQ()
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	if(UART_PORT->SR & 0x20)//如果是接收触发中断
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <USART1_IRQ+0x44>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d014      	beq.n	8001492 <USART1_IRQ+0x3a>
	{
		UART_BUF[UART_GETNUM] = UART_PORT->DR ;//保存到串口缓存区
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <USART1_IRQ+0x44>)
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <USART1_IRQ+0x48>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	b2c9      	uxtb	r1, r1
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <USART1_IRQ+0x4c>)
 8001476:	5499      	strb	r1, [r3, r2]
		UART_GETNUM ++ ;//缓存字节数加1
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <USART1_IRQ+0x48>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <USART1_IRQ+0x48>)
 8001482:	701a      	strb	r2, [r3, #0]
		//如果缓存字节数值达到缓存区大小上限
		if(UART_GETNUM >= UART_BUF_SIZE)
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <USART1_IRQ+0x48>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b1f      	cmp	r3, #31
 800148a:	d902      	bls.n	8001492 <USART1_IRQ+0x3a>
			UART_GETNUM = 0 ;//归零重新计算
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <USART1_IRQ+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	}
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40013800 	.word	0x40013800
 80014a0:	2000045a 	.word	0x2000045a
 80014a4:	2000045c 	.word	0x2000045c

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94b 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f80e 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f000 f806 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f95d 	bl	80017be <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800151c:	f000 f925 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000004 	.word	0x20000004
 8001538:	2000000c 	.word	0x2000000c
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	2000000c 	.word	0x2000000c
 8001560:	2000047c 	.word	0x2000047c

08001564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	2000047c 	.word	0x2000047c

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_Delay+0x40>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000000c 	.word	0x2000000c

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017da:	f000 f802 	bl	80017e2 <HAL_SYSTICK_Callback>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e133      	b.n	8001a6c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8122 	bne.w	8001a66 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b12      	cmp	r3, #18
 8001828:	d034      	beq.n	8001894 <HAL_GPIO_Init+0xa4>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d80d      	bhi.n	800184a <HAL_GPIO_Init+0x5a>
 800182e:	2b02      	cmp	r3, #2
 8001830:	d02b      	beq.n	800188a <HAL_GPIO_Init+0x9a>
 8001832:	2b02      	cmp	r3, #2
 8001834:	d804      	bhi.n	8001840 <HAL_GPIO_Init+0x50>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d031      	beq.n	800189e <HAL_GPIO_Init+0xae>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d01c      	beq.n	8001878 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183e:	e048      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001840:	2b03      	cmp	r3, #3
 8001842:	d043      	beq.n	80018cc <HAL_GPIO_Init+0xdc>
 8001844:	2b11      	cmp	r3, #17
 8001846:	d01b      	beq.n	8001880 <HAL_GPIO_Init+0x90>
          break;
 8001848:	e043      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800184a:	4a8f      	ldr	r2, [pc, #572]	; (8001a88 <HAL_GPIO_Init+0x298>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d026      	beq.n	800189e <HAL_GPIO_Init+0xae>
 8001850:	4a8d      	ldr	r2, [pc, #564]	; (8001a88 <HAL_GPIO_Init+0x298>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d806      	bhi.n	8001864 <HAL_GPIO_Init+0x74>
 8001856:	4a8d      	ldr	r2, [pc, #564]	; (8001a8c <HAL_GPIO_Init+0x29c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d020      	beq.n	800189e <HAL_GPIO_Init+0xae>
 800185c:	4a8c      	ldr	r2, [pc, #560]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01d      	beq.n	800189e <HAL_GPIO_Init+0xae>
          break;
 8001862:	e036      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001864:	4a8b      	ldr	r2, [pc, #556]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0xae>
 800186a:	4a8b      	ldr	r2, [pc, #556]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d016      	beq.n	800189e <HAL_GPIO_Init+0xae>
 8001870:	4a8a      	ldr	r2, [pc, #552]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0xae>
          break;
 8001876:	e02c      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e028      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	3304      	adds	r3, #4
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e023      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	3308      	adds	r3, #8
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e01e      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	330c      	adds	r3, #12
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e019      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a6:	2304      	movs	r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e012      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	611a      	str	r2, [r3, #16]
          break;
 80018be:	e008      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	615a      	str	r2, [r3, #20]
          break;
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2bff      	cmp	r3, #255	; 0xff
 80018d6:	d801      	bhi.n	80018dc <HAL_GPIO_Init+0xec>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	e001      	b.n	80018e0 <HAL_GPIO_Init+0xf0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2bff      	cmp	r3, #255	; 0xff
 80018e6:	d802      	bhi.n	80018ee <HAL_GPIO_Init+0xfe>
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x104>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3b08      	subs	r3, #8
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	210f      	movs	r1, #15
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a2 	beq.w	8001a66 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001922:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4a5e      	ldr	r2, [pc, #376]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6193      	str	r3, [r2, #24]
 800192e:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800193a:	4a5a      	ldr	r2, [pc, #360]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x1b6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x1b2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x1ae>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x1aa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x1a6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x1a2>
 800198e:	2305      	movs	r3, #5
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 8001992:	2306      	movs	r3, #6
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x1b8>
 80019a6:	2300      	movs	r3, #0
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b8:	493a      	ldr	r1, [pc, #232]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	493a      	ldr	r1, [pc, #232]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4930      	ldr	r1, [pc, #192]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	492b      	ldr	r1, [pc, #172]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	4926      	ldr	r1, [pc, #152]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4921      	ldr	r1, [pc, #132]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	491c      	ldr	r1, [pc, #112]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60cb      	str	r3, [r1, #12]
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f aec4 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	372c      	adds	r7, #44	; 0x2c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	10210000 	.word	0x10210000
 8001a8c:	10110000 	.word	0x10110000
 8001a90:	10120000 	.word	0x10120000
 8001a94:	10310000 	.word	0x10310000
 8001a98:	10320000 	.word	0x10320000
 8001a9c:	10220000 	.word	0x10220000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	40011800 	.word	0x40011800
 8001abc:	40011c00 	.word	0x40011c00
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e26c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af0:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
 8001afc:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e246      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x76>
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbc>
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fce0 	bl	8001564 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fcdc 	bl	8001564 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1fa      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe4>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fccc 	bl	8001564 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fcc8 	bl	8001564 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1e6      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x10c>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1ba      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4939      	ldr	r1, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fc81 	bl	8001564 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fc7d 	bl	8001564 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e19b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fc60 	bl	8001564 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fc5c 	bl	8001564 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e17a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03a      	beq.n	8001d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fc40 	bl	8001564 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc3c 	bl	8001564 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e15a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fada 	bl	80022c0 <RCC_Delay>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fc26 	bl	8001564 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc22 	bl	8001564 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e140      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	42420000 	.word	0x42420000
 8001d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a6 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fbe3 	bl	8001564 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fbdf 	bl	8001564 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0fd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x312>
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e02d      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	e01c      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x356>
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a6c      	ldr	r2, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb93 	bl	8001564 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb8f 	bl	8001564 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ab      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ee      	beq.n	8001e42 <HAL_RCC_OscConfig+0x37e>
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb7d 	bl	8001564 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fb79 	bl	8001564 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e095      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8081 	beq.w	8001fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d061      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d146      	bne.n	8001f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fb4d 	bl	8001564 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff fb49 	bl	8001564 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e067      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	492d      	ldr	r1, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a19      	ldr	r1, [r3, #32]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fb1d 	bl	8001564 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff fb19 	bl	8001564 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e037      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46a>
 8001f4c:	e02f      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb06 	bl	8001564 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff fb02 	bl	8001564 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x498>
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42420060 	.word	0x42420060

08001fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4965      	ldr	r1, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e073      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7ff fa56 	bl	8001564 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7ff fa52 	bl	8001564 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e053      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d210      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	fa21 f303 	lsr.w	r3, r1, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9b4 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08002768 	.word	0x08002768
 8002190:	20000004 	.word	0x20000004
 8002194:	20000008 	.word	0x20000008

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b490      	push	{r4, r7}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	1d3c      	adds	r4, r7, #4
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x46>
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e02d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6a3b      	ldr	r3, [r7, #32]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	08002740 	.word	0x08002740
 800224c:	08002750 	.word	0x08002750
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08002778 	.word	0x08002778

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08002778 	.word	0x08002778

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000004 	.word	0x20000004
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e03f      	b.n	800238e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f837 	bl	8002396 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f831 	bl	80023a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023e2:	f023 030c 	bic.w	r3, r3, #12
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a52      	ldr	r2, [pc, #328]	; (8002554 <UART_SetConfig+0x1ac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d14e      	bne.n	80024ae <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002410:	f7ff ff42 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8002414:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <UART_SetConfig+0x1b0>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	0119      	lsls	r1, r3, #4
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f2f3 	udiv	r2, r2, r3
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <UART_SetConfig+0x1b0>)
 800244e:	fba3 0302 	umull	r0, r3, r3, r2
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	2064      	movs	r0, #100	; 0x64
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	3332      	adds	r3, #50	; 0x32
 8002460:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <UART_SetConfig+0x1b0>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	4419      	add	r1, r3
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fbb2 f2f3 	udiv	r2, r2, r3
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <UART_SetConfig+0x1b0>)
 8002486:	fba3 0302 	umull	r0, r3, r3, r2
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2064      	movs	r0, #100	; 0x64
 800248e:	fb00 f303 	mul.w	r3, r0, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	3332      	adds	r3, #50	; 0x32
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <UART_SetConfig+0x1b0>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	440a      	add	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80024ac:	e04d      	b.n	800254a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff fedf 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80024b2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009a      	lsls	r2, r3, #2
 80024be:	441a      	add	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <UART_SetConfig+0x1b0>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	0119      	lsls	r1, r3, #4
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	441a      	add	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <UART_SetConfig+0x1b0>)
 80024ec:	fba3 0302 	umull	r0, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	2064      	movs	r0, #100	; 0x64
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	3332      	adds	r3, #50	; 0x32
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <UART_SetConfig+0x1b0>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250a:	4419      	add	r1, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	441a      	add	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <UART_SetConfig+0x1b0>)
 8002524:	fba3 0302 	umull	r0, r3, r3, r2
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	2064      	movs	r0, #100	; 0x64
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	3332      	adds	r3, #50	; 0x32
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <UART_SetConfig+0x1b0>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	440a      	add	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40013800 	.word	0x40013800
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800255c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800255e:	e003      	b.n	8002568 <LoopCopyDataInit>

08002560 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002562:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002564:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002566:	3104      	adds	r1, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002568:	480a      	ldr	r0, [pc, #40]	; (8002594 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800256c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800256e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002570:	d3f6      	bcc.n	8002560 <CopyDataInit>
  ldr r2, =_sbss
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002574:	e002      	b.n	800257c <LoopFillZerobss>

08002576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002578:	f842 3b04 	str.w	r3, [r2], #4

0800257c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800257e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002580:	d3f9      	bcc.n	8002576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002582:	f7fe fea3 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002586:	f000 f80f 	bl	80025a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800258a:	f7fe fd7f 	bl	800108c <main>
  bx lr
 800258e:	4770      	bx	lr
  ldr r3, =_sidata
 8002590:	08002790 	.word	0x08002790
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002598:	2000043c 	.word	0x2000043c
  ldr r2, =_sbss
 800259c:	2000043c 	.word	0x2000043c
  ldr r3, = _ebss
 80025a0:	2000048c 	.word	0x2000048c

080025a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC1_2_IRQHandler>
	...

080025a8 <__libc_init_array>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	2500      	movs	r5, #0
 80025ac:	4e0c      	ldr	r6, [pc, #48]	; (80025e0 <__libc_init_array+0x38>)
 80025ae:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <__libc_init_array+0x3c>)
 80025b0:	1ba4      	subs	r4, r4, r6
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	42a5      	cmp	r5, r4
 80025b6:	d109      	bne.n	80025cc <__libc_init_array+0x24>
 80025b8:	f000 f89e 	bl	80026f8 <_init>
 80025bc:	2500      	movs	r5, #0
 80025be:	4e0a      	ldr	r6, [pc, #40]	; (80025e8 <__libc_init_array+0x40>)
 80025c0:	4c0a      	ldr	r4, [pc, #40]	; (80025ec <__libc_init_array+0x44>)
 80025c2:	1ba4      	subs	r4, r4, r6
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	42a5      	cmp	r5, r4
 80025c8:	d105      	bne.n	80025d6 <__libc_init_array+0x2e>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025d0:	4798      	blx	r3
 80025d2:	3501      	adds	r5, #1
 80025d4:	e7ee      	b.n	80025b4 <__libc_init_array+0xc>
 80025d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025da:	4798      	blx	r3
 80025dc:	3501      	adds	r5, #1
 80025de:	e7f2      	b.n	80025c6 <__libc_init_array+0x1e>
 80025e0:	08002784 	.word	0x08002784
 80025e4:	08002784 	.word	0x08002784
 80025e8:	08002784 	.word	0x08002784
 80025ec:	0800278c 	.word	0x0800278c

080025f0 <memset>:
 80025f0:	4603      	mov	r3, r0
 80025f2:	4402      	add	r2, r0
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d100      	bne.n	80025fa <memset+0xa>
 80025f8:	4770      	bx	lr
 80025fa:	f803 1b01 	strb.w	r1, [r3], #1
 80025fe:	e7f9      	b.n	80025f4 <memset+0x4>

08002600 <register_fini>:
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <register_fini+0xc>)
 8002602:	b113      	cbz	r3, 800260a <register_fini+0xa>
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <register_fini+0x10>)
 8002606:	f000 b805 	b.w	8002614 <atexit>
 800260a:	4770      	bx	lr
 800260c:	00000000 	.word	0x00000000
 8002610:	08002621 	.word	0x08002621

08002614 <atexit>:
 8002614:	2300      	movs	r3, #0
 8002616:	4601      	mov	r1, r0
 8002618:	461a      	mov	r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 b816 	b.w	800264c <__register_exitproc>

08002620 <__libc_fini_array>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4d07      	ldr	r5, [pc, #28]	; (8002640 <__libc_fini_array+0x20>)
 8002624:	4c07      	ldr	r4, [pc, #28]	; (8002644 <__libc_fini_array+0x24>)
 8002626:	1b64      	subs	r4, r4, r5
 8002628:	10a4      	asrs	r4, r4, #2
 800262a:	b91c      	cbnz	r4, 8002634 <__libc_fini_array+0x14>
 800262c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002630:	f000 b868 	b.w	8002704 <_fini>
 8002634:	3c01      	subs	r4, #1
 8002636:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800263a:	4798      	blx	r3
 800263c:	e7f5      	b.n	800262a <__libc_fini_array+0xa>
 800263e:	bf00      	nop
 8002640:	0800278c 	.word	0x0800278c
 8002644:	08002790 	.word	0x08002790

08002648 <__retarget_lock_acquire_recursive>:
 8002648:	4770      	bx	lr

0800264a <__retarget_lock_release_recursive>:
 800264a:	4770      	bx	lr

0800264c <__register_exitproc>:
 800264c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002650:	4c26      	ldr	r4, [pc, #152]	; (80026ec <__register_exitproc+0xa0>)
 8002652:	4606      	mov	r6, r0
 8002654:	6820      	ldr	r0, [r4, #0]
 8002656:	4698      	mov	r8, r3
 8002658:	460f      	mov	r7, r1
 800265a:	4691      	mov	r9, r2
 800265c:	f7ff fff4 	bl	8002648 <__retarget_lock_acquire_recursive>
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <__register_exitproc+0xa4>)
 8002662:	681d      	ldr	r5, [r3, #0]
 8002664:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8002668:	b918      	cbnz	r0, 8002672 <__register_exitproc+0x26>
 800266a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800266e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8002672:	6843      	ldr	r3, [r0, #4]
 8002674:	2b1f      	cmp	r3, #31
 8002676:	dd19      	ble.n	80026ac <__register_exitproc+0x60>
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <__register_exitproc+0xa8>)
 800267a:	b933      	cbnz	r3, 800268a <__register_exitproc+0x3e>
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	f7ff ffe4 	bl	800264a <__retarget_lock_release_recursive>
 8002682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800268a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800268e:	f3af 8000 	nop.w
 8002692:	2800      	cmp	r0, #0
 8002694:	d0f2      	beq.n	800267c <__register_exitproc+0x30>
 8002696:	2200      	movs	r2, #0
 8002698:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800269c:	6042      	str	r2, [r0, #4]
 800269e:	6003      	str	r3, [r0, #0]
 80026a0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80026a4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80026a8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80026ac:	6843      	ldr	r3, [r0, #4]
 80026ae:	b19e      	cbz	r6, 80026d8 <__register_exitproc+0x8c>
 80026b0:	2201      	movs	r2, #1
 80026b2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80026b6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80026ba:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80026be:	409a      	lsls	r2, r3
 80026c0:	4311      	orrs	r1, r2
 80026c2:	2e02      	cmp	r6, #2
 80026c4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80026c8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80026cc:	bf02      	ittt	eq
 80026ce:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80026d2:	430a      	orreq	r2, r1
 80026d4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	3302      	adds	r3, #2
 80026dc:	6042      	str	r2, [r0, #4]
 80026de:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	f7ff ffb1 	bl	800264a <__retarget_lock_release_recursive>
 80026e8:	2000      	movs	r0, #0
 80026ea:	e7cc      	b.n	8002686 <__register_exitproc+0x3a>
 80026ec:	20000438 	.word	0x20000438
 80026f0:	08002780 	.word	0x08002780
 80026f4:	00000000 	.word	0x00000000

080026f8 <_init>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr

08002704 <_fini>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr
